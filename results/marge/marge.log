Running benchmark suite 'default'; results are written to: /home/safl/buildbot/benchpress/results/marge/9633e6d168a33781e0d29e95962a7623e60cbf04/benchmark-Jhno4N.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  8.189602
  2/5,  8.164995
  3/5,  8.173884
  4/5,  8.181478
  5/5,  8.158198
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  7.497964
  2/5,  7.50936
  3/5,  7.508581
  4/5,  7.51108
  5/5,  7.498339
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  7.623221
  2/5,  7.623302
  3/5,  7.628551
  4/5,  7.620708
  5/5,  7.630717
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  21.118605
  2/5,  21.123019
  3/5,  21.121279
  4/5,  21.12326
  5/5,  21.121878
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  21.043218
  2/5,  21.045743
  3/5,  21.497949
  4/5,  21.044719
  5/5,  21.045397
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  21.18691
  2/5,  21.174337
  3/5,  21.577078
  4/5,  21.175705
  5/5,  21.167384
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.908318
  2/5,  2.909524
  3/5,  2.910091
  4/5,  2.91268
  5/5,  2.908159
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.542226
  2/5,  3.539478
  3/5,  3.539555
  4/5,  3.54557
  5/5,  3.545918
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.280642
  2/5,  3.284143
  3/5,  3.283556
  4/5,  3.282212
  5/5,  3.279905
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  8.144073
  2/5,  8.143624
  3/5,  8.147415
  4/5,  8.14379
  5/5,  8.150349
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.404621
  2/5,  5.408158
  3/5,  5.406842
  4/5,  5.406154
  5/5,  5.405805
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.031854
  2/5,  5.020678
  3/5,  5.026471
  4/5,  5.023099
  5/5,  5.02453
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  5.018228
  2/5,  5.019504
  3/5,  5.018249
  4/5,  5.019247
  5/5,  5.018378
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.950119
  2/5,  1.946057
  3/5,  1.944748
  4/5,  1.951371
  5/5,  1.951201
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.924067
  2/5,  1.92561
  3/5,  1.919468
  4/5,  1.925981
  5/5,  1.925611
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  6.798084
  2/5,  6.81685
  3/5,  6.818613
  4/5,  6.816944
  5/5,  6.819605
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.164405
  2/5,  5.153609
  3/5,  5.16686
  4/5,  5.158953
  5/5,  5.167969
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.283767
  2/5,  5.275789
  3/5,  5.290499
  4/5,  5.277986
  5/5,  5.282637
}
