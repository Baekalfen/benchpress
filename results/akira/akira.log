Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/akira/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-fnjTae.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  14.547847
  2/5,  14.41738
  3/5,  14.462248
  4/5,  14.518407
  5/5,  14.603928
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.67889
  2/5,  11.747308
  3/5,  11.772799
  4/5,  11.749832
  5/5,  11.708332
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.835259
  2/5,  11.93922
  3/5,  11.931375
  4/5,  11.865501
  5/5,  11.990679
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  20.312525
  2/5,  20.331671
  3/5,  20.355564
  4/5,  20.365284
  5/5,  20.396302
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.630708
  2/5,  19.679517
  3/5,  19.706585
  4/5,  19.635718
  5/5,  19.648947
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.96646
  2/5,  20.008449
  3/5,  20.122279
  4/5,  20.212585
  5/5,  20.046076
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  5.096971
  2/5,  5.169493
  3/5,  5.137115
  4/5,  5.172638
  5/5,  5.14283
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  5.158678
  2/5,  5.152099
  3/5,  5.212475
  4/5,  5.243371
  5/5,  5.262695
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  4.087266
  2/5,  4.089002
  3/5,  4.073677
  4/5,  4.061384
  5/5,  4.06293
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  13.864864
  2/5,  13.90154
  3/5,  14.068728
  4/5,  14.088868
  5/5,  14.327314
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  8.393272
  2/5,  8.371872
  3/5,  8.405432
  4/5,  8.345226
  5/5,  8.086387
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  6.897745
  2/5,  6.956528
  3/5,  7.049399
  4/5,  7.145976
  5/5,  7.110812
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  6.842659
  2/5,  6.909376
  3/5,  6.913455
  4/5,  7.006601
  5/5,  6.988428
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.242648
  2/5,  3.307149
  3/5,  3.311426
  4/5,  3.375126
  5/5,  3.391024
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.277001
  2/5,  3.280361
  3/5,  3.353832
  4/5,  3.351045
  5/5,  3.384038
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  14.180058
  2/5,  14.403529
  3/5,  14.669452
  4/5,  14.727024
  5/5,  15.008211
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.478384
  2/5,  8.347283
  3/5,  8.215286
  4/5,  8.203726
  5/5,  8.543689
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.74589
  2/5,  8.727174
  3/5,  8.502757
  4/5,  8.874558
  5/5,  8.814194
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  5.300514
  2/5,  5.356144
  3/5,  5.466663
  4/5,  5.657742
  5/5,  5.62036
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  4.027242
  2/5,  4.062155
  3/5,  4.059315
  4/5,  4.066593
  5/5,  4.006598
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.859554
  2/5,  3.837934
  3/5,  3.822522
  4/5,  3.842164
  5/5,  3.978219
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  10.787635
  2/5,  11.126233
  3/5,  10.792445
  4/5,  10.792556
  5/5,  10.73113
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  12.108337
  2/5,  12.196016
  3/5,  12.18789
  4/5,  12.22117
  5/5,  12.26097
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  11.962095
  2/5,  11.925143
  3/5,  12.01686
  4/5,  11.987477
  5/5,  12.066072
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.61427
  2/5,  0.630375
  3/5,  0.628474
  4/5,  0.617861
  5/5,  0.630769
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.396417
  2/5,  0.398847
  3/5,  0.40225
  4/5,  0.399015
  5/5,  0.400616
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.399477
  2/5,  0.400561
  3/5,  0.401776
  4/5,  0.40234
  5/5,  0.405064
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.632465
  2/5,  0.633056
  3/5,  0.652692
  4/5,  0.646033
  5/5,  0.654769
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.420958
  2/5,  0.421058
  3/5,  0.421176
  4/5,  0.422062
  5/5,  0.462333
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.401646
  2/5,  0.404731
  3/5,  0.404972
  4/5,  0.406616
  5/5,  0.405738
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  3.968021
  2/5,  3.813287
  3/5,  3.927802
  4/5,  3.856924
  5/5,  3.874351
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  3.170304
  2/5,  3.221626
  3/5,  3.276721
  4/5,  3.279371
  5/5,  3.28888
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.788546
  2/5,  2.797163
  3/5,  2.828124
  4/5,  2.825268
  5/5,  2.853291
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  11.349296
  2/5,  11.526988
  3/5,  11.62368
  4/5,  11.627657
  5/5,  12.089625
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  5.010541
  2/5,  4.994483
  3/5,  4.986278
  4/5,  4.996915
  5/5,  4.80362
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.504134
  2/5,  4.699112
  3/5,  4.742271
  4/5,  4.723466
  5/5,  4.622806
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  5.924958
  2/5,  5.980685
  3/5,  6.046685
  4/5,  6.155228
  5/5,  6.206249
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.815026
  2/5,  2.845434
  3/5,  2.884649
  4/5,  2.836722
  5/5,  2.861521
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  3.129247
  2/5,  3.133423
  3/5,  3.097248
  4/5,  3.04965
  5/5,  3.036814
}
