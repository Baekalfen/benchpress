Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/akira/9633e6d168a33781e0d29e95962a7623e60cbf04/benchmark-axQmB6.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  14.117136
  2/5,  14.146768
  3/5,  14.295723
  4/5,  14.159302
  5/5,  14.132977
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.562742
  2/5,  11.641981
  3/5,  11.722746
  4/5,  11.673491
  5/5,  11.697679
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.828769
  2/5,  11.771148
  3/5,  11.753835
  4/5,  11.806495
  5/5,  11.845777
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  20.299742
  2/5,  20.234178
  3/5,  20.325954
  4/5,  20.241527
  5/5,  20.262035
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.563709
  2/5,  19.558523
  3/5,  19.638326
  4/5,  19.545742
  5/5,  19.628398
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.92042
  2/5,  19.89957
  3/5,  19.917419
  4/5,  19.902092
  5/5,  19.898978
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  5.10302
  2/5,  5.083398
  3/5,  5.109634
  4/5,  5.114366
  5/5,  5.076207
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  5.12436
  2/5,  5.098443
  3/5,  5.126924
  4/5,  4.920466
  5/5,  4.86037
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  4.011858
  2/5,  3.992853
  3/5,  3.982546
  4/5,  3.985998
  5/5,  3.982653
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  13.692806
  2/5,  13.698657
  3/5,  13.706861
  4/5,  13.693017
  5/5,  13.69752
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  8.254064
  2/5,  8.207624
  3/5,  8.15697
  4/5,  8.068396
  5/5,  7.998884
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  6.828318
  2/5,  6.837345
  3/5,  6.754213
  4/5,  6.79157
  5/5,  6.868561
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  6.773318
  2/5,  6.767039
  3/5,  6.75005
  4/5,  6.738574
  5/5,  6.748539
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.17
  2/5,  3.147528
  3/5,  3.180649
  4/5,  3.183915
  5/5,  3.157955
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.164025
  2/5,  3.188953
  3/5,  3.192408
  4/5,  3.190002
  5/5,  3.174028
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  14.471423
  2/5,  14.501346
  3/5,  14.472665
  4/5,  14.425627
  5/5,  14.269923
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.163546
  2/5,  8.057238
  3/5,  7.989971
  4/5,  8.045232
  5/5,  8.328869
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.653745
  2/5,  8.639636
  3/5,  8.406566
  4/5,  8.439082
  5/5,  8.644162
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  5.287349
  2/5,  5.292075
  3/5,  5.299017
  4/5,  5.283456
  5/5,  5.273205
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.85691
  2/5,  3.821249
  3/5,  3.794774
  4/5,  3.773786
  5/5,  3.770799
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.812976
  2/5,  3.778801
  3/5,  3.893179
  4/5,  3.916988
  5/5,  3.966927
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  10.658292
  2/5,  10.65094
  3/5,  10.617792
  4/5,  10.611297
  5/5,  10.694455
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  12.011231
  2/5,  12.02619
  3/5,  11.989539
  4/5,  11.98033
  5/5,  12.046338
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  11.81591
  2/5,  11.847531
  3/5,  11.923887
  4/5,  11.812556
  5/5,  11.828123
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.601171
  2/5,  0.600327
  3/5,  0.60081
  4/5,  0.597974
  5/5,  0.600022
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.394492
  2/5,  0.395646
  3/5,  0.395418
  4/5,  0.404884
  5/5,  0.393113
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.407675
  2/5,  0.397475
  3/5,  0.396763
  4/5,  0.396158
  5/5,  0.395675
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.619572
  2/5,  0.617546
  3/5,  0.61536
  4/5,  0.615139
  5/5,  0.613913
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.418849
  2/5,  0.418081
  3/5,  0.417998
  4/5,  0.419472
  5/5,  0.41772
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.402456
  2/5,  0.403096
  3/5,  0.40167
  4/5,  0.39981
  5/5,  0.400978
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  4.057588
  2/5,  4.030553
  3/5,  4.015324
  4/5,  4.015939
  5/5,  4.002437
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.983086
  2/5,  3.052437
  3/5,  3.064074
  4/5,  3.123474
  5/5,  3.169201
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.751885
  2/5,  2.756828
  3/5,  2.753507
  4/5,  2.749151
  5/5,  2.746674
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  11.065052
  2/5,  11.044681
  3/5,  11.038444
  4/5,  11.041771
  5/5,  11.015704
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.590931
  2/5,  4.680859
  3/5,  4.985209
  4/5,  4.948605
  5/5,  4.951623
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.638562
  2/5,  4.646101
  3/5,  4.559174
  4/5,  4.466904
  5/5,  4.435829
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  5.754795
  2/5,  5.748478
  3/5,  5.778862
  4/5,  5.773721
  5/5,  5.753586
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.646527
  2/5,  2.665667
  3/5,  2.676183
  4/5,  2.71381
  5/5,  2.778303
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  3.099895
  2/5,  3.089092
  3/5,  3.088979
  4/5,  3.098611
  5/5,  3.085518
}
