Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/akira/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-Ed_F4L.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  14.333421
  2/5,  14.36279
  3/5,  14.364957
  4/5,  14.33874
  5/5,  14.371881
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.718741
  2/5,  11.659087
  3/5,  11.70715
  4/5,  11.747803
  5/5,  11.662698
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.888919
  2/5,  11.879688
  3/5,  11.86334
  4/5,  11.891177
  5/5,  12.016873
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  20.361662
  2/5,  20.345771
  3/5,  20.327099
  4/5,  20.326702
  5/5,  20.311849
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.638331
  2/5,  19.797089
  3/5,  19.648067
  4/5,  19.653621
  5/5,  19.660003
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  20.00054
  2/5,  20.004016
  3/5,  20.700757
  4/5,  20.001157
  5/5,  19.967454
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  5.097467
  2/5,  5.100352
  3/5,  5.115669
  4/5,  5.142002
  5/5,  5.108084
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  5.211836
  2/5,  5.173777
  3/5,  5.091651
  4/5,  4.889721
  5/5,  4.721588
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  4.074155
  2/5,  4.085517
  3/5,  4.103058
  4/5,  4.08122
  5/5,  4.036561
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  13.914903
  2/5,  13.870216
  3/5,  13.887225
  4/5,  13.877366
  5/5,  13.878479
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  7.833935
  2/5,  8.186563
  3/5,  8.347936
  4/5,  8.321202
  5/5,  7.918458
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  7.007462
  2/5,  6.927391
  3/5,  6.961688
  4/5,  7.010268
  5/5,  6.958884
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  6.825802
  2/5,  6.836579
  3/5,  6.842577
  4/5,  6.837673
  5/5,  6.869799
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.252092
  2/5,  3.254393
  3/5,  3.277621
  4/5,  3.249995
  5/5,  3.267565
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.285655
  2/5,  3.273011
  3/5,  3.293802
  4/5,  3.27272
  5/5,  3.288754
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  14.229942
  2/5,  14.393858
  3/5,  14.476647
  4/5,  14.23112
  5/5,  14.304453
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.542991
  2/5,  8.688394
  3/5,  8.194699
  4/5,  8.37349
  5/5,  8.627118
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.588964
  2/5,  8.780648
  3/5,  8.411946
  4/5,  8.825091
  5/5,  8.580345
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  5.399691
  2/5,  5.303737
  3/5,  5.375862
  4/5,  5.413092
  5/5,  5.405543
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.817301
  2/5,  3.786423
  3/5,  4.054103
  4/5,  4.041891
  5/5,  3.920727
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.795381
  2/5,  3.930747
  3/5,  3.953989
  4/5,  3.957307
  5/5,  3.820343
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  10.643992
  2/5,  10.644535
  3/5,  10.617267
  4/5,  10.702625
  5/5,  10.661659
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  12.234374
  2/5,  12.118798
  3/5,  12.063842
  4/5,  12.080538
  5/5,  12.085806
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  11.982117
  2/5,  11.920942
  3/5,  11.979272
  4/5,  11.953765
  5/5,  11.905427
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.61878
  2/5,  0.617146
  3/5,  0.616611
  4/5,  0.61583
  5/5,  0.618215
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.390028
  2/5,  0.389325
  3/5,  0.38767
  4/5,  0.387818
  5/5,  0.389446
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.406715
  2/5,  0.398335
  3/5,  0.415659
  4/5,  0.399856
  5/5,  0.39922
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.639287
  2/5,  0.641526
  3/5,  0.643241
  4/5,  0.644071
  5/5,  0.643299
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.428904
  2/5,  0.439604
  3/5,  0.425302
  4/5,  0.424422
  5/5,  0.427572
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.410509
  2/5,  0.40871
  3/5,  0.408482
  4/5,  0.406399
  5/5,  0.406265
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  3.825489
  2/5,  3.812902
  3/5,  3.745868
  4/5,  3.897386
  5/5,  3.954759
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  3.226441
  2/5,  3.192361
  3/5,  3.176351
  4/5,  3.119361
  5/5,  3.055332
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.779917
  2/5,  2.765338
  3/5,  2.780703
  4/5,  2.799871
  5/5,  2.87566
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  11.396239
  2/5,  11.386575
  3/5,  11.386822
  4/5,  11.365681
  5/5,  11.365706
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  5.021325
  2/5,  4.732748
  3/5,  5.145452
  4/5,  4.958728
  5/5,  4.669966
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.685107
  2/5,  4.645487
  3/5,  4.572126
  4/5,  4.722455
  5/5,  4.621516
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  5.986092
  2/5,  5.954912
  3/5,  5.937184
  4/5,  5.947966
  5/5,  5.953949
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.839127
  2/5,  2.789894
  3/5,  2.664624
  4/5,  2.592932
  5/5,  2.863546
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  3.132858
  2/5,  3.096058
  3/5,  2.986022
  4/5,  3.029409
  5/5,  3.134854
}
