Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/akira/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-HWwCEK.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  14.1384
  2/5,  14.139188
  3/5,  14.13622
  4/5,  14.125859
  5/5,  14.158598
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.707591
  2/5,  11.652635
  3/5,  11.574665
  4/5,  12.161475
  5/5,  11.681159
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.903284
  2/5,  11.756631
  3/5,  11.780401
  4/5,  11.836039
  5/5,  11.860176
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  20.238977
  2/5,  20.373965
  3/5,  20.346703
  4/5,  20.221465
  5/5,  20.242516
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.578414
  2/5,  19.59457
  3/5,  19.579855
  4/5,  19.583123
  5/5,  19.572759
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.895108
  2/5,  19.905129
  3/5,  19.947824
  4/5,  19.977467
  5/5,  19.919158
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  5.124277
  2/5,  5.104732
  3/5,  5.096001
  4/5,  5.06744
  5/5,  5.074616
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  5.12264
  2/5,  5.12941
  3/5,  5.122017
  4/5,  5.129477
  5/5,  5.113158
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  4.042558
  2/5,  4.044701
  3/5,  3.992352
  4/5,  3.98655
  5/5,  3.978182
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  13.698948
  2/5,  13.696307
  3/5,  13.676928
  4/5,  13.680232
  5/5,  13.705267
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  8.281937
  2/5,  8.212055
  3/5,  8.290478
  4/5,  8.255323
  5/5,  8.301319
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  6.893503
  2/5,  6.814968
  3/5,  6.805263
  4/5,  6.844132
  5/5,  6.923921
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  6.753838
  2/5,  6.751552
  3/5,  6.739731
  4/5,  6.743933
  5/5,  6.742619
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.177839
  2/5,  3.163275
  3/5,  3.165158
  4/5,  3.189001
  5/5,  3.197145
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.17548
  2/5,  3.178841
  3/5,  3.18572
  4/5,  3.17878
  5/5,  3.164103
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  14.331778
  2/5,  14.131744
  3/5,  14.200641
  4/5,  14.345939
  5/5,  14.496951
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.547612
  2/5,  8.579569
  3/5,  8.741141
  4/5,  8.54424
  5/5,  8.635815
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.282035
  2/5,  8.555336
  3/5,  8.697298
  4/5,  8.665646
  5/5,  8.344201
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  5.158963
  2/5,  5.172604
  3/5,  5.194296
  4/5,  5.26852
  5/5,  5.275383
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.991828
  2/5,  3.993359
  3/5,  3.994602
  4/5,  4.001068
  5/5,  4.001033
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.854787
  2/5,  3.786671
  3/5,  3.748251
  4/5,  3.763926
  5/5,  3.804069
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  10.630534
  2/5,  10.629471
  3/5,  10.599189
  4/5,  10.5739
  5/5,  10.657797
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  11.987397
  2/5,  12.016558
  3/5,  12.028191
  4/5,  12.00503
  5/5,  11.951129
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  11.843671
  2/5,  11.821471
  3/5,  11.841075
  4/5,  11.822167
  5/5,  11.831626
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.598007
  2/5,  0.602279
  3/5,  0.601736
  4/5,  0.600199
  5/5,  0.602395
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.395635
  2/5,  0.394435
  3/5,  0.395153
  4/5,  0.394786
  5/5,  0.395655
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.398019
  2/5,  0.398189
  3/5,  0.396114
  4/5,  0.397121
  5/5,  0.402
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.624953
  2/5,  0.623049
  3/5,  0.621096
  4/5,  0.624824
  5/5,  0.625034
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.41695
  2/5,  0.43201
  3/5,  0.421305
  4/5,  0.441666
  5/5,  0.415361
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.401173
  2/5,  0.400931
  3/5,  0.400438
  4/5,  0.402019
  5/5,  0.398876
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  3.990325
  2/5,  3.810463
  3/5,  3.978607
  4/5,  4.017618
  5/5,  4.033157
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  3.139565
  2/5,  3.189074
  3/5,  3.19082
  4/5,  3.183659
  5/5,  3.181898
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.760893
  2/5,  2.747551
  3/5,  2.742875
  4/5,  2.753047
  5/5,  2.754149
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  11.19303
  2/5,  11.066981
  3/5,  11.108287
  4/5,  11.04617
  5/5,  11.029926
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.574059
  2/5,  4.588036
  3/5,  4.741311
  4/5,  4.915333
  5/5,  4.945129
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.590308
  2/5,  4.5248
  3/5,  4.456632
  4/5,  4.45331
  5/5,  4.599444
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  5.765935
  2/5,  5.752924
  3/5,  5.765149
  4/5,  5.760202
  5/5,  5.754635
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.804212
  2/5,  2.810112
  3/5,  2.792648
  4/5,  2.802279
  5/5,  2.813789
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  3.092106
  2/5,  3.068524
  3/5,  3.054736
  4/5,  2.988846
  5/5,  2.956835
}
