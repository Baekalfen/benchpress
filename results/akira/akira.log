Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/akira/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-E_BqbK.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  14.148769
  2/5,  14.135805
  3/5,  14.128899
  4/5,  14.136108
  5/5,  14.156042
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.686887
  2/5,  11.664854
  3/5,  11.717378
  4/5,  11.593568
  5/5,  11.57826
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.815206
  2/5,  11.844359
  3/5,  11.851041
  4/5,  11.848566
  5/5,  11.782041
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  20.233063
  2/5,  20.23968
  3/5,  21.016021
  4/5,  20.239106
  5/5,  20.537023
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.56843
  2/5,  19.570889
  3/5,  19.567377
  4/5,  19.546089
  5/5,  20.009878
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.88732
  2/5,  19.935531
  3/5,  19.897114
  4/5,  19.950199
  5/5,  19.97775
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  5.034964
  2/5,  5.078021
  3/5,  5.080919
  4/5,  5.105231
  5/5,  5.082802
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  4.740787
  2/5,  4.760413
  3/5,  4.724016
  4/5,  4.679161
  5/5,  4.88433
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  4.073543
  2/5,  4.072056
  3/5,  4.051957
  4/5,  4.061217
  5/5,  4.051371
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  13.690374
  2/5,  13.698415
  3/5,  13.70265
  4/5,  13.670118
  5/5,  13.686702
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  8.284993
  2/5,  8.266699
  3/5,  8.266895
  4/5,  8.253248
  5/5,  8.277382
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  6.913816
  2/5,  6.85131
  3/5,  6.789418
  4/5,  6.868269
  5/5,  6.916621
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  6.751055
  2/5,  6.740148
  3/5,  6.749982
  4/5,  6.742199
  5/5,  6.753455
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.184085
  2/5,  3.190654
  3/5,  3.164862
  4/5,  3.173297
  5/5,  3.166625
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.183078
  2/5,  3.165945
  3/5,  3.167895
  4/5,  3.158831
  5/5,  3.153148
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  14.358977
  2/5,  14.496053
  3/5,  14.274013
  4/5,  14.314194
  5/5,  14.486164
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.590349
  2/5,  8.328494
  3/5,  8.492297
  4/5,  8.543498
  5/5,  8.592539
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.386604
  2/5,  8.760934
  3/5,  8.524304
  4/5,  8.661926
  5/5,  8.421482
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  5.301323
  2/5,  5.301049
  3/5,  5.276834
  4/5,  5.236698
  5/5,  5.19775
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.762571
  2/5,  3.844743
  3/5,  3.947685
  4/5,  3.992249
  5/5,  3.969544
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.916601
  2/5,  3.95705
  3/5,  3.776286
  4/5,  3.815681
  5/5,  3.855575
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  10.775091
  2/5,  11.310781
  3/5,  10.558851
  4/5,  10.614592
  5/5,  10.993005
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  11.967777
  2/5,  12.193592
  3/5,  11.982985
  4/5,  11.995758
  5/5,  12.060716
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  11.846545
  2/5,  11.917734
  3/5,  11.831529
  4/5,  11.85537
  5/5,  11.867051
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.600728
  2/5,  0.601936
  3/5,  0.602067
  4/5,  0.601809
  5/5,  0.593017
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.396059
  2/5,  0.385074
  3/5,  0.424153
  4/5,  0.385827
  5/5,  0.386034
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.390037
  2/5,  0.390238
  3/5,  0.391384
  4/5,  0.395024
  5/5,  0.39486
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.624857
  2/5,  0.623629
  3/5,  0.620047
  4/5,  0.623636
  5/5,  0.62505
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.429785
  2/5,  0.419657
  3/5,  0.419306
  4/5,  0.458797
  5/5,  0.419256
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.405668
  2/5,  0.410035
  3/5,  0.410273
  4/5,  0.405949
  5/5,  0.404734
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  4.155334
  2/5,  4.081033
  3/5,  4.122517
  4/5,  4.152157
  5/5,  4.094079
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  3.059102
  2/5,  3.024941
  3/5,  2.990175
  4/5,  3.008889
  5/5,  2.998212
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.727685
  2/5,  2.733528
  3/5,  2.751655
  4/5,  2.757536
  5/5,  2.836443
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  11.03109
  2/5,  11.057744
  3/5,  11.030038
  4/5,  11.070475
  5/5,  11.057
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.909647
  2/5,  4.71531
  3/5,  4.748715
  4/5,  4.916273
  5/5,  4.956058
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.569989
  2/5,  4.549016
  3/5,  4.611341
  4/5,  4.479581
  5/5,  4.627855
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  5.761854
  2/5,  5.781746
  3/5,  5.760305
  4/5,  5.756358
  5/5,  5.760975
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.609706
  2/5,  2.633186
  3/5,  2.683941
  4/5,  2.786681
  5/5,  2.840102
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  3.104359
  2/5,  3.084103
  3/5,  2.993151
  4/5,  2.963052
  5/5,  3.071091
}
