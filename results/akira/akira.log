Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/akira/1c8b651a8d21b0e696f88ee6b1728db4c6bae4d4/benchmark-9eCKgu.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  14.148307
  2/5,  14.145713
  3/5,  14.155281
  4/5,  14.157711
  5/5,  14.137402
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.70724
  2/5,  11.734604
  3/5,  11.663985
  4/5,  11.598953
  5/5,  11.570526
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.684619
  2/5,  11.69358
  3/5,  11.642927
  4/5,  11.706681
  5/5,  11.641859
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  20.199122
  2/5,  20.189928
  3/5,  20.297549
  4/5,  20.236571
  5/5,  20.270123
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.733978
  2/5,  19.58
  3/5,  19.690351
  4/5,  19.601846
  5/5,  19.591498
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.610617
  2/5,  19.613315
  3/5,  19.653165
  4/5,  19.617492
  5/5,  19.659755
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  5.08463
  2/5,  5.223124
  3/5,  5.089733
  4/5,  5.582917
  5/5,  5.097295
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  4.879535
  2/5,  4.787724
  3/5,  4.704851
  4/5,  4.683725
  5/5,  4.679945
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  4.025269
  2/5,  4.077834
  3/5,  4.089228
  4/5,  4.107409
  5/5,  4.108756
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  13.680855
  2/5,  13.685952
  3/5,  13.68351
  4/5,  13.68254
  5/5,  13.67174
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  8.249958
  2/5,  8.225933
  3/5,  8.256377
  4/5,  8.16787
  5/5,  8.039514
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  7.004453
  2/5,  6.996075
  3/5,  7.010927
  4/5,  7.119278
  5/5,  7.139712
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  6.743925
  2/5,  6.773047
  3/5,  6.741459
  4/5,  6.737615
  5/5,  6.758461
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.164121
  2/5,  3.168552
  3/5,  3.170863
  4/5,  3.170305
  5/5,  3.188609
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.175744
  2/5,  3.166979
  3/5,  3.190818
  4/5,  3.183974
  5/5,  3.171376
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  14.322741
  2/5,  14.356207
  3/5,  13.989999
  4/5,  14.192083
  5/5,  14.303194
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.555682
  2/5,  8.567135
  3/5,  8.550508
  4/5,  8.447015
  5/5,  8.314777
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.681899
  2/5,  8.573227
  3/5,  8.680787
  4/5,  8.496092
  5/5,  8.601521
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  5.166532
  2/5,  5.173378
  3/5,  5.204117
  4/5,  5.275758
  5/5,  5.28522
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.976618
  2/5,  3.986047
  3/5,  3.986468
  4/5,  3.995166
  5/5,  3.986599
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.989764
  2/5,  3.954262
  3/5,  3.908365
  4/5,  3.827068
  5/5,  3.83172
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  10.557922
  2/5,  10.634523
  3/5,  10.596186
  4/5,  10.640433
  5/5,  10.6571
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  11.967188
  2/5,  11.985317
  3/5,  11.997636
  4/5,  12.017536
  5/5,  12.022502
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  11.808642
  2/5,  11.87298
  3/5,  11.859193
  4/5,  11.801913
  5/5,  11.819057
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.594641
  2/5,  0.601443
  3/5,  0.600205
  4/5,  0.601698
  5/5,  0.59323
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.404857
  2/5,  0.388465
  3/5,  0.387784
  4/5,  0.392301
  5/5,  0.384788
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.406701
  2/5,  0.407337
  3/5,  0.399106
  4/5,  0.408114
  5/5,  0.399949
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.622798
  2/5,  0.623898
  3/5,  0.62372
  4/5,  0.622272
  5/5,  0.617542
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.419688
  2/5,  0.418413
  3/5,  0.454736
  4/5,  0.455269
  5/5,  0.424741
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.416418
  2/5,  0.421983
  3/5,  0.415536
  4/5,  0.42134
  5/5,  0.415472
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  4.047782
  2/5,  4.093091
  3/5,  4.108852
  4/5,  4.084527
  5/5,  4.09458
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  3.101866
  2/5,  3.05868
  3/5,  3.039551
  4/5,  3.018452
  5/5,  3.01104
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.709419
  2/5,  2.692037
  3/5,  2.702464
  4/5,  2.695501
  5/5,  2.695437
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  11.042721
  2/5,  11.076113
  3/5,  11.047918
  4/5,  12.135553
  5/5,  11.027231
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.964795
  2/5,  4.855649
  3/5,  4.668706
  4/5,  4.589729
  5/5,  4.68596
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.636824
  2/5,  4.667869
  3/5,  4.693166
  4/5,  4.713413
  5/5,  4.669822
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  6.084777
  2/5,  6.067166
  3/5,  6.078058
  4/5,  6.065657
  5/5,  6.092439
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.77845
  2/5,  2.765644
  3/5,  2.742235
  4/5,  2.744257
  5/5,  2.714809
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.991069
  2/5,  2.983337
  3/5,  2.947309
  4/5,  2.984719
  5/5,  3.078428
}
