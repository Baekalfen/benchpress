Running benchmark suite 'default'; results are written to: /home/safl/buildbot/benchpress/results/akira/abe4b06e67f09632d837e1203bcbc4df1828edb6/benchmark-61Uyao.json.
{ Jacobi Fixed - numpy ( None ),
  python jacobi_fixed.py --size=7168*7168*4 --cphvb=False
  1/3,  10.786481
  2/3,  10.607846
  3/3,  11.014887
}
{ Jacobi Fixed - simple ( simple ),
  python jacobi_fixed.py --size=7168*7168*4 --cphvb=True
  1/3,  10.600262
  2/3,  10.522788
  3/3,  10.842948
}
{ Jacobi Fixed - score ( score ),
  python jacobi_fixed.py --size=7168*7168*4 --cphvb=True
  1/3,  8.559421
  2/3,  8.895804
  3/3,  8.500148
}
{ Jacobi Fixed - mcore ( mcore ),
  python jacobi_fixed.py --size=7168*7168*4 --cphvb=True
  1/3,  0.926396
  2/3,  0.928127
  3/3,  0.900726
}
{ Monte Carlo PI - RIL - numpy ( None ),
  python MonteCarlo.py --size=10*1000000*10 --cphvb=False
  1/3,  19.846876
  2/3,  20.305594
  3/3,  20.744898
}
{ Monte Carlo PI - RIL - simple ( simple ),
  python MonteCarlo.py --size=10*1000000*10 --cphvb=True
  1/3,  20.685859
  2/3,  20.359117
  3/3,  19.81126
}
{ Monte Carlo PI - RIL - score ( score ),
  python MonteCarlo.py --size=10*1000000*10 --cphvb=True
  1/3,  19.184462
  2/3,  19.855863
  3/3,  20.121004
}
{ Monte Carlo PI - RIL - mcore ( mcore ),
  python MonteCarlo.py --size=10*1000000*10 --cphvb=True
  1/3,  18.628238
  2/3,  18.105844
  3/3,  17.441657
}
{ Shallow Water - numpy ( None ),
  python swater.py --size=2200*1 --cphvb=False
  1/3,  12.469964
  2/3,  12.68925
  3/3,  12.847326
}
{ Shallow Water - simple ( simple ),
  python swater.py --size=2200*1 --cphvb=True
  1/3,  5.421964
  2/3,  5.58936
  3/3,  5.44835
}
{ Shallow Water - score ( score ),
  python swater.py --size=2200*1 --cphvb=True
  1/3,  6.220933
  2/3,  6.195605
  3/3,  6.064989
}
{ Shallow Water - mcore ( mcore ),
  python swater.py --size=2200*1 --cphvb=True
  1/3,  1.608811
  2/3,  1.548752
  3/3,  1.931413
}
{ kNN - numpy ( None ),
  python kNN.py --size=10000*120 --cphvb=False
  1/3,  13.121542
  2/3,  12.823408
  3/3,  12.75402
}
{ kNN - simple ( simple ),
  python kNN.py --size=10000*120 --cphvb=True
  1/3,  6.374979
  2/3,  6.306191
  3/3,  6.596017
}
{ kNN - score ( score ),
  python kNN.py --size=10000*120 --cphvb=True
  1/3,  6.366651
  2/3,  6.393376
  3/3,  6.522181
}
{ kNN - mcore ( mcore ),
  python kNN.py --size=10000*120 --cphvb=True
  1/3,  1.738342
  2/3,  1.723766
  3/3,  1.81462
}
{ Stencil - 1D 4way - Copy - numpy ( None ),
  python stencil.twonine.py --size=10240*1024*10 --cphvb=False
  1/3,  0.313237
  2/3,  0.339225
  3/3,  0.344457
}
{ Stencil - 1D 4way - Copy - simple ( simple ),
  python stencil.twonine.py --size=10240*1024*10 --cphvb=True
  1/3,  0.56649
  2/3,  0.551507
  3/3,  0.585117
}
{ Stencil - 1D 4way - Copy - score ( score ),
  python stencil.twonine.py --size=10240*1024*10 --cphvb=True
  1/3,  0.637692
  2/3,  0.61311
  3/3,  0.603543
}
{ Stencil - 1D 4way - Copy - mcore ( mcore ),
  python stencil.twonine.py --size=10240*1024*10 --cphvb=True
  1/3,  0.589187
  2/3,  0.543307
  3/3,  0.590829
}
{ Stencil - 1D 4way - No-Copy - numpy ( None ),
  python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/3,  9.362037
  2/3,  8.952817
  3/3,  8.854386
}
{ Stencil - 1D 4way - No-Copy - simple ( simple ),
  python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/3,  6.489092
  2/3,  6.533148
  3/3,  6.602768
}
{ Stencil - 1D 4way - No-Copy - score ( score ),
  python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/3,  5.639493
  2/3,  5.59716
  3/3,  5.649728
}
{ Stencil - 1D 4way - No-Copy - mcore ( mcore ),
  python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/3,  0.648136
  2/3,  0.732351
  3/3,  0.75044
}
