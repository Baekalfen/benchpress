Running benchmark suite 'tiling_base'; results are written to: /home/safl/buildbot/benchpress/results/akira/9458afc548a682bda289f5ea704cdc4ef34e1527/benchmark-tiling_base-H8US_l.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  14.425118
  2/5,  14.39915
  3/5,  14.425949
  4/5,  14.431633
  5/5,  14.387249
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.705175
  2/5,  11.745742
  3/5,  11.648486
  4/5,  11.67304
  5/5,  11.74271
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.916258
  2/5,  11.845597
  3/5,  11.925409
  4/5,  11.860564
  5/5,  11.883002
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  20.350293
  2/5,  20.35506
  3/5,  20.365307
  4/5,  20.328765
  5/5,  20.350255
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.763307
  2/5,  19.669049
  3/5,  19.671087
  4/5,  19.663253
  5/5,  19.758528
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  20.444225
  2/5,  19.990258
  3/5,  20.014439
  4/5,  20.069612
  5/5,  19.999534
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  5.23967
  2/5,  5.235549
  3/5,  5.226587
  4/5,  5.51887
  5/5,  5.182168
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  5.155991
  2/5,  5.050546
  3/5,  5.112466
  4/5,  5.077918
  5/5,  5.046633
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  4.08533
  2/5,  4.098835
  3/5,  4.063911
  4/5,  4.082257
  5/5,  4.085453
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  13.990487
  2/5,  14.010344
  3/5,  13.929231
  4/5,  13.974669
  5/5,  13.984745
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  8.227354
  2/5,  8.217598
  3/5,  8.19488
  4/5,  8.24873
  5/5,  8.280606
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  6.992883
  2/5,  6.969734
  3/5,  6.967365
  4/5,  6.98104
  5/5,  6.983566
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  6.854609
  2/5,  6.876401
  3/5,  6.895376
  4/5,  6.854405
  5/5,  6.859534
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.256924
  2/5,  3.287083
  3/5,  3.259629
  4/5,  3.287675
  5/5,  3.271063
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.265095
  2/5,  3.2921
  3/5,  3.300134
  4/5,  3.277235
  5/5,  3.27103
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  14.235791
  2/5,  14.396478
  3/5,  14.483419
  4/5,  14.395934
  5/5,  14.384298
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.382625
  2/5,  8.44488
  3/5,  8.52557
  4/5,  8.414836
  5/5,  8.457452
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.688553
  2/5,  8.645738
  3/5,  8.680798
  4/5,  8.595313
  5/5,  8.609835
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  5.425403
  2/5,  5.410238
  3/5,  5.395683
  4/5,  5.436284
  5/5,  5.415187
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.974343
  2/5,  4.029755
  3/5,  4.012387
  4/5,  4.050474
  5/5,  3.9879
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.915561
  2/5,  3.885228
  3/5,  3.966256
  4/5,  3.917187
  5/5,  3.896703
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  10.640373
  2/5,  10.647842
  3/5,  10.617883
  4/5,  10.660692
  5/5,  10.583332
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  12.116829
  2/5,  12.097683
  3/5,  12.090622
  4/5,  12.042316
  5/5,  12.101864
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  11.945067
  2/5,  11.941052
  3/5,  11.927848
  4/5,  12.038657
  5/5,  11.976696
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.619658
  2/5,  0.621042
  3/5,  0.621632
  4/5,  0.624498
  5/5,  0.621063
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.397079
  2/5,  0.390361
  3/5,  0.395828
  4/5,  0.396251
  5/5,  0.403277
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.4061
  2/5,  0.405198
  3/5,  0.409223
  4/5,  0.409416
  5/5,  0.408365
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.646273
  2/5,  0.644102
  3/5,  0.644542
  4/5,  0.643598
  5/5,  0.650703
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.423053
  2/5,  0.422586
  3/5,  0.42183
  4/5,  0.421325
  5/5,  0.417662
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.408591
  2/5,  0.40867
  3/5,  0.406513
  4/5,  0.407256
  5/5,  0.411208
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  3.948907
  2/5,  4.115177
  3/5,  3.921165
  4/5,  4.045589
  5/5,  3.990478
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  3.245234
  2/5,  3.198758
  3/5,  3.131889
  4/5,  3.15912
  5/5,  3.237252
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.769488
  2/5,  2.816768
  3/5,  2.796579
  4/5,  2.756507
  5/5,  2.811616
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  11.479963
  2/5,  11.489357
  3/5,  11.471261
  4/5,  11.554273
  5/5,  11.499671
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.99446
  2/5,  5.022157
  3/5,  4.906098
  4/5,  4.957562
  5/5,  4.918674
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.656905
  2/5,  4.604475
  3/5,  4.698159
  4/5,  4.633138
  5/5,  4.676968
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  5.967909
  2/5,  6.008459
  3/5,  5.999887
  4/5,  6.008757
  5/5,  5.986445
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.863501
  2/5,  2.845445
  3/5,  2.778348
  4/5,  2.761313
  5/5,  2.776902
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  3.076201
  2/5,  3.133446
  3/5,  3.141029
  4/5,  3.026536
  5/5,  3.144378
}
