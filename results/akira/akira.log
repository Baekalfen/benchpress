Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/akira/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-30k5VP.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  14.351286
  2/5,  14.355827
  3/5,  14.322458
  4/5,  14.346996
  5/5,  14.356747
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.758078
  2/5,  11.753922
  3/5,  11.733466
  4/5,  11.686683
  5/5,  11.637074
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.896431
  2/5,  11.920749
  3/5,  11.904898
  4/5,  11.914949
  5/5,  11.851457
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  20.290323
  2/5,  20.370704
  3/5,  20.278356
  4/5,  20.351084
  5/5,  20.319481
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.658813
  2/5,  19.762359
  3/5,  19.739751
  4/5,  19.631932
  5/5,  19.734282
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.985376
  2/5,  20.427711
  3/5,  19.959124
  4/5,  19.96647
  5/5,  19.967804
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  5.11794
  2/5,  5.144162
  3/5,  5.103585
  4/5,  5.126495
  5/5,  5.141596
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  5.097805
  2/5,  5.186992
  3/5,  5.165042
  4/5,  5.134822
  5/5,  4.842728
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.992489
  2/5,  4.070965
  3/5,  4.092554
  4/5,  4.099716
  5/5,  4.089143
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  13.896809
  2/5,  13.873279
  3/5,  13.898547
  4/5,  13.911773
  5/5,  13.913589
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  8.240124
  2/5,  7.929554
  3/5,  7.926236
  4/5,  8.357555
  5/5,  8.358273
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  6.988628
  2/5,  6.86929
  3/5,  6.928122
  4/5,  6.972699
  5/5,  6.999746
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  6.83235
  2/5,  6.836433
  3/5,  6.8496
  4/5,  6.834473
  5/5,  6.845486
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.253689
  2/5,  3.263142
  3/5,  3.261373
  4/5,  3.243448
  5/5,  3.289195
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.240095
  2/5,  3.272384
  3/5,  3.260262
  4/5,  3.249282
  5/5,  3.247018
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  14.292792
  2/5,  14.486937
  3/5,  14.473251
  4/5,  14.31833
  5/5,  14.100864
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.136557
  2/5,  8.452588
  3/5,  8.647191
  4/5,  8.616135
  5/5,  8.523008
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.383459
  2/5,  8.687852
  3/5,  8.655066
  4/5,  8.621514
  5/5,  8.742794
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  5.413711
  2/5,  5.400381
  3/5,  5.351113
  4/5,  5.295976
  5/5,  5.364295
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  4.038608
  2/5,  4.02165
  3/5,  4.030196
  4/5,  3.979294
  5/5,  3.849533
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.821819
  2/5,  4.003416
  3/5,  4.01318
  4/5,  4.007102
  5/5,  3.854841
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  10.651597
  2/5,  10.67009
  3/5,  10.755135
  4/5,  10.706344
  5/5,  10.920958
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  12.031374
  2/5,  12.068295
  3/5,  12.077118
  4/5,  12.112058
  5/5,  12.06191
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  11.912667
  2/5,  11.872906
  3/5,  11.88857
  4/5,  11.906633
  5/5,  11.882846
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.612017
  2/5,  0.604306
  3/5,  0.612947
  4/5,  0.614194
  5/5,  0.614863
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.430348
  2/5,  0.396406
  3/5,  0.397938
  4/5,  0.397626
  5/5,  0.397435
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.402079
  2/5,  0.40249
  3/5,  0.399242
  4/5,  0.400467
  5/5,  0.399025
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.63739
  2/5,  0.643645
  3/5,  0.634483
  4/5,  0.638257
  5/5,  0.640294
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.42298
  2/5,  0.423539
  3/5,  0.423219
  4/5,  0.421938
  5/5,  0.421916
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.406235
  2/5,  0.406282
  3/5,  0.403023
  4/5,  0.401762
  5/5,  0.403663
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  3.956232
  2/5,  3.954394
  3/5,  3.979233
  4/5,  3.787531
  5/5,  3.732355
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  3.042045
  2/5,  3.091048
  3/5,  3.159306
  4/5,  3.205996
  5/5,  3.2233
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.78033
  2/5,  2.787456
  3/5,  2.787509
  4/5,  2.787712
  5/5,  2.781685
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  11.33978
  2/5,  11.336396
  3/5,  11.327525
  4/5,  11.351998
  5/5,  11.345148
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.727547
  2/5,  4.680163
  3/5,  4.635422
  4/5,  5.002475
  5/5,  4.99453
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.676204
  2/5,  4.649137
  3/5,  4.494197
  4/5,  4.562842
  5/5,  4.679121
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  5.928609
  2/5,  5.957756
  3/5,  5.931968
  4/5,  5.947173
  5/5,  5.943655
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.839132
  2/5,  2.836042
  3/5,  2.821024
  4/5,  2.839675
  5/5,  2.819768
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  3.113802
  2/5,  3.093124
  3/5,  3.007259
  4/5,  2.982487
  5/5,  3.085178
}
