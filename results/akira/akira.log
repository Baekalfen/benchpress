Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/akira/08d082bea753a6cf66097622b448da203d868aea/benchmark-Y4Tcby.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  14.412325
  2/5,  14.395342
  3/5,  14.377244
  4/5,  14.376614
  5/5,  14.395747
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.724316
  2/5,  11.636248
  3/5,  11.791156
  4/5,  11.687367
  5/5,  11.615781
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.948036
  2/5,  11.905146
  3/5,  11.845939
  4/5,  11.95432
  5/5,  11.870108
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  20.296254
  2/5,  20.304066
  3/5,  20.350503
  4/5,  20.435948
  5/5,  20.339051
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.764041
  2/5,  19.672217
  3/5,  19.679432
  4/5,  19.620736
  5/5,  19.604957
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  20.148593
  2/5,  19.979196
  3/5,  19.990511
  4/5,  19.984045
  5/5,  20.417901
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  5.191508
  2/5,  5.170169
  3/5,  5.1629
  4/5,  5.177678
  5/5,  5.190658
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  5.139688
  2/5,  5.022103
  3/5,  5.079346
  4/5,  5.077765
  5/5,  5.096124
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  4.077988
  2/5,  4.061516
  3/5,  4.109144
  4/5,  4.089994
  5/5,  4.073158
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  13.94183
  2/5,  13.968512
  3/5,  13.94239
  4/5,  13.899712
  5/5,  13.961435
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  8.193164
  2/5,  8.14792
  3/5,  8.276268
  4/5,  8.222743
  5/5,  8.172938
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  6.950498
  2/5,  6.955749
  3/5,  6.982672
  4/5,  6.971044
  5/5,  6.934848
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  6.847912
  2/5,  6.854372
  3/5,  6.850494
  4/5,  6.859337
  5/5,  6.844034
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.252347
  2/5,  3.263438
  3/5,  3.269853
  4/5,  3.263422
  5/5,  3.251474
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.272316
  2/5,  3.292033
  3/5,  3.252102
  4/5,  3.268569
  5/5,  3.269729
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  14.375365
  2/5,  14.514144
  3/5,  14.401884
  4/5,  14.187648
  5/5,  14.47641
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.33361
  2/5,  8.349814
  3/5,  8.565547
  4/5,  8.534402
  5/5,  8.277657
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.716023
  2/5,  8.680488
  3/5,  8.62026
  4/5,  8.47868
  5/5,  8.525647
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  5.380523
  2/5,  5.428245
  3/5,  5.297171
  4/5,  5.431494
  5/5,  5.340396
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  4.048486
  2/5,  3.832463
  3/5,  4.018902
  4/5,  3.861005
  5/5,  4.020929
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.893366
  2/5,  3.993738
  3/5,  3.82065
  4/5,  3.953277
  5/5,  3.884849
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  10.689508
  2/5,  10.637072
  3/5,  10.646809
  4/5,  10.62688
  5/5,  10.617118
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  12.122465
  2/5,  12.080371
  3/5,  12.086237
  4/5,  12.110005
  5/5,  12.048845
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  11.9402
  2/5,  11.954181
  3/5,  11.944899
  4/5,  11.961085
  5/5,  11.969497
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.615876
  2/5,  0.619028
  3/5,  0.611478
  4/5,  0.618835
  5/5,  0.611654
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.395534
  2/5,  0.395392
  3/5,  0.416397
  4/5,  0.405395
  5/5,  0.402166
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.397585
  2/5,  0.401034
  3/5,  0.405476
  4/5,  0.40782
  5/5,  0.407951
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.644333
  2/5,  0.640118
  3/5,  0.644192
  4/5,  0.641393
  5/5,  0.640085
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.423575
  2/5,  0.423946
  3/5,  0.431144
  4/5,  0.423092
  5/5,  0.422906
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.415457
  2/5,  0.417175
  3/5,  0.417336
  4/5,  0.415835
  5/5,  0.413984
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  4.025236
  2/5,  4.029446
  3/5,  4.059711
  4/5,  3.97058
  5/5,  3.989706
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  3.101067
  2/5,  3.232664
  3/5,  3.401347
  4/5,  3.138056
  5/5,  3.13925
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.787808
  2/5,  2.956275
  3/5,  2.784821
  4/5,  2.756188
  5/5,  2.767253
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  11.46904
  2/5,  11.460927
  3/5,  11.477288
  4/5,  11.398619
  5/5,  11.443846
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.801828
  2/5,  4.955859
  3/5,  4.928434
  4/5,  4.829966
  5/5,  5.031284
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.602826
  2/5,  4.614735
  3/5,  4.591202
  4/5,  4.667299
  5/5,  4.633234
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  5.94992
  2/5,  5.969301
  3/5,  5.977841
  4/5,  5.966663
  5/5,  5.94725
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.704954
  2/5,  2.85013
  3/5,  2.706363
  4/5,  2.74771
  5/5,  2.844977
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  3.029569
  2/5,  3.103524
  3/5,  3.048696
  4/5,  3.086303
  5/5,  3.13449
}
