Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/akira/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-u3iORF.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  14.332623
  2/5,  14.399459
  3/5,  14.544234
  4/5,  14.543946
  5/5,  14.61603
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.72726
  2/5,  11.747005
  3/5,  11.790623
  4/5,  11.710355
  5/5,  11.679262
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  11.811272
  2/5,  11.926187
  3/5,  11.958321
  4/5,  11.926338
  5/5,  11.886315
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  20.277224
  2/5,  20.499219
  3/5,  20.504229
  4/5,  20.530785
  5/5,  20.392628
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.700779
  2/5,  19.659269
  3/5,  19.665929
  4/5,  19.68805
  5/5,  19.683728
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  19.990716
  2/5,  20.05074
  3/5,  20.02252
  4/5,  20.038428
  5/5,  20.03914
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  5.114546
  2/5,  5.097356
  3/5,  5.183175
  4/5,  5.37609
  5/5,  5.123378
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  5.160686
  2/5,  5.213515
  3/5,  5.188359
  4/5,  5.199922
  5/5,  5.227429
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  4.050048
  2/5,  4.072485
  3/5,  4.064736
  4/5,  4.084958
  5/5,  4.068173
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  13.861818
  2/5,  13.96065
  3/5,  14.034606
  4/5,  14.085339
  5/5,  14.078464
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  8.340262
  2/5,  8.406387
  3/5,  8.478728
  4/5,  8.444443
  5/5,  8.499842
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  7.024395
  2/5,  7.042299
  3/5,  6.973419
  4/5,  6.986761
  5/5,  7.000541
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  6.808074
  2/5,  6.894338
  3/5,  6.91613
  4/5,  6.960338
  5/5,  7.009313
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.262999
  2/5,  3.28542
  3/5,  3.322089
  4/5,  3.31353
  5/5,  3.462636
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  3.255383
  2/5,  3.294423
  3/5,  3.327809
  4/5,  3.410603
  5/5,  3.381995
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  14.529299
  2/5,  14.58586
  3/5,  14.712483
  4/5,  14.703676
  5/5,  14.884022
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.389124
  2/5,  8.238553
  3/5,  8.150301
  4/5,  8.357327
  5/5,  8.779187
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.832105
  2/5,  8.502465
  3/5,  8.80546
  4/5,  8.508928
  5/5,  8.897162
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  5.395548
  2/5,  5.428147
  3/5,  5.512227
  4/5,  5.486055
  5/5,  5.50561
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.806494
  2/5,  4.007161
  3/5,  4.06091
  4/5,  4.08168
  5/5,  4.082725
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  3.952876
  2/5,  3.93632
  3/5,  3.898531
  4/5,  3.846555
  5/5,  3.877123
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  10.804436
  2/5,  10.717657
  3/5,  10.760936
  4/5,  10.775338
  5/5,  10.777476
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  12.091546
  2/5,  12.132069
  3/5,  12.216374
  4/5,  12.237167
  5/5,  12.355175
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  11.894513
  2/5,  11.927723
  3/5,  11.958639
  4/5,  12.023455
  5/5,  12.041939
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.614382
  2/5,  0.617341
  3/5,  0.623301
  4/5,  0.621258
  5/5,  0.63644
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.398188
  2/5,  0.397468
  3/5,  0.399526
  4/5,  0.399112
  5/5,  0.400106
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.411786
  2/5,  0.401735
  3/5,  0.423486
  4/5,  0.403677
  5/5,  0.404435
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.636177
  2/5,  0.644112
  3/5,  0.646305
  4/5,  0.651632
  5/5,  0.655868
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.423883
  2/5,  0.422851
  3/5,  0.421712
  4/5,  0.423219
  5/5,  0.424788
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.403708
  2/5,  0.406655
  3/5,  0.405364
  4/5,  0.413107
  5/5,  0.407429
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  3.940587
  2/5,  3.868655
  3/5,  3.863548
  4/5,  3.959187
  5/5,  3.985746
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  3.08068
  2/5,  3.185544
  3/5,  3.228517
  4/5,  3.279475
  5/5,  3.262274
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  3.045457
  2/5,  2.807307
  3/5,  2.820042
  4/5,  2.821134
  5/5,  2.843648
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  11.315027
  2/5,  11.576292
  3/5,  11.614744
  4/5,  11.699738
  5/5,  11.743358
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.612685
  2/5,  4.67532
  3/5,  4.995179
  4/5,  5.043725
  5/5,  5.033056
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.692379
  2/5,  4.74051
  3/5,  4.642237
  4/5,  4.530806
  5/5,  4.708079
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  5.905111
  2/5,  6.004211
  3/5,  6.041474
  4/5,  6.189474
  5/5,  6.175158
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.640064
  2/5,  2.646443
  3/5,  2.669131
  4/5,  2.675598
  5/5,  2.682379
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  3.071499
  2/5,  3.116484
  3/5,  3.157748
  4/5,  3.180769
  5/5,  3.219326
}
