Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers02/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-ThPObn.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.125455
  2/5,  6.035356
  3/5,  6.031185
  4/5,  6.042774
  5/5,  6.089756
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.609767
  2/5,  5.616256
  3/5,  5.635648
  4/5,  5.647385
  5/5,  5.617637
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.675171
  2/5,  5.649857
  3/5,  5.65993
  4/5,  5.65251
  5/5,  5.676083
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.685304
  2/5,  16.647281
  3/5,  16.622443
  4/5,  16.638686
  5/5,  16.623357
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.539142
  2/5,  16.520417
  3/5,  16.560014
  4/5,  16.515291
  5/5,  16.532768
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.616457
  2/5,  16.616982
  3/5,  16.684041
  4/5,  16.629009
  5/5,  16.592557
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.621085
  2/5,  2.637154
  3/5,  2.605397
  4/5,  2.608969
  5/5,  2.608053
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.33795
  2/5,  3.367891
  3/5,  3.34866
  4/5,  3.339848
  5/5,  3.335109
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.100916
  2/5,  3.114917
  3/5,  3.123008
  4/5,  3.110566
  5/5,  3.099262
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.877184
  2/5,  6.901804
  3/5,  6.910078
  4/5,  6.900345
  5/5,  6.921003
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.080172
  2/5,  5.075805
  3/5,  5.092524
  4/5,  5.091011
  5/5,  5.078867
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.768856
  2/5,  4.795285
  3/5,  4.792575
  4/5,  4.77299
  5/5,  4.786579
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.775227
  2/5,  3.786454
  3/5,  3.752609
  4/5,  3.755377
  5/5,  3.767281
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.750412
  2/5,  1.765204
  3/5,  1.760292
  4/5,  1.759995
  5/5,  1.750141
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.748772
  2/5,  1.73709
  3/5,  1.739808
  4/5,  1.744104
  5/5,  1.740293
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.42575
  2/5,  5.409651
  3/5,  5.396555
  4/5,  5.41404
  5/5,  5.428556
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.586487
  2/5,  4.577285
  3/5,  4.588396
  4/5,  4.590465
  5/5,  4.578734
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.562781
  2/5,  4.586086
  3/5,  4.669513
  4/5,  4.567363
  5/5,  4.559742
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.027921
  2/5,  2.026955
  3/5,  2.036401
  4/5,  2.034138
  5/5,  2.060935
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.207807
  2/5,  2.188945
  3/5,  2.19231
  4/5,  2.193709
  5/5,  2.192907
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.167523
  2/5,  2.179494
  3/5,  2.160607
  4/5,  2.163041
  5/5,  2.157836
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.832493
  2/5,  4.846082
  3/5,  4.841198
  4/5,  4.83598
  5/5,  4.843432
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.326782
  2/5,  5.364244
  3/5,  5.313978
  4/5,  5.30863
  5/5,  5.33335
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.296043
  2/5,  5.290541
  3/5,  5.297429
  4/5,  5.386082
  5/5,  5.296113
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.252538
  2/5,  0.254873
  3/5,  0.256083
  4/5,  0.255703
  5/5,  0.255378
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283635
  2/5,  0.282933
  3/5,  0.283015
  4/5,  0.282996
  5/5,  0.283139
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283846
  2/5,  0.284532
  3/5,  0.284641
  4/5,  0.282874
  5/5,  0.284852
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.26256
  2/5,  0.263795
  3/5,  0.2631
  4/5,  0.263237
  5/5,  0.272877
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287682
  2/5,  0.29082
  3/5,  0.288262
  4/5,  0.286475
  5/5,  0.289933
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.285903
  2/5,  0.288882
  3/5,  0.287178
  4/5,  0.286309
  5/5,  0.286876
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.763969
  2/5,  1.907668
  3/5,  1.904683
  4/5,  1.910478
  5/5,  1.901817
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.300204
  2/5,  2.343708
  3/5,  2.293169
  4/5,  2.304991
  5/5,  2.285247
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.210843
  2/5,  2.211911
  3/5,  2.203967
  4/5,  2.223286
  5/5,  2.21528
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.492616
  2/5,  4.480935
  3/5,  4.485694
  4/5,  4.496651
  5/5,  4.475818
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.204065
  2/5,  3.203458
  3/5,  3.201092
  4/5,  3.238588
  5/5,  3.217637
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.160895
  2/5,  3.160207
  3/5,  3.160477
  4/5,  3.165752
  5/5,  3.171335
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.243509
  2/5,  2.243444
  3/5,  2.23865
  4/5,  2.233184
  5/5,  2.235091
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.522199
  2/5,  1.523471
  3/5,  1.520963
  4/5,  1.535426
  5/5,  1.530986
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.601748
  2/5,  1.593164
  3/5,  1.591156
  4/5,  1.59274
  5/5,  1.592332
}
