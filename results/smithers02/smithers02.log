Running benchmark suite 'mcache'; results are written to: /home/safl/buildbot/benchpress/results/smithers02/9458afc548a682bda289f5ea704cdc4ef34e1527/benchmark-MY0OXo.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.098769
  2/5,  6.099639
  3/5,  6.133389
  4/5,  6.09202
  5/5,  6.109051
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.66955
  2/5,  5.647643
  3/5,  5.627958
  4/5,  5.64998
  5/5,  5.654345
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.676119
  2/5,  5.672734
  3/5,  5.700228
  4/5,  5.672396
  5/5,  5.673975
}
{ Black Scholes - score_mcache_1 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  6.563539
  2/5,  6.60789
  3/5,  6.556153
  4/5,  6.593321
  5/5,  6.56277
}
{ Black Scholes - score_mcache_2 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  6.19691
  2/5,  6.217416
  3/5,  6.284782
  4/5,  6.197385
  5/5,  6.203521
}
{ Black Scholes - score_mcache_3 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  6.039844
  2/5,  5.978662
  3/5,  5.980928
  4/5,  6.039564
  5/5,  5.985293
}
{ Black Scholes - score_mcache_4 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.847035
  2/5,  5.855009
  3/5,  5.846007
  4/5,  5.834969
  5/5,  5.863181
}
{ Black Scholes - score_mcache_5 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.811266
  2/5,  5.795581
  3/5,  5.813183
  4/5,  5.822586
  5/5,  5.809321
}
{ Black Scholes - score_mcache_6 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.772861
  2/5,  5.793241
  3/5,  5.810466
  4/5,  5.774358
  5/5,  5.78714
}
{ Black Scholes - score_mcache_7 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.764232
  2/5,  5.765653
  3/5,  5.73549
  4/5,  5.764784
  5/5,  5.746051
}
{ Black Scholes - score_mcache_8 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.709459
  2/5,  5.736446
  3/5,  5.713506
  4/5,  5.71262
  5/5,  5.717419
}
{ Black Scholes - score_mcache_9 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.723591
  2/5,  5.698263
  3/5,  5.695751
  4/5,  5.726743
  5/5,  5.703221
}
{ Black Scholes - score_mcache_10 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.672846
  2/5,  5.694606
  3/5,  5.682124
  4/5,  5.677543
  5/5,  5.675615
}
{ Black Scholes - simple_mcache_1 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  6.024735
  2/5,  6.022899
  3/5,  6.013373
  4/5,  6.044102
  5/5,  6.026325
}
{ Black Scholes - simple_mcache_2 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.78072
  2/5,  5.897418
  3/5,  5.840098
  4/5,  5.781948
  5/5,  5.786134
}
{ Black Scholes - simple_mcache_3 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.797093
  2/5,  5.779669
  3/5,  5.754773
  4/5,  5.795643
  5/5,  5.760676
}
{ Black Scholes - simple_mcache_4 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.745859
  2/5,  5.753878
  3/5,  5.756991
  4/5,  5.737949
  5/5,  5.739143
}
{ Black Scholes - simple_mcache_5 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.743075
  2/5,  5.716986
  3/5,  5.707915
  4/5,  5.740505
  5/5,  5.717316
}
{ Black Scholes - simple_mcache_6 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.677388
  2/5,  5.689916
  3/5,  5.730731
  4/5,  5.682897
  5/5,  5.681045
}
{ Black Scholes - simple_mcache_7 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.695441
  2/5,  5.67334
  3/5,  5.66968
  4/5,  5.668681
  5/5,  5.674212
}
{ Black Scholes - simple_mcache_8 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.655316
  2/5,  5.67943
  3/5,  5.682855
  4/5,  5.66283
  5/5,  5.657382
}
{ Black Scholes - simple_mcache_9 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.642527
  2/5,  5.646632
  3/5,  5.618142
  4/5,  5.63724
  5/5,  5.64819
}
{ Black Scholes - simple_mcache_10 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.63745
  2/5,  5.631631
  3/5,  5.66097
  4/5,  5.635978
  5/5,  5.643265
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.672369
  2/5,  16.727936
  3/5,  16.695081
  4/5,  16.661303
  5/5,  16.662504
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.547379
  2/5,  16.560725
  3/5,  16.552705
  4/5,  16.549887
  5/5,  16.549777
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.634588
  2/5,  16.647708
  3/5,  16.657211
  4/5,  16.653672
  5/5,  16.661643
}
{ Cache Synth - score_mcache_1 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.754995
  2/5,  16.747581
  3/5,  16.742164
  4/5,  16.775562
  5/5,  16.829078
}
{ Cache Synth - score_mcache_2 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.769652
  2/5,  16.752014
  3/5,  16.72798
  4/5,  16.723705
  5/5,  16.711582
}
{ Cache Synth - score_mcache_3 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.705057
  2/5,  16.693222
  3/5,  16.690215
  4/5,  16.702144
  5/5,  16.696206
}
{ Cache Synth - score_mcache_4 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.65559
  2/5,  16.653005
  3/5,  16.66528
  4/5,  16.665427
  5/5,  16.673515
}
{ Cache Synth - score_mcache_5 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.710129
  2/5,  16.652637
  3/5,  16.715808
  4/5,  16.698892
  5/5,  16.664425
}
{ Cache Synth - score_mcache_6 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.651004
  2/5,  16.657235
  3/5,  16.641822
  4/5,  16.643905
  5/5,  16.655119
}
{ Cache Synth - score_mcache_7 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.65063
  2/5,  16.660034
  3/5,  16.657068
  4/5,  16.662109
  5/5,  16.63508
}
{ Cache Synth - score_mcache_8 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.640646
  2/5,  16.657056
  3/5,  16.659261
  4/5,  16.673987
  5/5,  16.734169
}
{ Cache Synth - score_mcache_9 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.646866
  2/5,  16.664275
  3/5,  16.685519
  4/5,  16.657146
  5/5,  16.653711
}
{ Cache Synth - score_mcache_10 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.66089
  2/5,  16.65742
  3/5,  16.649437
  4/5,  16.63546
  5/5,  16.712494
}
{ Cache Synth - simple_mcache_1 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.56236
  2/5,  16.561972
  3/5,  16.557581
  4/5,  16.548973
  5/5,  16.538501
}
{ Cache Synth - simple_mcache_2 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.549164
  2/5,  16.56952
  3/5,  16.623359
  4/5,  16.584665
  5/5,  16.570379
}
{ Cache Synth - simple_mcache_3 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.549621
  2/5,  16.546418
  3/5,  16.582186
  4/5,  16.563656
  5/5,  16.556282
}
{ Cache Synth - simple_mcache_4 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.552879
  2/5,  16.592627
  3/5,  16.544095
  4/5,  16.558182
  5/5,  16.558652
}
{ Cache Synth - simple_mcache_5 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.903808
  2/5,  16.558591
  3/5,  16.553887
  4/5,  16.537809
  5/5,  16.563929
}
{ Cache Synth - simple_mcache_6 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.623823
  2/5,  16.592001
  3/5,  16.560717
  4/5,  16.564761
  5/5,  16.539481
}
{ Cache Synth - simple_mcache_7 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.546993
  2/5,  16.581556
  3/5,  16.579775
  4/5,  16.56609
  5/5,  16.564958
}
{ Cache Synth - simple_mcache_8 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.546088
  2/5,  16.54177
  3/5,  16.723078
  4/5,  16.765234
  5/5,  16.559534
}
{ Cache Synth - simple_mcache_9 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.571066
  2/5,  16.557749
  3/5,  16.543527
  4/5,  16.613492
  5/5,  16.587539
}
{ Cache Synth - simple_mcache_10 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.558647
  2/5,  16.564307
  3/5,  16.549496
  4/5,  16.552975
  5/5,  16.54675
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.636634
  2/5,  2.644409
  3/5,  2.62559
  4/5,  2.626659
  5/5,  2.634625
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.359113
  2/5,  3.365726
  3/5,  3.372884
  4/5,  3.363747
  5/5,  3.356926
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.111883
  2/5,  3.119464
  3/5,  3.128434
  4/5,  3.131445
  5/5,  3.115943
}
{ Jacobi Iterative - score_mcache_1 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.11468
  2/5,  3.113477
  3/5,  3.111745
  4/5,  3.126168
  5/5,  3.128365
}
{ Jacobi Iterative - score_mcache_2 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.109554
  2/5,  3.113921
  3/5,  3.121876
  4/5,  3.11883
  5/5,  3.137382
}
{ Jacobi Iterative - score_mcache_3 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.126567
  2/5,  3.108334
  3/5,  3.11172
  4/5,  3.118184
  5/5,  3.115416
}
{ Jacobi Iterative - score_mcache_4 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.13622
  2/5,  3.117443
  3/5,  3.109522
  4/5,  3.106359
  5/5,  3.111981
}
{ Jacobi Iterative - score_mcache_5 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.124972
  2/5,  3.128578
  3/5,  3.121065
  4/5,  3.100203
  5/5,  3.118958
}
{ Jacobi Iterative - score_mcache_6 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.109996
  2/5,  3.126146
  3/5,  3.132722
  4/5,  3.121397
  5/5,  3.112015
}
{ Jacobi Iterative - score_mcache_7 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.112308
  2/5,  3.116612
  3/5,  3.126445
  4/5,  3.148779
  5/5,  3.118848
}
{ Jacobi Iterative - score_mcache_8 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.115147
  2/5,  3.113679
  3/5,  3.121019
  4/5,  3.140547
  5/5,  3.207474
}
{ Jacobi Iterative - score_mcache_9 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.115333
  2/5,  3.118846
  3/5,  3.117645
  4/5,  3.108606
  5/5,  3.129656
}
{ Jacobi Iterative - score_mcache_10 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.170489
  2/5,  3.11931
  3/5,  3.118878
  4/5,  3.118292
  5/5,  3.116972
}
{ Jacobi Iterative - simple_mcache_1 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.383467
  2/5,  3.376849
  3/5,  3.359806
  4/5,  3.357868
  5/5,  3.360411
}
{ Jacobi Iterative - simple_mcache_2 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.368823
  2/5,  3.381198
  3/5,  3.353826
  4/5,  3.360185
  5/5,  3.358005
}
{ Jacobi Iterative - simple_mcache_3 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.360801
  2/5,  3.374677
  3/5,  3.365889
  4/5,  3.357116
  5/5,  3.356428
}
{ Jacobi Iterative - simple_mcache_4 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.360021
  2/5,  3.371792
  3/5,  3.375657
  4/5,  3.355533
  5/5,  3.359755
}
{ Jacobi Iterative - simple_mcache_5 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.355852
  2/5,  3.363547
  3/5,  3.371593
  4/5,  3.365691
  5/5,  3.357132
}
{ Jacobi Iterative - simple_mcache_6 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.357293
  2/5,  3.37029
  3/5,  3.376371
  4/5,  3.368473
  5/5,  3.360801
}
{ Jacobi Iterative - simple_mcache_7 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.360245
  2/5,  3.359836
  3/5,  3.360212
  4/5,  3.370067
  5/5,  3.3635
}
{ Jacobi Iterative - simple_mcache_8 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.35975
  2/5,  3.358166
  3/5,  3.357909
  4/5,  3.399475
  5/5,  3.366941
}
{ Jacobi Iterative - simple_mcache_9 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.357242
  2/5,  3.357348
  3/5,  3.361059
  4/5,  3.371485
  5/5,  3.373924
}
{ Jacobi Iterative - simple_mcache_10 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.359987
  2/5,  3.362261
  3/5,  3.360366
  4/5,  3.359145
  5/5,  3.379794
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.947855
  2/5,  6.942431
  3/5,  6.967469
  4/5,  6.948091
  5/5,  6.949001
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.148937
  2/5,  5.123726
  3/5,  5.121186
  4/5,  5.132346
  5/5,  5.153831
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.795155
  2/5,  4.783651
  3/5,  4.797531
  4/5,  4.866133
  5/5,  4.785726
}
{ Jacobi Iterative - Reduce - score_mcache_1 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.495299
  2/5,  5.506544
  3/5,  5.521851
  4/5,  5.490624
  5/5,  5.502857
}
{ Jacobi Iterative - Reduce - score_mcache_2 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.076294
  2/5,  5.077733
  3/5,  5.082669
  4/5,  5.101606
  5/5,  5.06927
}
{ Jacobi Iterative - Reduce - score_mcache_3 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.804995
  2/5,  4.809811
  3/5,  4.825426
  4/5,  4.79006
  5/5,  4.803761
}
{ Jacobi Iterative - Reduce - score_mcache_4 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.801531
  2/5,  4.831539
  3/5,  4.780969
  4/5,  4.799972
  5/5,  4.815331
}
{ Jacobi Iterative - Reduce - score_mcache_5 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.807131
  2/5,  4.801557
  3/5,  4.787906
  4/5,  4.798518
  5/5,  4.817291
}
{ Jacobi Iterative - Reduce - score_mcache_6 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.795092
  2/5,  4.79023
  3/5,  4.817447
  4/5,  4.811949
  5/5,  4.799922
}
{ Jacobi Iterative - Reduce - score_mcache_7 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.795819
  2/5,  4.809047
  3/5,  4.815333
  4/5,  4.803979
  5/5,  4.83075
}
{ Jacobi Iterative - Reduce - score_mcache_8 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.802794
  2/5,  4.806284
  3/5,  4.803453
  4/5,  4.817319
  5/5,  4.817562
}
{ Jacobi Iterative - Reduce - score_mcache_9 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.803418
  2/5,  4.800846
  3/5,  4.808512
  4/5,  4.828995
  5/5,  4.81686
}
{ Jacobi Iterative - Reduce - score_mcache_10 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.794429
  2/5,  4.794878
  3/5,  4.806428
  4/5,  4.795026
  5/5,  4.794531
}
{ Jacobi Iterative - Reduce - simple_mcache_1 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.710011
  2/5,  5.715354
  3/5,  5.697403
  4/5,  5.693209
  5/5,  5.827844
}
{ Jacobi Iterative - Reduce - simple_mcache_2 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.413829
  2/5,  5.362506
  3/5,  5.371317
  4/5,  5.374438
  5/5,  5.360218
}
{ Jacobi Iterative - Reduce - simple_mcache_3 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.123511
  2/5,  5.151815
  3/5,  5.1249
  4/5,  5.124559
  5/5,  5.139481
}
{ Jacobi Iterative - Reduce - simple_mcache_4 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.150018
  2/5,  5.120797
  3/5,  5.117937
  4/5,  5.145075
  5/5,  5.126673
}
{ Jacobi Iterative - Reduce - simple_mcache_5 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.125934
  2/5,  5.118727
  3/5,  5.153235
  4/5,  5.125238
  5/5,  5.120686
}
{ Jacobi Iterative - Reduce - simple_mcache_6 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.133859
  2/5,  5.139453
  3/5,  5.122813
  4/5,  5.125108
  5/5,  5.138731
}
{ Jacobi Iterative - Reduce - simple_mcache_7 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.127633
  2/5,  5.121498
  3/5,  5.122574
  4/5,  5.136824
  5/5,  5.123109
}
{ Jacobi Iterative - Reduce - simple_mcache_8 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.118594
  2/5,  5.133469
  3/5,  5.127318
  4/5,  5.119225
  5/5,  5.120367
}
{ Jacobi Iterative - Reduce - simple_mcache_9 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.144915
  2/5,  5.125559
  3/5,  5.122006
  4/5,  5.137285
  5/5,  5.146958
}
{ Jacobi Iterative - Reduce - simple_mcache_10 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.124271
  2/5,  5.120924
  3/5,  5.133452
  4/5,  5.129113
  5/5,  5.118865
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.813986
  2/5,  3.827217
  3/5,  3.83633
  4/5,  3.828762
  5/5,  3.81227
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.788551
  2/5,  1.779377
  3/5,  1.783403
  4/5,  1.793163
  5/5,  1.86101
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.78014
  2/5,  1.79335
  3/5,  1.774758
  4/5,  1.767748
  5/5,  1.772984
}
{ kNN - score_mcache_1 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.881638
  2/5,  1.881293
  3/5,  1.885539
  4/5,  1.885502
  5/5,  1.887819
}
{ kNN - score_mcache_2 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.893473
  2/5,  1.881287
  3/5,  1.882207
  4/5,  1.885834
  5/5,  1.881261
}
{ kNN - score_mcache_3 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.826926
  2/5,  1.8226
  3/5,  1.831197
  4/5,  1.827796
  5/5,  1.829921
}
{ kNN - score_mcache_4 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.774487
  2/5,  1.771391
  3/5,  1.76939
  4/5,  1.785296
  5/5,  1.766471
}
{ kNN - score_mcache_5 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.771337
  2/5,  1.769457
  3/5,  1.786443
  4/5,  1.776874
  5/5,  1.796494
}
{ kNN - score_mcache_6 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.773612
  2/5,  1.772758
  3/5,  1.772452
  4/5,  1.773248
  5/5,  1.768492
}
{ kNN - score_mcache_7 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.775824
  2/5,  1.770163
  3/5,  1.781977
  4/5,  1.777653
  5/5,  1.784281
}
{ kNN - score_mcache_8 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.774344
  2/5,  1.770703
  3/5,  1.77214
  4/5,  1.771761
  5/5,  1.772173
}
{ kNN - score_mcache_9 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.76911
  2/5,  1.772552
  3/5,  1.781807
  4/5,  1.781069
  5/5,  1.77639
}
{ kNN - score_mcache_10 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.772501
  2/5,  1.766563
  3/5,  1.769789
  4/5,  1.770384
  5/5,  1.77154
}
{ kNN - simple_mcache_1 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.881288
  2/5,  1.893206
  3/5,  1.885288
  4/5,  1.888952
  5/5,  1.883624
}
{ kNN - simple_mcache_2 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.898779
  2/5,  1.8861
  3/5,  1.891907
  4/5,  1.878051
  5/5,  1.88476
}
{ kNN - simple_mcache_3 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.843798
  2/5,  1.845762
  3/5,  1.84148
  4/5,  1.84589
  5/5,  1.845462
}
{ kNN - simple_mcache_4 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.787311
  2/5,  1.782475
  3/5,  1.790028
  4/5,  1.779131
  5/5,  1.782831
}
{ kNN - simple_mcache_5 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.782088
  2/5,  1.800626
  3/5,  1.792687
  4/5,  1.786374
  5/5,  1.784527
}
{ kNN - simple_mcache_6 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.782526
  2/5,  1.786454
  3/5,  1.794079
  4/5,  1.785007
  5/5,  1.785695
}
{ kNN - simple_mcache_7 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.791149
  2/5,  1.791949
  3/5,  1.794305
  4/5,  1.785287
  5/5,  1.788606
}
{ kNN - simple_mcache_8 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.785671
  2/5,  1.784386
  3/5,  1.785912
  4/5,  1.789339
  5/5,  1.784283
}
{ kNN - simple_mcache_9 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.794019
  2/5,  1.791882
  3/5,  1.786521
  4/5,  1.801805
  5/5,  1.787095
}
{ kNN - simple_mcache_10 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.785932
  2/5,  1.790839
  3/5,  1.78149
  4/5,  1.788228
  5/5,  1.780403
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.554038
  2/5,  5.535653
  3/5,  5.521839
  4/5,  5.546152
  5/5,  5.539264
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.615824
  2/5,  4.611511
  3/5,  4.65027
  4/5,  4.623569
  5/5,  4.622616
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.607537
  2/5,  4.727512
  3/5,  4.605203
  4/5,  4.607303
  5/5,  4.609276
}
{ Lattice Boltzmann 2D - score_mcache_1 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  6.362474
  2/5,  6.276402
  3/5,  6.290341
  4/5,  6.307513
  5/5,  6.307804
}
{ Lattice Boltzmann 2D - score_mcache_2 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.827262
  2/5,  5.841311
  3/5,  5.810045
  4/5,  5.806543
  5/5,  5.837321
}
{ Lattice Boltzmann 2D - score_mcache_3 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.24985
  2/5,  5.267629
  3/5,  5.276892
  4/5,  5.275635
  5/5,  5.266984
}
{ Lattice Boltzmann 2D - score_mcache_4 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.090505
  2/5,  5.117293
  3/5,  5.097742
  4/5,  5.080211
  5/5,  5.088819
}
{ Lattice Boltzmann 2D - score_mcache_5 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.059692
  2/5,  5.047842
  3/5,  5.03694
  4/5,  5.053915
  5/5,  5.047042
}
{ Lattice Boltzmann 2D - score_mcache_6 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.023114
  2/5,  5.042544
  3/5,  5.054152
  4/5,  5.046789
  5/5,  5.042247
}
{ Lattice Boltzmann 2D - score_mcache_7 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.904808
  2/5,  4.897508
  3/5,  4.883973
  4/5,  4.891014
  5/5,  4.904349
}
{ Lattice Boltzmann 2D - score_mcache_8 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.857189
  2/5,  4.852828
  3/5,  4.844848
  4/5,  4.864485
  5/5,  4.854672
}
{ Lattice Boltzmann 2D - score_mcache_9 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.748183
  2/5,  4.75014
  3/5,  4.761209
  4/5,  4.752057
  5/5,  4.743076
}
{ Lattice Boltzmann 2D - score_mcache_10 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.613274
  2/5,  4.637359
  3/5,  4.605355
  4/5,  4.606402
  5/5,  4.61959
}
{ Lattice Boltzmann 2D - simple_mcache_1 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.631778
  2/5,  5.518345
  3/5,  5.52977
  4/5,  5.555512
  5/5,  5.563311
}
{ Lattice Boltzmann 2D - simple_mcache_2 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.043219
  2/5,  5.042826
  3/5,  5.056013
  4/5,  5.052151
  5/5,  5.044012
}
{ Lattice Boltzmann 2D - simple_mcache_3 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.923494
  2/5,  4.916339
  3/5,  4.91259
  4/5,  4.911172
  5/5,  4.927575
}
{ Lattice Boltzmann 2D - simple_mcache_4 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.78129
  2/5,  4.780507
  3/5,  4.796859
  4/5,  4.805926
  5/5,  4.782137
}
{ Lattice Boltzmann 2D - simple_mcache_5 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.743976
  2/5,  4.755548
  3/5,  4.753256
  4/5,  4.741872
  5/5,  4.741543
}
{ Lattice Boltzmann 2D - simple_mcache_6 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.740682
  2/5,  4.740242
  3/5,  4.729865
  4/5,  4.734625
  5/5,  4.744202
}
{ Lattice Boltzmann 2D - simple_mcache_7 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.717299
  2/5,  4.705355
  3/5,  4.709869
  4/5,  4.724598
  5/5,  4.713748
}
{ Lattice Boltzmann 2D - simple_mcache_8 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.685363
  2/5,  4.682823
  3/5,  4.708895
  4/5,  4.689454
  5/5,  4.682745
}
{ Lattice Boltzmann 2D - simple_mcache_9 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.686377
  2/5,  4.70801
  3/5,  4.684087
  4/5,  4.686705
  5/5,  4.696841
}
{ Lattice Boltzmann 2D - simple_mcache_10 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.632096
  2/5,  4.619364
  3/5,  4.62179
  4/5,  4.627902
  5/5,  4.644063
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.066443
  2/5,  2.066649
  3/5,  2.06516
  4/5,  2.062034
  5/5,  2.066206
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.221431
  2/5,  2.219213
  3/5,  2.221166
  4/5,  2.21254
  5/5,  2.208983
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.182871
  2/5,  2.182475
  3/5,  2.18113
  4/5,  2.19348
  5/5,  2.200535
}
{ Lattice Boltzmann 3D - score_mcache_1 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.775828
  2/5,  2.6935
  3/5,  2.692644
  4/5,  2.689412
  5/5,  2.688767
}
{ Lattice Boltzmann 3D - score_mcache_2 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.51217
  2/5,  2.532067
  3/5,  2.537826
  4/5,  2.52821
  5/5,  2.507091
}
{ Lattice Boltzmann 3D - score_mcache_3 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.395691
  2/5,  2.386675
  3/5,  2.396985
  4/5,  2.40115
  5/5,  2.395294
}
{ Lattice Boltzmann 3D - score_mcache_4 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.289797
  2/5,  2.28985
  3/5,  2.286611
  4/5,  2.291348
  5/5,  2.289303
}
{ Lattice Boltzmann 3D - score_mcache_5 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.229022
  2/5,  2.224528
  3/5,  2.21913
  4/5,  2.219539
  5/5,  2.222891
}
{ Lattice Boltzmann 3D - score_mcache_6 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.211388
  2/5,  2.214209
  3/5,  2.225485
  4/5,  2.225122
  5/5,  2.221364
}
{ Lattice Boltzmann 3D - score_mcache_7 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.197826
  2/5,  2.192178
  3/5,  2.196599
  4/5,  2.197226
  5/5,  2.197533
}
{ Lattice Boltzmann 3D - score_mcache_8 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.204608
  2/5,  2.204539
  3/5,  2.195753
  4/5,  2.19222
  5/5,  2.188678
}
{ Lattice Boltzmann 3D - score_mcache_9 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.183623
  2/5,  2.185326
  3/5,  2.183273
  4/5,  2.199798
  5/5,  2.195613
}
{ Lattice Boltzmann 3D - score_mcache_10 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.182098
  2/5,  2.183348
  3/5,  2.182733
  4/5,  2.181592
  5/5,  2.183963
}
{ Lattice Boltzmann 3D - simple_mcache_1 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.383701
  2/5,  2.399834
  3/5,  2.388025
  4/5,  2.383601
  5/5,  2.381914
}
{ Lattice Boltzmann 3D - simple_mcache_2 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.307549
  2/5,  2.307207
  3/5,  2.304894
  4/5,  2.31786
  5/5,  2.318749
}
{ Lattice Boltzmann 3D - simple_mcache_3 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.289732
  2/5,  2.290435
  3/5,  2.287909
  4/5,  2.285881
  5/5,  2.290864
}
{ Lattice Boltzmann 3D - simple_mcache_4 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.251717
  2/5,  2.267786
  3/5,  2.265024
  4/5,  2.253558
  5/5,  2.251997
}
{ Lattice Boltzmann 3D - simple_mcache_5 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.229968
  2/5,  2.228015
  3/5,  2.227557
  4/5,  2.243389
  5/5,  2.23521
}
{ Lattice Boltzmann 3D - simple_mcache_6 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.217167
  2/5,  2.215741
  3/5,  2.211394
  4/5,  2.214587
  5/5,  2.214822
}
{ Lattice Boltzmann 3D - simple_mcache_7 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.210717
  2/5,  2.222793
  3/5,  2.222729
  4/5,  2.214428
  5/5,  2.215222
}
{ Lattice Boltzmann 3D - simple_mcache_8 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.212148
  2/5,  2.206123
  3/5,  2.209521
  4/5,  2.20763
  5/5,  2.220322
}
{ Lattice Boltzmann 3D - simple_mcache_9 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.22031
  2/5,  2.209124
  3/5,  2.209224
  4/5,  2.215258
  5/5,  2.208597
}
{ Lattice Boltzmann 3D - simple_mcache_10 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.216689
  2/5,  2.213291
  3/5,  2.220053
  4/5,  2.21336
  5/5,  2.21187
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.888341
  2/5,  4.865648
  3/5,  4.880845
  4/5,  4.882164
  5/5,  4.88844
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.350333
  2/5,  5.429262
  3/5,  5.377167
  4/5,  5.350163
  5/5,  5.340611
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.391432
  2/5,  5.332364
  3/5,  5.323086
  4/5,  5.342207
  5/5,  5.353901
}
{ Monte Carlo PI - RIL - score_mcache_1 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.393738
  2/5,  5.393514
  3/5,  5.413903
  4/5,  5.401482
  5/5,  5.392057
}
{ Monte Carlo PI - RIL - score_mcache_2 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.409128
  2/5,  5.418932
  3/5,  5.398348
  4/5,  5.39922
  5/5,  5.414725
}
{ Monte Carlo PI - RIL - score_mcache_3 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.370859
  2/5,  5.359954
  3/5,  5.351812
  4/5,  5.379675
  5/5,  5.352592
}
{ Monte Carlo PI - RIL - score_mcache_4 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.350337
  2/5,  5.358363
  3/5,  5.36747
  4/5,  5.34616
  5/5,  5.394321
}
{ Monte Carlo PI - RIL - score_mcache_5 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.363144
  2/5,  5.350357
  3/5,  5.391659
  4/5,  5.341076
  5/5,  5.361202
}
{ Monte Carlo PI - RIL - score_mcache_6 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.348087
  2/5,  5.391473
  3/5,  5.358413
  4/5,  5.352637
  5/5,  5.347407
}
{ Monte Carlo PI - RIL - score_mcache_7 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.342391
  2/5,  5.361652
  3/5,  5.350664
  4/5,  5.341068
  5/5,  5.345845
}
{ Monte Carlo PI - RIL - score_mcache_8 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.361934
  2/5,  5.341184
  3/5,  5.349235
  4/5,  5.374327
  5/5,  5.346938
}
{ Monte Carlo PI - RIL - score_mcache_9 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.338762
  2/5,  5.334816
  3/5,  5.36764
  4/5,  5.33648
  5/5,  5.333203
}
{ Monte Carlo PI - RIL - score_mcache_10 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.345455
  2/5,  5.412039
  3/5,  5.329866
  4/5,  5.331397
  5/5,  5.337618
}
{ Monte Carlo PI - RIL - simple_mcache_1 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.667238
  2/5,  5.617236
  3/5,  5.618827
  4/5,  5.644981
  5/5,  5.613363
}
{ Monte Carlo PI - RIL - simple_mcache_2 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.399891
  2/5,  5.41585
  3/5,  5.401514
  4/5,  5.395346
  5/5,  5.400519
}
{ Monte Carlo PI - RIL - simple_mcache_3 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.401074
  2/5,  5.366233
  3/5,  5.365744
  4/5,  5.381601
  5/5,  5.390417
}
{ Monte Carlo PI - RIL - simple_mcache_4 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.389428
  2/5,  5.359538
  3/5,  5.382386
  4/5,  5.374158
  5/5,  5.361159
}
{ Monte Carlo PI - RIL - simple_mcache_5 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.366312
  2/5,  5.381057
  3/5,  5.360609
  4/5,  5.361533
  5/5,  5.372145
}
{ Monte Carlo PI - RIL - simple_mcache_6 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.373247
  2/5,  5.364447
  3/5,  5.35814
  4/5,  5.388842
  5/5,  5.368758
}
{ Monte Carlo PI - RIL - simple_mcache_7 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.364524
  2/5,  5.362737
  3/5,  5.377947
  4/5,  5.354068
  5/5,  5.361154
}
{ Monte Carlo PI - RIL - simple_mcache_8 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.418063
  2/5,  5.369025
  3/5,  5.358542
  4/5,  5.354338
  5/5,  5.390851
}
{ Monte Carlo PI - RIL - simple_mcache_9 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.355165
  2/5,  5.357076
  3/5,  5.365719
  4/5,  5.365593
  5/5,  5.358582
}
{ Monte Carlo PI - RIL - simple_mcache_10 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.350927
  2/5,  5.364946
  3/5,  5.358068
  4/5,  5.345586
  5/5,  5.359082
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.260678
  2/5,  0.267869
  3/5,  0.260376
  4/5,  0.258612
  5/5,  0.259861
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283984
  2/5,  0.284616
  3/5,  0.281642
  4/5,  0.293719
  5/5,  0.304155
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.288748
  2/5,  0.282846
  3/5,  0.283686
  4/5,  0.282015
  5/5,  0.28381
}
{ Monte Carlo PI - 2xN - score_mcache_1 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.376281
  2/5,  0.375184
  3/5,  0.376226
  4/5,  0.377934
  5/5,  0.375712
}
{ Monte Carlo PI - 2xN - score_mcache_2 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.372764
  2/5,  0.373155
  3/5,  0.37302
  4/5,  0.371421
  5/5,  0.372389
}
{ Monte Carlo PI - 2xN - score_mcache_3 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.356067
  2/5,  0.354199
  3/5,  0.351414
  4/5,  0.353299
  5/5,  0.35112
}
{ Monte Carlo PI - 2xN - score_mcache_4 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.329428
  2/5,  0.329139
  3/5,  0.32797
  4/5,  0.32923
  5/5,  0.329088
}
{ Monte Carlo PI - 2xN - score_mcache_5 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.304736
  2/5,  0.303916
  3/5,  0.303862
  4/5,  0.304843
  5/5,  0.303049
}
{ Monte Carlo PI - 2xN - score_mcache_6 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284683
  2/5,  0.284388
  3/5,  0.283344
  4/5,  0.284956
  5/5,  0.283944
}
{ Monte Carlo PI - 2xN - score_mcache_7 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.286861
  2/5,  0.283191
  3/5,  0.28922
  4/5,  0.283661
  5/5,  0.287749
}
{ Monte Carlo PI - 2xN - score_mcache_8 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.28462
  2/5,  0.283087
  3/5,  0.297335
  4/5,  0.282621
  5/5,  0.281981
}
{ Monte Carlo PI - 2xN - score_mcache_9 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284897
  2/5,  0.29021
  3/5,  0.282545
  4/5,  0.283411
  5/5,  0.282904
}
{ Monte Carlo PI - 2xN - score_mcache_10 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.285455
  2/5,  0.283361
  3/5,  0.283454
  4/5,  0.282847
  5/5,  0.283296
}
{ Monte Carlo PI - 2xN - simple_mcache_1 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.352314
  2/5,  0.35042
  3/5,  0.349634
  4/5,  0.350613
  5/5,  0.350341
}
{ Monte Carlo PI - 2xN - simple_mcache_2 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.326966
  2/5,  0.325864
  3/5,  0.329063
  4/5,  0.327793
  5/5,  0.32582
}
{ Monte Carlo PI - 2xN - simple_mcache_3 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.309261
  2/5,  0.306144
  3/5,  0.306682
  4/5,  0.30918
  5/5,  0.307583
}
{ Monte Carlo PI - 2xN - simple_mcache_4 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.307979
  2/5,  0.303027
  3/5,  0.305562
  4/5,  0.305133
  5/5,  0.307826
}
{ Monte Carlo PI - 2xN - simple_mcache_5 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.286074
  2/5,  0.28703
  3/5,  0.28523
  4/5,  0.295457
  5/5,  0.283945
}
{ Monte Carlo PI - 2xN - simple_mcache_6 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284668
  2/5,  0.28163
  3/5,  0.282164
  4/5,  0.284105
  5/5,  0.281424
}
{ Monte Carlo PI - 2xN - simple_mcache_7 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.282967
  2/5,  0.283362
  3/5,  0.285709
  4/5,  0.282933
  5/5,  0.282678
}
{ Monte Carlo PI - 2xN - simple_mcache_8 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284151
  2/5,  0.28169
  3/5,  0.282299
  4/5,  0.282178
  5/5,  0.282485
}
{ Monte Carlo PI - 2xN - simple_mcache_9 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284957
  2/5,  0.282758
  3/5,  0.281534
  4/5,  0.28307
  5/5,  0.283137
}
{ Monte Carlo PI - 2xN - simple_mcache_10 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284074
  2/5,  0.283481
  3/5,  0.281339
  4/5,  0.282912
  5/5,  0.285639
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.26814
  2/5,  0.267258
  3/5,  0.265089
  4/5,  0.267634
  5/5,  0.26739
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.288733
  2/5,  0.286997
  3/5,  0.294036
  4/5,  0.286413
  5/5,  0.289256
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287395
  2/5,  0.291205
  3/5,  0.28566
  4/5,  0.287708
  5/5,  0.286345
}
{ Monte Carlo PI - Nx2 - score_mcache_1 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.38234
  2/5,  0.379178
  3/5,  0.380282
  4/5,  0.377502
  5/5,  0.376527
}
{ Monte Carlo PI - Nx2 - score_mcache_2 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.376027
  2/5,  0.374443
  3/5,  0.374244
  4/5,  0.375595
  5/5,  0.374983
}
{ Monte Carlo PI - Nx2 - score_mcache_3 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.355537
  2/5,  0.354572
  3/5,  0.355251
  4/5,  0.351813
  5/5,  0.354133
}
{ Monte Carlo PI - Nx2 - score_mcache_4 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.33967
  2/5,  0.330898
  3/5,  0.331038
  4/5,  0.330383
  5/5,  0.332358
}
{ Monte Carlo PI - Nx2 - score_mcache_5 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.307716
  2/5,  0.307032
  3/5,  0.305232
  4/5,  0.307517
  5/5,  0.305241
}
{ Monte Carlo PI - Nx2 - score_mcache_6 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287308
  2/5,  0.287076
  3/5,  0.285612
  4/5,  0.284865
  5/5,  0.285481
}
{ Monte Carlo PI - Nx2 - score_mcache_7 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287039
  2/5,  0.290447
  3/5,  0.286463
  4/5,  0.290005
  5/5,  0.286095
}
{ Monte Carlo PI - Nx2 - score_mcache_8 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.29227
  2/5,  0.290506
  3/5,  0.287938
  4/5,  0.284359
  5/5,  0.286054
}
{ Monte Carlo PI - Nx2 - score_mcache_9 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.288218
  2/5,  0.292343
  3/5,  0.285734
  4/5,  0.28462
  5/5,  0.285731
}
{ Monte Carlo PI - Nx2 - score_mcache_10 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287788
  2/5,  0.285874
  3/5,  0.286246
  4/5,  0.288203
  5/5,  0.286199
}
{ Monte Carlo PI - Nx2 - simple_mcache_1 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.353506
  2/5,  0.353097
  3/5,  0.35277
  4/5,  0.35249
  5/5,  0.353876
}
{ Monte Carlo PI - Nx2 - simple_mcache_2 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.332924
  2/5,  0.330932
  3/5,  0.32902
  4/5,  0.331372
  5/5,  0.330474
}
{ Monte Carlo PI - Nx2 - simple_mcache_3 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.323779
  2/5,  0.311928
  3/5,  0.311211
  4/5,  0.312909
  5/5,  0.313525
}
{ Monte Carlo PI - Nx2 - simple_mcache_4 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.310565
  2/5,  0.308968
  3/5,  0.307729
  4/5,  0.309904
  5/5,  0.309459
}
{ Monte Carlo PI - Nx2 - simple_mcache_5 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.290507
  2/5,  0.297548
  3/5,  0.291279
  4/5,  0.288995
  5/5,  0.289923
}
{ Monte Carlo PI - Nx2 - simple_mcache_6 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.293168
  2/5,  0.287404
  3/5,  0.287309
  4/5,  0.288371
  5/5,  0.286574
}
{ Monte Carlo PI - Nx2 - simple_mcache_7 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.289385
  2/5,  0.287721
  3/5,  0.289719
  4/5,  0.286959
  5/5,  0.28682
}
{ Monte Carlo PI - Nx2 - simple_mcache_8 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.288752
  2/5,  0.287307
  3/5,  0.286891
  4/5,  0.287813
  5/5,  0.287528
}
{ Monte Carlo PI - Nx2 - simple_mcache_9 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.288367
  2/5,  0.287896
  3/5,  0.285956
  4/5,  0.285939
  5/5,  0.287097
}
{ Monte Carlo PI - Nx2 - simple_mcache_10 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.288574
  2/5,  0.302155
  3/5,  0.307389
  4/5,  0.287725
  5/5,  0.288145
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.916046
  2/5,  1.909066
  3/5,  1.922944
  4/5,  1.924466
  5/5,  1.809891
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.332388
  2/5,  2.328214
  3/5,  2.325074
  4/5,  2.320387
  5/5,  2.340539
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.250886
  2/5,  2.235706
  3/5,  2.23884
  4/5,  2.241557
  5/5,  2.234324
}
{ Stencil - 1D 4way - score_mcache_1 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.234054
  2/5,  2.24664
  3/5,  2.247717
  4/5,  2.235583
  5/5,  2.232015
}
{ Stencil - 1D 4way - score_mcache_2 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.240309
  2/5,  2.234995
  3/5,  2.236485
  4/5,  2.25226
  5/5,  2.247017
}
{ Stencil - 1D 4way - score_mcache_3 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.240251
  2/5,  2.233978
  3/5,  2.241316
  4/5,  2.241233
  5/5,  2.238046
}
{ Stencil - 1D 4way - score_mcache_4 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.251229
  2/5,  2.246405
  3/5,  2.247669
  4/5,  2.232756
  5/5,  2.236138
}
{ Stencil - 1D 4way - score_mcache_5 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.242178
  2/5,  2.249418
  3/5,  2.246026
  4/5,  2.242291
  5/5,  2.238848
}
{ Stencil - 1D 4way - score_mcache_6 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.24033
  2/5,  2.234424
  3/5,  2.234737
  4/5,  2.249106
  5/5,  2.257169
}
{ Stencil - 1D 4way - score_mcache_7 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.236487
  2/5,  2.234738
  3/5,  2.241179
  4/5,  2.243813
  5/5,  2.234161
}
{ Stencil - 1D 4way - score_mcache_8 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.25547
  2/5,  2.248463
  3/5,  2.234693
  4/5,  2.233798
  5/5,  2.237189
}
{ Stencil - 1D 4way - score_mcache_9 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.236038
  2/5,  2.234685
  3/5,  2.24888
  4/5,  2.256243
  5/5,  2.241145
}
{ Stencil - 1D 4way - score_mcache_10 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.235698
  2/5,  2.232563
  3/5,  2.239072
  4/5,  2.239949
  5/5,  2.242381
}
{ Stencil - 1D 4way - simple_mcache_1 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.386591
  2/5,  2.328226
  3/5,  2.320467
  4/5,  2.308101
  5/5,  2.33433
}
{ Stencil - 1D 4way - simple_mcache_2 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.337753
  2/5,  2.341043
  3/5,  2.343126
  4/5,  2.324806
  5/5,  2.321451
}
{ Stencil - 1D 4way - simple_mcache_3 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.317924
  2/5,  2.329193
  3/5,  2.335427
  4/5,  2.339045
  5/5,  2.319018
}
{ Stencil - 1D 4way - simple_mcache_4 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.328123
  2/5,  2.328698
  3/5,  2.32291
  4/5,  2.354567
  5/5,  2.336615
}
{ Stencil - 1D 4way - simple_mcache_5 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.336068
  2/5,  2.32543
  3/5,  2.325825
  4/5,  2.320618
  5/5,  2.327993
}
{ Stencil - 1D 4way - simple_mcache_6 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.337941
  2/5,  2.33016
  3/5,  2.300937
  4/5,  2.325414
  5/5,  2.296264
}
{ Stencil - 1D 4way - simple_mcache_7 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.32197
  2/5,  2.323889
  3/5,  2.341563
  4/5,  2.337066
  5/5,  2.324772
}
{ Stencil - 1D 4way - simple_mcache_8 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.319813
  2/5,  2.324223
  3/5,  2.324636
  4/5,  2.328875
  5/5,  2.349338
}
{ Stencil - 1D 4way - simple_mcache_9 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.301703
  2/5,  2.324846
  3/5,  2.326409
  4/5,  2.323025
  5/5,  2.325204
}
{ Stencil - 1D 4way - simple_mcache_10 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.31542
  2/5,  2.329554
  3/5,  2.321197
  4/5,  2.323136
  5/5,  2.333966
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.644684
  2/5,  4.668665
  3/5,  4.650488
  4/5,  4.64872
  5/5,  4.640596
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.223721
  2/5,  3.230346
  3/5,  3.226738
  4/5,  3.220628
  5/5,  3.221047
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.189365
  2/5,  3.211531
  3/5,  3.195865
  4/5,  3.185033
  5/5,  3.190327
}
{ Stencil - 2D - score_mcache_1 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.798407
  2/5,  4.809203
  3/5,  4.789418
  4/5,  4.783288
  5/5,  4.762812
}
{ Stencil - 2D - score_mcache_2 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.372754
  2/5,  4.375111
  3/5,  4.375328
  4/5,  4.359414
  5/5,  4.367385
}
{ Stencil - 2D - score_mcache_3 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.9457
  2/5,  3.921704
  3/5,  3.916559
  4/5,  3.915594
  5/5,  3.933293
}
{ Stencil - 2D - score_mcache_4 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.443159
  2/5,  3.428279
  3/5,  3.423157
  4/5,  3.430019
  5/5,  3.426489
}
{ Stencil - 2D - score_mcache_5 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.242192
  2/5,  3.252694
  3/5,  3.226093
  4/5,  3.208676
  5/5,  3.196788
}
{ Stencil - 2D - score_mcache_6 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.199186
  2/5,  3.200253
  3/5,  3.209983
  4/5,  3.196255
  5/5,  3.193103
}
{ Stencil - 2D - score_mcache_7 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.195501
  2/5,  3.19211
  3/5,  3.204266
  4/5,  3.202258
  5/5,  3.191954
}
{ Stencil - 2D - score_mcache_8 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.192955
  2/5,  3.190435
  3/5,  3.185985
  4/5,  3.204835
  5/5,  3.19643
}
{ Stencil - 2D - score_mcache_9 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.18692
  2/5,  3.186528
  3/5,  3.185777
  4/5,  3.189332
  5/5,  3.203246
}
{ Stencil - 2D - score_mcache_10 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.202048
  2/5,  3.189232
  3/5,  3.18387
  4/5,  3.186508
  5/5,  3.188166
}
{ Stencil - 2D - simple_mcache_1 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.435744
  2/5,  3.411418
  3/5,  3.410928
  4/5,  3.40668
  5/5,  3.405718
}
{ Stencil - 2D - simple_mcache_2 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.227743
  2/5,  3.229134
  3/5,  3.217857
  4/5,  3.219421
  5/5,  3.220124
}
{ Stencil - 2D - simple_mcache_3 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.222345
  2/5,  3.229443
  3/5,  3.238357
  4/5,  3.220173
  5/5,  3.221882
}
{ Stencil - 2D - simple_mcache_4 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.223976
  2/5,  3.214847
  3/5,  3.233823
  4/5,  3.237946
  5/5,  3.215397
}
{ Stencil - 2D - simple_mcache_5 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.230454
  2/5,  3.220589
  3/5,  3.224704
  4/5,  3.238491
  5/5,  3.227525
}
{ Stencil - 2D - simple_mcache_6 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.216615
  2/5,  3.215956
  3/5,  3.228197
  4/5,  3.221894
  5/5,  3.234604
}
{ Stencil - 2D - simple_mcache_7 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.232355
  2/5,  3.219449
  3/5,  3.221115
  4/5,  3.216738
  5/5,  3.224765
}
{ Stencil - 2D - simple_mcache_8 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.238879
  2/5,  3.22717
  3/5,  3.242715
  4/5,  3.216431
  5/5,  3.218582
}
{ Stencil - 2D - simple_mcache_9 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.224504
  2/5,  3.243209
  3/5,  3.230447
  4/5,  3.221128
  5/5,  3.220975
}
{ Stencil - 2D - simple_mcache_10 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.22123
  2/5,  3.21849
  3/5,  3.238334
  4/5,  3.227328
  5/5,  3.21725
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.293403
  2/5,  2.300713
  3/5,  2.292907
  4/5,  2.292003
  5/5,  2.313905
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.54306
  2/5,  1.654127
  3/5,  1.534379
  4/5,  1.535374
  5/5,  1.534791
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.610768
  2/5,  1.612989
  3/5,  1.609964
  4/5,  1.606281
  5/5,  1.6132
}
{ Shallow Water - score_mcache_1 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.317657
  2/5,  2.340875
  3/5,  2.287562
  4/5,  2.312712
  5/5,  2.304559
}
{ Shallow Water - score_mcache_2 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.980556
  2/5,  2.01809
  3/5,  2.003824
  4/5,  2.009997
  5/5,  2.017786
}
{ Shallow Water - score_mcache_3 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.79552
  2/5,  1.791096
  3/5,  1.796153
  4/5,  1.788243
  5/5,  1.793557
}
{ Shallow Water - score_mcache_4 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.688283
  2/5,  1.694367
  3/5,  1.699347
  4/5,  1.6926
  5/5,  1.69561
}
{ Shallow Water - score_mcache_5 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.656725
  2/5,  1.65798
  3/5,  1.66382
  4/5,  1.664743
  5/5,  1.666533
}
{ Shallow Water - score_mcache_6 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.623242
  2/5,  1.627049
  3/5,  1.632245
  4/5,  1.627732
  5/5,  1.625143
}
{ Shallow Water - score_mcache_7 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.620318
  2/5,  1.617027
  3/5,  1.619852
  4/5,  1.616535
  5/5,  1.619349
}
{ Shallow Water - score_mcache_8 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.615543
  2/5,  1.616636
  3/5,  1.621188
  4/5,  1.625326
  5/5,  1.61906
}
{ Shallow Water - score_mcache_9 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.603761
  2/5,  1.599403
  3/5,  1.605291
  4/5,  1.596766
  5/5,  1.60265
}
{ Shallow Water - score_mcache_10 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.605583
  2/5,  1.609163
  3/5,  1.617749
  4/5,  1.619994
  5/5,  1.61275
}
{ Shallow Water - simple_mcache_1 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.812455
  2/5,  1.813967
  3/5,  1.811737
  4/5,  1.817611
  5/5,  1.815841
}
{ Shallow Water - simple_mcache_2 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.698456
  2/5,  1.700991
  3/5,  1.701431
  4/5,  1.710398
  5/5,  1.699972
}
{ Shallow Water - simple_mcache_3 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.614051
  2/5,  1.614856
  3/5,  1.620425
  4/5,  1.617207
  5/5,  1.618895
}
{ Shallow Water - simple_mcache_4 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.59549
  2/5,  1.596382
  3/5,  1.603355
  4/5,  1.606663
  5/5,  1.596454
}
{ Shallow Water - simple_mcache_5 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.584082
  2/5,  1.580459
  3/5,  1.583524
  4/5,  1.583665
  5/5,  1.580379
}
{ Shallow Water - simple_mcache_6 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.576671
  2/5,  1.574391
  3/5,  1.579181
  4/5,  1.586077
  5/5,  1.586216
}
{ Shallow Water - simple_mcache_7 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.566175
  2/5,  1.561149
  3/5,  1.559292
  4/5,  1.562192
  5/5,  1.558604
}
{ Shallow Water - simple_mcache_8 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.555828
  2/5,  1.553659
  3/5,  1.555605
  4/5,  1.563205
  5/5,  1.563611
}
{ Shallow Water - simple_mcache_9 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.550539
  2/5,  1.547343
  3/5,  1.548096
  4/5,  1.544037
  5/5,  1.549994
}
{ Shallow Water - simple_mcache_10 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.53557
  2/5,  1.536384
  3/5,  1.537036
  4/5,  1.535949
  5/5,  1.549259
}
