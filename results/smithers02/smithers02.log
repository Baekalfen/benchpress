Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers02/08d082bea753a6cf66097622b448da203d868aea/benchmark-VE027A.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.131935
  2/5,  6.096696
  3/5,  6.093064
  4/5,  6.139261
  5/5,  6.101161
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.63646
  2/5,  5.652382
  3/5,  5.645497
  4/5,  5.628656
  5/5,  5.638938
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.705733
  2/5,  5.67683
  3/5,  5.683501
  4/5,  5.707531
  5/5,  5.760159
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.714537
  2/5,  16.671595
  3/5,  16.652819
  4/5,  16.662622
  5/5,  16.680616
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.566152
  2/5,  16.562058
  3/5,  16.566116
  4/5,  16.544472
  5/5,  16.553582
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.658092
  2/5,  16.665319
  3/5,  16.655481
  4/5,  16.661429
  5/5,  16.660118
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.628509
  2/5,  2.617297
  3/5,  2.621387
  4/5,  2.622578
  5/5,  2.614555
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.364261
  2/5,  3.370404
  3/5,  3.367988
  4/5,  3.35562
  5/5,  3.352588
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.125509
  2/5,  3.201926
  3/5,  3.122844
  4/5,  3.156271
  5/5,  3.117389
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.93837
  2/5,  6.987909
  3/5,  6.934057
  4/5,  6.958458
  5/5,  6.955441
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.118512
  2/5,  5.129445
  3/5,  5.142723
  4/5,  5.114862
  5/5,  5.12079
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.831327
  2/5,  4.808235
  3/5,  4.789805
  4/5,  4.790156
  5/5,  4.801817
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.80395
  2/5,  3.800328
  3/5,  3.795645
  4/5,  3.792289
  5/5,  3.820811
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.79045
  2/5,  1.792131
  3/5,  1.785523
  4/5,  1.777896
  5/5,  1.784514
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.767766
  2/5,  1.772262
  3/5,  1.766932
  4/5,  1.777894
  5/5,  1.777909
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.51039
  2/5,  5.493484
  3/5,  5.501019
  4/5,  5.518187
  5/5,  5.501451
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.618111
  2/5,  4.63715
  3/5,  4.625739
  4/5,  4.615037
  5/5,  4.613363
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.626936
  2/5,  4.611672
  3/5,  4.608669
  4/5,  4.603862
  5/5,  4.619537
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.075466
  2/5,  2.071065
  3/5,  2.068526
  4/5,  2.070037
  5/5,  2.065024
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.212458
  2/5,  2.223332
  3/5,  2.217458
  4/5,  2.219936
  5/5,  2.210878
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.180877
  2/5,  2.184562
  3/5,  2.179278
  4/5,  2.180756
  5/5,  2.192768
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.907103
  2/5,  4.862964
  3/5,  4.863031
  4/5,  4.880029
  5/5,  4.959847
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.34822
  2/5,  5.346696
  3/5,  5.354229
  4/5,  5.391168
  5/5,  5.341544
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.333031
  2/5,  5.628259
  3/5,  5.327187
  4/5,  5.326744
  5/5,  5.33737
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.258203
  2/5,  0.256834
  3/5,  0.265529
  4/5,  0.257661
  5/5,  0.256958
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283931
  2/5,  0.285695
  3/5,  0.283069
  4/5,  0.282571
  5/5,  0.285076
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284813
  2/5,  0.28375
  3/5,  0.282584
  4/5,  0.283481
  5/5,  0.282999
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.268232
  2/5,  0.266244
  3/5,  0.265356
  4/5,  0.267557
  5/5,  0.267629
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.288436
  2/5,  0.286614
  3/5,  0.28615
  4/5,  0.286423
  5/5,  0.288273
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.285479
  2/5,  0.286236
  3/5,  0.286814
  4/5,  0.286792
  5/5,  0.284925
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.929993
  2/5,  1.926646
  3/5,  1.793777
  4/5,  1.809416
  5/5,  1.934529
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.332362
  2/5,  2.331803
  3/5,  2.325666
  4/5,  2.331986
  5/5,  2.345031
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.246013
  2/5,  2.238234
  3/5,  2.237992
  4/5,  2.246364
  5/5,  2.238817
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.619077
  2/5,  4.63156
  3/5,  4.614144
  4/5,  4.614927
  5/5,  4.610036
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.241893
  2/5,  3.221191
  3/5,  3.215327
  4/5,  3.21395
  5/5,  3.216414
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.193298
  2/5,  3.203408
  3/5,  3.188904
  4/5,  3.191469
  5/5,  3.185378
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.296156
  2/5,  2.298867
  3/5,  2.304289
  4/5,  2.31277
  5/5,  2.29692
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.534568
  2/5,  1.532177
  3/5,  1.535281
  4/5,  1.533249
  5/5,  1.531927
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.607641
  2/5,  1.60493
  3/5,  1.622508
  4/5,  1.616144
  5/5,  1.616123
}
