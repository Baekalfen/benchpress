Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers02/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-WhwD6H.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.081287
  2/5,  6.128265
  3/5,  6.1088
  4/5,  6.111701
  5/5,  6.182184
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.628311
  2/5,  5.720204
  3/5,  5.654694
  4/5,  5.653728
  5/5,  5.645226
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.69346
  2/5,  5.703692
  3/5,  5.697486
  4/5,  5.673416
  5/5,  5.710815
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.709196
  2/5,  16.65994
  3/5,  16.672681
  4/5,  16.758216
  5/5,  16.732061
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.558505
  2/5,  16.547834
  3/5,  16.540976
  4/5,  16.56004
  5/5,  16.569832
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.639778
  2/5,  16.647928
  3/5,  16.644345
  4/5,  16.637714
  5/5,  16.65443
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.649024
  2/5,  2.639599
  3/5,  2.62988
  4/5,  2.638783
  5/5,  2.645563
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.352826
  2/5,  3.35884
  3/5,  3.401148
  4/5,  3.37641
  5/5,  3.378593
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.110545
  2/5,  3.1159
  3/5,  3.123946
  4/5,  3.131945
  5/5,  3.121959
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.945492
  2/5,  6.969395
  3/5,  6.975792
  4/5,  6.990351
  5/5,  7.048978
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.115221
  2/5,  5.121318
  3/5,  5.14777
  4/5,  5.245607
  5/5,  5.165896
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.792702
  2/5,  4.815853
  3/5,  4.875859
  4/5,  4.821298
  5/5,  4.835471
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.824591
  2/5,  3.826819
  3/5,  3.816555
  4/5,  3.81452
  5/5,  3.834167
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.789606
  2/5,  1.792577
  3/5,  1.796162
  4/5,  1.803037
  5/5,  1.822372
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.770124
  2/5,  1.776802
  3/5,  1.78177
  4/5,  1.783267
  5/5,  1.804698
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.530044
  2/5,  5.53401
  3/5,  5.538016
  4/5,  5.577701
  5/5,  5.634545
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.613382
  2/5,  4.614635
  3/5,  4.640548
  4/5,  4.646316
  5/5,  4.661991
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.604753
  2/5,  4.626331
  3/5,  4.634732
  4/5,  4.639079
  5/5,  4.666296
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.081538
  2/5,  2.07764
  3/5,  2.094422
  4/5,  2.094264
  5/5,  2.131288
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.216187
  2/5,  2.216592
  3/5,  2.233739
  4/5,  2.23945
  5/5,  2.241585
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.181242
  2/5,  2.184461
  3/5,  2.187433
  4/5,  2.193305
  5/5,  2.200261
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.878441
  2/5,  4.870792
  3/5,  4.870874
  4/5,  4.881452
  5/5,  4.904932
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.344
  2/5,  5.346492
  3/5,  5.354213
  4/5,  5.373412
  5/5,  5.412675
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.334016
  2/5,  5.330287
  3/5,  5.342743
  4/5,  5.339977
  5/5,  5.352871
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.255965
  2/5,  0.257175
  3/5,  0.257343
  4/5,  0.262307
  5/5,  0.261759
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.285113
  2/5,  0.282776
  3/5,  0.289074
  4/5,  0.281995
  5/5,  0.285457
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.285057
  2/5,  0.284648
  3/5,  0.283194
  4/5,  0.284691
  5/5,  0.284893
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.263942
  2/5,  0.26552
  3/5,  0.267089
  4/5,  0.270158
  5/5,  0.271158
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.285742
  2/5,  0.287725
  3/5,  0.287252
  4/5,  0.288484
  5/5,  0.292668
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.286119
  2/5,  0.287568
  3/5,  0.287332
  4/5,  0.286107
  5/5,  0.292613
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.935066
  2/5,  1.928446
  3/5,  1.893385
  4/5,  1.960323
  5/5,  1.953508
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.355481
  2/5,  2.347074
  3/5,  2.33708
  4/5,  2.337337
  5/5,  2.318711
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.225834
  2/5,  2.228896
  3/5,  2.222916
  4/5,  2.233101
  5/5,  2.233674
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.572286
  2/5,  4.620713
  3/5,  4.645073
  4/5,  4.658225
  5/5,  4.694268
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.228502
  2/5,  3.223571
  3/5,  3.219841
  4/5,  3.220818
  5/5,  3.229668
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.180706
  2/5,  3.202741
  3/5,  3.199329
  4/5,  3.195997
  5/5,  3.206025
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.281312
  2/5,  2.288397
  3/5,  2.308126
  4/5,  2.335134
  5/5,  2.347708
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.530557
  2/5,  1.531042
  3/5,  1.535306
  4/5,  1.535218
  5/5,  1.543521
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.608756
  2/5,  1.612221
  3/5,  1.625738
  4/5,  1.633948
  5/5,  1.629741
}
