Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers02/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-BmzRCA.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.120206
  2/5,  6.076206
  3/5,  6.079663
  4/5,  6.114204
  5/5,  6.088505
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.629739
  2/5,  5.657125
  3/5,  5.66391
  4/5,  5.630769
  5/5,  5.629247
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.699787
  2/5,  5.659321
  3/5,  5.670848
  4/5,  5.92054
  5/5,  5.677201
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.657967
  2/5,  16.647905
  3/5,  16.648664
  4/5,  16.663808
  5/5,  16.674623
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.550768
  2/5,  16.588707
  3/5,  16.598519
  4/5,  16.627614
  5/5,  16.582382
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.640819
  2/5,  16.636197
  3/5,  16.639238
  4/5,  16.642739
  5/5,  16.621663
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.634386
  2/5,  2.638317
  3/5,  2.621212
  4/5,  2.620559
  5/5,  2.619135
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.356557
  2/5,  3.375856
  3/5,  3.379383
  4/5,  3.353619
  5/5,  3.355329
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.114349
  2/5,  3.126951
  3/5,  3.126031
  4/5,  3.120614
  5/5,  3.122618
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.948945
  2/5,  6.974498
  3/5,  6.935781
  4/5,  6.949713
  5/5,  6.959844
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.109992
  2/5,  5.117065
  3/5,  5.138145
  4/5,  5.123705
  5/5,  5.123215
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.810655
  2/5,  4.817263
  3/5,  4.804814
  4/5,  4.795304
  5/5,  4.812143
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.83703
  2/5,  3.819716
  3/5,  3.812092
  4/5,  3.803656
  5/5,  3.82171
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.803822
  2/5,  1.78885
  3/5,  1.779441
  4/5,  1.778465
  5/5,  1.78968
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.772175
  2/5,  1.767435
  3/5,  1.766649
  4/5,  1.774386
  5/5,  1.78005
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.615765
  2/5,  5.503702
  3/5,  5.495677
  4/5,  5.512593
  5/5,  5.489723
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.608858
  2/5,  4.612806
  3/5,  4.62481
  4/5,  4.613031
  5/5,  4.609975
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.614364
  2/5,  4.621241
  3/5,  4.595753
  4/5,  4.603353
  5/5,  4.617527
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.080872
  2/5,  2.062879
  3/5,  2.069118
  4/5,  2.06334
  5/5,  2.068815
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.215205
  2/5,  2.207925
  3/5,  2.217602
  4/5,  2.223182
  5/5,  2.212787
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.186028
  2/5,  2.187406
  3/5,  2.185413
  4/5,  2.181178
  5/5,  2.185139
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.904161
  2/5,  5.207921
  3/5,  4.876737
  4/5,  4.875995
  5/5,  4.927363
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.345419
  2/5,  5.340985
  3/5,  5.360925
  4/5,  5.363471
  5/5,  5.346291
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.32244
  2/5,  5.334295
  3/5,  5.333179
  4/5,  5.318946
  5/5,  5.33652
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.261588
  2/5,  0.258225
  3/5,  0.261447
  4/5,  0.25914
  5/5,  0.256875
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.28603
  2/5,  0.281849
  3/5,  0.289354
  4/5,  0.282297
  5/5,  0.284614
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284804
  2/5,  0.283494
  3/5,  0.283154
  4/5,  0.282238
  5/5,  0.285274
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.267602
  2/5,  0.265824
  3/5,  0.265499
  4/5,  0.264027
  5/5,  0.265729
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.289343
  2/5,  0.285524
  3/5,  0.28773
  4/5,  0.291818
  5/5,  0.287098
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287331
  2/5,  0.287154
  3/5,  0.285728
  4/5,  0.286158
  5/5,  0.285164
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.913208
  2/5,  1.787101
  3/5,  1.92079
  4/5,  1.859601
  5/5,  1.872425
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.308526
  2/5,  2.325235
  3/5,  2.327521
  4/5,  2.325166
  5/5,  2.3247
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.234002
  2/5,  2.227497
  3/5,  2.221671
  4/5,  2.219166
  5/5,  2.224522
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.577405
  2/5,  4.594975
  3/5,  4.599608
  4/5,  4.580282
  5/5,  4.573268
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.226892
  2/5,  3.319492
  3/5,  3.217419
  4/5,  3.219217
  5/5,  3.217665
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.182963
  2/5,  3.18325
  3/5,  3.19433
  4/5,  3.212345
  5/5,  3.180041
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.287785
  2/5,  2.282647
  3/5,  2.283503
  4/5,  2.286987
  5/5,  2.288526
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.552648
  2/5,  1.530503
  3/5,  1.530074
  4/5,  1.530033
  5/5,  1.532231
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.610524
  2/5,  1.606932
  3/5,  1.610593
  4/5,  1.610949
  5/5,  1.614229
}
