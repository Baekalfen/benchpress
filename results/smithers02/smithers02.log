Running benchmark suite 'default'; results are written to: /home/safl/buildbot/benchpress/results/smithers02/9633e6d168a33781e0d29e95962a7623e60cbf04/benchmark-xib_GD.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.022255
  2/5,  6.019527
  3/5,  6.028687
  4/5,  6.02011
  5/5,  6.010415
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.625553
  2/5,  5.633297
  3/5,  5.625872
  4/5,  5.617049
  5/5,  5.637091
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.684069
  2/5,  5.644404
  3/5,  5.650514
  4/5,  5.661227
  5/5,  5.653436
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.619234
  2/5,  16.619153
  3/5,  16.618069
  4/5,  16.620237
  5/5,  16.625877
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.603373
  2/5,  16.575381
  3/5,  16.523887
  4/5,  16.528439
  5/5,  16.517285
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.596928
  2/5,  16.611145
  3/5,  16.617435
  4/5,  16.617763
  5/5,  16.763304
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.661865
  2/5,  2.646478
  3/5,  2.669
  4/5,  2.641434
  5/5,  2.65367
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.351565
  2/5,  3.34366
  3/5,  3.340436
  4/5,  3.343758
  5/5,  3.341235
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.114476
  2/5,  3.113005
  3/5,  3.107418
  4/5,  3.098284
  5/5,  3.095516
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.9137
  2/5,  6.923092
  3/5,  6.913638
  4/5,  6.933148
  5/5,  6.921489
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.098706
  2/5,  5.099386
  3/5,  5.102335
  4/5,  5.090177
  5/5,  5.088559
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.787203
  2/5,  4.774932
  3/5,  4.762879
  4/5,  4.746675
  5/5,  4.777744
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.894216
  2/5,  3.7713
  3/5,  3.773311
  4/5,  3.771049
  5/5,  3.785497
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.767869
  2/5,  1.797573
  3/5,  1.751865
  4/5,  1.751255
  5/5,  1.753262
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.740242
  2/5,  1.732841
  3/5,  1.738163
  4/5,  1.743407
  5/5,  1.752184
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.420634
  2/5,  5.399619
  3/5,  5.391916
  4/5,  5.418203
  5/5,  5.396564
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.584049
  2/5,  4.577792
  3/5,  4.589362
  4/5,  4.585813
  5/5,  4.577524
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.572389
  2/5,  4.576163
  3/5,  4.570215
  4/5,  4.566384
  5/5,  4.569413
}
