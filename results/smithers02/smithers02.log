Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers02/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-3uFZb_.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.10165
  2/5,  6.104165
  3/5,  6.106652
  4/5,  6.160876
  5/5,  6.161478
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.630646
  2/5,  5.663476
  3/5,  5.648181
  4/5,  5.647067
  5/5,  5.657901
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.690652
  2/5,  5.665646
  3/5,  5.674212
  4/5,  5.698873
  5/5,  5.685881
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.659742
  2/5,  16.66797
  3/5,  16.658707
  4/5,  16.666398
  5/5,  16.694932
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.55704
  2/5,  16.633143
  3/5,  16.597828
  4/5,  16.55125
  5/5,  16.562614
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.644194
  2/5,  16.653587
  3/5,  16.655537
  4/5,  16.656213
  5/5,  16.664889
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.619701
  2/5,  2.642926
  3/5,  2.630981
  4/5,  2.62982
  5/5,  2.638557
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.383488
  2/5,  3.36348
  3/5,  3.36415
  4/5,  3.372041
  5/5,  3.380113
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.129171
  2/5,  3.133982
  3/5,  3.109612
  4/5,  3.11583
  5/5,  3.117524
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.964483
  2/5,  6.984707
  3/5,  6.970551
  4/5,  7.012748
  5/5,  7.028669
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.112657
  2/5,  5.138301
  3/5,  5.151053
  4/5,  5.141991
  5/5,  5.15912
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.819102
  2/5,  4.818142
  3/5,  4.826338
  4/5,  4.831992
  5/5,  4.874225
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.799856
  2/5,  3.803296
  3/5,  3.814105
  4/5,  3.8494
  5/5,  3.907554
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.777583
  2/5,  1.785095
  3/5,  1.793618
  4/5,  1.801874
  5/5,  1.816924
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.768224
  2/5,  1.772395
  3/5,  1.792639
  4/5,  1.796768
  5/5,  1.845094
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.49068
  2/5,  5.513626
  3/5,  5.570861
  4/5,  5.57576
  5/5,  5.615825
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.631237
  2/5,  4.626928
  3/5,  4.630007
  4/5,  4.633605
  5/5,  4.669983
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.610353
  2/5,  4.61513
  3/5,  4.622221
  4/5,  4.655586
  5/5,  4.663854
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.06771
  2/5,  2.074379
  3/5,  2.087462
  4/5,  2.093161
  5/5,  2.125566
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.219085
  2/5,  2.216902
  3/5,  2.218199
  4/5,  2.223919
  5/5,  2.228894
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.179308
  2/5,  2.178489
  3/5,  2.197774
  4/5,  2.197989
  5/5,  2.204782
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.864436
  2/5,  4.862492
  3/5,  4.8823
  4/5,  4.9114
  5/5,  4.888966
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.341723
  2/5,  5.355148
  3/5,  5.369185
  4/5,  5.409945
  5/5,  5.377416
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.338449
  2/5,  5.327378
  3/5,  5.32883
  4/5,  5.341871
  5/5,  5.375981
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.255552
  2/5,  0.258336
  3/5,  0.259135
  4/5,  0.259389
  5/5,  0.263222
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.282626
  2/5,  0.281544
  3/5,  0.283026
  4/5,  0.289133
  5/5,  0.285725
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283755
  2/5,  0.28493
  3/5,  0.289645
  4/5,  0.283904
  5/5,  0.284711
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.265331
  2/5,  0.271196
  3/5,  0.266961
  4/5,  0.268148
  5/5,  0.27317
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287786
  2/5,  0.304511
  3/5,  0.287872
  4/5,  0.287581
  5/5,  0.289278
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.286023
  2/5,  0.286089
  3/5,  0.287489
  4/5,  0.287989
  5/5,  0.292715
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.936966
  2/5,  1.926061
  3/5,  1.934098
  4/5,  1.932821
  5/5,  1.945237
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.306686
  2/5,  2.339207
  3/5,  2.342713
  4/5,  2.343991
  5/5,  2.358389
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.226395
  2/5,  2.221447
  3/5,  2.223833
  4/5,  2.233393
  5/5,  2.246254
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.589428
  2/5,  4.617297
  3/5,  4.638681
  4/5,  4.695489
  5/5,  4.80491
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.251813
  2/5,  3.221423
  3/5,  3.223956
  4/5,  3.222859
  5/5,  3.23397
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.186867
  2/5,  3.185682
  3/5,  3.192923
  4/5,  3.195408
  5/5,  3.218034
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.295156
  2/5,  2.294949
  3/5,  2.318057
  4/5,  2.323827
  5/5,  2.350835
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.527981
  2/5,  1.52909
  3/5,  1.536683
  4/5,  1.555163
  5/5,  1.557878
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.609141
  2/5,  1.612139
  3/5,  1.615759
  4/5,  1.626679
  5/5,  1.629435
}
