Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers02/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-ddQdqH.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.099191
  2/5,  6.117429
  3/5,  6.08295
  4/5,  6.085666
  5/5,  6.12041
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.628538
  2/5,  5.62859
  3/5,  5.646877
  4/5,  5.642841
  5/5,  5.628273
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.671741
  2/5,  5.706893
  3/5,  5.667669
  4/5,  5.662711
  5/5,  5.692326
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.639722
  2/5,  16.649211
  3/5,  16.655757
  4/5,  16.661572
  5/5,  17.012475
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.620734
  2/5,  16.526621
  3/5,  16.569998
  4/5,  16.548076
  5/5,  16.584501
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.645526
  2/5,  16.638055
  3/5,  16.638265
  4/5,  16.61731
  5/5,  16.638243
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.606256
  2/5,  2.636359
  3/5,  2.620443
  4/5,  2.601881
  5/5,  2.609942
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.35686
  2/5,  3.351753
  3/5,  3.377455
  4/5,  3.359311
  5/5,  3.35191
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.112144
  2/5,  3.112292
  3/5,  3.109844
  4/5,  3.137944
  5/5,  3.127325
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.92042
  2/5,  6.935363
  3/5,  6.931706
  4/5,  6.952175
  5/5,  6.98094
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.115083
  2/5,  5.124188
  3/5,  5.112231
  4/5,  5.142201
  5/5,  5.106796
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.810851
  2/5,  4.804613
  3/5,  4.815974
  4/5,  4.78389
  5/5,  4.80978
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.796189
  2/5,  3.812445
  3/5,  3.902941
  4/5,  3.813696
  5/5,  3.784136
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.781522
  2/5,  1.776611
  3/5,  1.786179
  4/5,  1.792887
  5/5,  1.793376
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.790726
  2/5,  1.78042
  3/5,  1.766844
  4/5,  1.772277
  5/5,  1.766729
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.50527
  2/5,  5.507728
  3/5,  5.502194
  4/5,  5.490863
  5/5,  5.513193
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.609855
  2/5,  4.605811
  3/5,  4.625139
  4/5,  4.619675
  5/5,  4.604216
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.61121
  2/5,  4.619106
  3/5,  4.617553
  4/5,  4.603277
  5/5,  4.618267
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.064418
  2/5,  2.073281
  3/5,  2.07768
  4/5,  2.080706
  5/5,  2.066375
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.207864
  2/5,  2.210413
  3/5,  2.205898
  4/5,  2.20922
  5/5,  2.219992
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.191679
  2/5,  2.186917
  3/5,  2.183553
  4/5,  2.177897
  5/5,  2.183519
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.870769
  2/5,  4.886209
  3/5,  4.873396
  4/5,  4.862428
  5/5,  4.863363
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.360997
  2/5,  5.345661
  3/5,  5.340291
  4/5,  5.350294
  5/5,  5.358196
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.318648
  2/5,  5.327854
  3/5,  5.33358
  4/5,  5.326565
  5/5,  5.31769
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.258496
  2/5,  0.25577
  3/5,  0.256223
  4/5,  0.255429
  5/5,  0.2566
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284275
  2/5,  0.284773
  3/5,  0.281019
  4/5,  0.281603
  5/5,  0.282608
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.285
  2/5,  0.283346
  3/5,  0.283249
  4/5,  0.283417
  5/5,  0.284314
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.275146
  2/5,  0.266675
  3/5,  0.264175
  4/5,  0.268731
  5/5,  0.267185
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.29406
  2/5,  0.2922
  3/5,  0.289606
  4/5,  0.286943
  5/5,  0.287568
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.285572
  2/5,  0.284784
  3/5,  0.28846
  4/5,  0.284713
  5/5,  0.284306
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.920324
  2/5,  1.91885
  3/5,  1.840322
  4/5,  1.92074
  5/5,  1.919855
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.337839
  2/5,  2.320938
  3/5,  2.32308
  4/5,  2.329816
  5/5,  2.32798
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.238808
  2/5,  2.237358
  3/5,  2.243984
  4/5,  2.251285
  5/5,  2.240983
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.590539
  2/5,  4.582331
  3/5,  4.606875
  4/5,  4.682459
  5/5,  4.565295
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.218729
  2/5,  3.209715
  3/5,  3.221293
  4/5,  3.238367
  5/5,  3.25418
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.187196
  2/5,  3.18462
  3/5,  3.18553
  4/5,  3.192503
  5/5,  3.202633
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.283255
  2/5,  2.284241
  3/5,  2.293862
  4/5,  2.288055
  5/5,  2.291674
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.531697
  2/5,  1.533327
  3/5,  1.535772
  4/5,  1.536099
  5/5,  1.533994
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.608108
  2/5,  1.609022
  3/5,  1.608207
  4/5,  1.610556
  5/5,  1.606322
}
