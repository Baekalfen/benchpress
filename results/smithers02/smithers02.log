Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers02/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-LL3860.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.058241
  2/5,  6.020754
  3/5,  6.0312
  4/5,  6.043283
  5/5,  6.019748
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.621484
  2/5,  5.637849
  3/5,  5.610012
  4/5,  5.608471
  5/5,  5.649471
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.652596
  2/5,  5.632473
  3/5,  5.657923
  4/5,  5.663332
  5/5,  5.661516
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.615685
  2/5,  16.626262
  3/5,  16.615277
  4/5,  16.606713
  5/5,  16.608332
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.526646
  2/5,  16.52575
  3/5,  16.527633
  4/5,  16.515102
  5/5,  16.502097
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.606481
  2/5,  16.688411
  3/5,  16.67917
  4/5,  16.623087
  5/5,  16.622026
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.631119
  2/5,  2.633064
  3/5,  2.628677
  4/5,  2.631095
  5/5,  2.630504
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.357019
  2/5,  3.343499
  3/5,  3.330639
  4/5,  3.339688
  5/5,  3.335453
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.116148
  2/5,  3.145016
  3/5,  3.118452
  4/5,  3.112707
  5/5,  3.108576
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.934319
  2/5,  6.93019
  3/5,  6.917202
  4/5,  6.933589
  5/5,  6.918309
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.091411
  2/5,  5.08909
  3/5,  5.098187
  4/5,  5.076211
  5/5,  5.076542
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.778686
  2/5,  4.784998
  3/5,  4.771699
  4/5,  4.76907
  5/5,  4.795611
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.791975
  2/5,  3.812315
  3/5,  3.782582
  4/5,  3.786232
  5/5,  3.788977
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.765389
  2/5,  1.753629
  3/5,  1.753649
  4/5,  1.747346
  5/5,  1.751494
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.735503
  2/5,  1.743049
  3/5,  1.741836
  4/5,  1.748054
  5/5,  1.7519
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.413959
  2/5,  5.39219
  3/5,  5.40479
  4/5,  5.428859
  5/5,  5.405373
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.562427
  2/5,  4.584901
  3/5,  4.595687
  4/5,  4.576915
  5/5,  4.563595
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.569837
  2/5,  4.661978
  3/5,  4.563365
  4/5,  4.570364
  5/5,  4.56564
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.0267
  2/5,  2.071263
  3/5,  2.037864
  4/5,  2.025106
  5/5,  2.035733
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.191769
  2/5,  2.188537
  3/5,  2.193541
  4/5,  2.197076
  5/5,  2.219189
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.170109
  2/5,  2.158328
  3/5,  2.163436
  4/5,  2.160924
  5/5,  2.161572
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.867427
  2/5,  4.850318
  3/5,  4.852807
  4/5,  4.837219
  5/5,  4.86363
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.333148
  2/5,  5.307138
  3/5,  5.303391
  4/5,  5.339692
  5/5,  5.311982
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.289166
  2/5,  5.287425
  3/5,  5.314721
  4/5,  5.288606
  5/5,  5.284108
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.254089
  2/5,  0.25393
  3/5,  0.256037
  4/5,  0.253714
  5/5,  0.254535
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.281308
  2/5,  0.286378
  3/5,  0.283498
  4/5,  0.28239
  5/5,  0.282924
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.282827
  2/5,  0.285587
  3/5,  0.283645
  4/5,  0.287228
  5/5,  0.28205
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.262511
  2/5,  0.266313
  3/5,  0.263043
  4/5,  0.264193
  5/5,  0.262712
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.286555
  2/5,  0.289443
  3/5,  0.288555
  4/5,  0.289317
  5/5,  0.287457
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.285371
  2/5,  0.28977
  3/5,  0.286661
  4/5,  0.286026
  5/5,  0.285692
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.912191
  2/5,  1.918568
  3/5,  1.916368
  4/5,  1.916131
  5/5,  1.901401
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.31285
  2/5,  2.31119
  3/5,  2.283172
  4/5,  2.308933
  5/5,  2.303349
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.203603
  2/5,  2.223443
  3/5,  2.21689
  4/5,  2.215941
  5/5,  2.204717
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.463022
  2/5,  4.458786
  3/5,  4.481897
  4/5,  4.47916
  5/5,  4.464019
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.200221
  2/5,  3.196113
  3/5,  3.209861
  4/5,  3.219015
  5/5,  3.202689
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.158104
  2/5,  3.163254
  3/5,  3.156542
  4/5,  3.171551
  5/5,  3.175056
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.22485
  2/5,  2.221926
  3/5,  2.230921
  4/5,  2.22508
  5/5,  2.225027
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.516954
  2/5,  1.517068
  3/5,  1.518076
  4/5,  1.530193
  5/5,  1.520048
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.594065
  2/5,  1.590605
  3/5,  1.595124
  4/5,  1.58723
  5/5,  1.593301
}
