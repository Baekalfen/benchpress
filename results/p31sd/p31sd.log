Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/p31sd/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-V8kTqn.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  7.137822
  2/5,  7.135565
  3/5,  7.138688
  4/5,  7.163809
  5/5,  7.154296
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  6.700805
  2/5,  6.67527
  3/5,  6.673851
  4/5,  6.679756
  5/5,  6.679582
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  6.567078
  2/5,  6.579375
  3/5,  6.567535
  4/5,  6.585878
  5/5,  6.577304
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  18.449815
  2/5,  18.470891
  3/5,  18.552602
  4/5,  18.382657
  5/5,  18.412368
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  18.222847
  2/5,  18.457573
  3/5,  18.228174
  4/5,  18.211847
  5/5,  18.203187
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  18.173565
  2/5,  18.198338
  3/5,  18.373595
  4/5,  18.163216
  5/5,  18.175796
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  3.728514
  2/5,  3.727977
  3/5,  3.736246
  4/5,  3.735959
  5/5,  3.733255
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.721593
  2/5,  3.695853
  3/5,  3.724205
  4/5,  3.696307
  5/5,  3.710058
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  2.443302
  2/5,  2.429904
  3/5,  2.431594
  4/5,  2.441242
  5/5,  2.436432
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  8.418351
  2/5,  8.418152
  3/5,  8.409134
  4/5,  8.426321
  5/5,  8.419065
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.48173
  2/5,  5.480641
  3/5,  5.470367
  4/5,  5.512168
  5/5,  5.474672
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  3.79744
  2/5,  3.781405
  3/5,  3.794237
  4/5,  3.802737
  5/5,  3.79668
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  5.232433
  2/5,  5.177103
  3/5,  5.076031
  4/5,  5.141813
  5/5,  5.180931
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.464155
  2/5,  1.46606
  3/5,  1.472122
  4/5,  1.463615
  5/5,  1.463037
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.439093
  2/5,  1.4306
  3/5,  1.436531
  4/5,  1.4342
  5/5,  1.439142
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  6.714964
  2/5,  6.692882
  3/5,  6.709247
  4/5,  6.704449
  5/5,  6.681314
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.679353
  2/5,  5.712243
  3/5,  5.7073
  4/5,  5.697406
  5/5,  5.699106
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.266405
  2/5,  5.259596
  3/5,  5.299125
  4/5,  5.28379
  5/5,  5.262619
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.84499
  2/5,  2.837576
  3/5,  2.83231
  4/5,  2.843949
  5/5,  2.83208
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.628764
  2/5,  2.629998
  3/5,  2.634206
  4/5,  2.598815
  5/5,  2.600434
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.332705
  2/5,  2.334519
  3/5,  2.352607
  4/5,  2.354486
  5/5,  2.354537
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  5.344034
  2/5,  5.331968
  3/5,  6.288636
  4/5,  6.067856
  5/5,  5.568028
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.452899
  2/5,  5.410438
  3/5,  5.408779
  4/5,  5.496598
  5/5,  5.439625
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.5981
  2/5,  5.67546
  3/5,  5.510062
  4/5,  5.31924
  5/5,  5.237592
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.276584
  2/5,  0.276568
  3/5,  0.276192
  4/5,  0.276921
  5/5,  0.275836
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.27344
  2/5,  0.273577
  3/5,  0.276418
  4/5,  0.273716
  5/5,  0.271693
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.260589
  2/5,  0.25935
  3/5,  0.259432
  4/5,  0.261706
  5/5,  0.258715
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.298316
  2/5,  0.296391
  3/5,  0.297336
  4/5,  0.295549
  5/5,  0.297639
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.290521
  2/5,  0.291075
  3/5,  0.290862
  4/5,  0.290442
  5/5,  0.28838
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.26183
  2/5,  0.260744
  3/5,  0.260255
  4/5,  0.260621
  5/5,  0.261944
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  2.490318
  2/5,  2.485202
  3/5,  2.493209
  4/5,  2.495889
  5/5,  2.488989
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.577316
  2/5,  2.554758
  3/5,  2.59634
  4/5,  2.564215
  5/5,  2.584214
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  1.975841
  2/5,  1.979827
  3/5,  1.982705
  4/5,  1.975807
  5/5,  1.98096
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  5.936652
  2/5,  6.003232
  3/5,  5.97805
  4/5,  5.921539
  5/5,  5.920354
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.968432
  2/5,  3.97184
  3/5,  3.981692
  4/5,  3.992539
  5/5,  3.991619
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.100351
  2/5,  3.101691
  3/5,  3.13517
  4/5,  3.114539
  5/5,  3.108982
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  3.005123
  2/5,  2.985482
  3/5,  2.993178
  4/5,  2.989815
  5/5,  2.991792
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.001953
  2/5,  2.00976
  3/5,  2.020349
  4/5,  1.996301
  5/5,  1.999282
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.899984
  2/5,  1.89396
  3/5,  1.888165
  4/5,  1.898559
  5/5,  1.888484
}
