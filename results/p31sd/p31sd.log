Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/p31sd/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-og_5ps.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  7.301883
  2/5,  7.30542
  3/5,  7.324221
  4/5,  7.314656
  5/5,  7.301884
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  6.678463
  2/5,  6.693373
  3/5,  6.673502
  4/5,  6.676021
  5/5,  6.678624
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  6.559322
  2/5,  6.571802
  3/5,  6.558628
  4/5,  6.562448
  5/5,  6.556373
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  18.418276
  2/5,  18.414972
  3/5,  18.423825
  4/5,  18.418291
  5/5,  18.416659
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  18.222883
  2/5,  18.198547
  3/5,  18.192933
  4/5,  18.227857
  5/5,  18.24503
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  18.159202
  2/5,  18.166449
  3/5,  18.164227
  4/5,  18.165716
  5/5,  18.187003
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  3.735683
  2/5,  3.726588
  3/5,  3.73077
  4/5,  3.729356
  5/5,  3.747369
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.70287
  2/5,  3.685664
  3/5,  3.685315
  4/5,  3.691156
  5/5,  3.706325
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  2.426745
  2/5,  2.436421
  3/5,  2.431073
  4/5,  2.426703
  5/5,  2.428836
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  8.577966
  2/5,  8.827928
  3/5,  11.530131
  4/5,  11.331543
  5/5,  11.611537
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  7.781689
  2/5,  7.764809
  3/5,  8.950047
  4/5,  7.865114
  5/5,  7.826
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.072606
  2/5,  5.093533
  3/5,  5.090759
  4/5,  5.100613
  5/5,  5.130554
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  8.252871
  2/5,  7.642819
  3/5,  7.472403
  4/5,  7.895257
  5/5,  7.532815
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.891606
  2/5,  1.907788
  3/5,  1.894335
  4/5,  1.954235
  5/5,  1.900786
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.816486
  2/5,  1.866578
  3/5,  1.815937
  4/5,  1.835022
  5/5,  1.789112
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  9.331328
  2/5,  9.466795
  3/5,  9.428052
  4/5,  9.294548
  5/5,  10.047236
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  8.683249
  2/5,  8.102792
  3/5,  8.658359
  4/5,  7.847217
  5/5,  8.137295
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  7.614563
  2/5,  7.420743
  3/5,  7.490911
  4/5,  7.616987
  5/5,  5.842224
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.837495
  2/5,  2.838628
  3/5,  2.849293
  4/5,  2.835984
  5/5,  2.838739
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.607237
  2/5,  2.607083
  3/5,  2.606216
  4/5,  2.600307
  5/5,  2.611872
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.364271
  2/5,  2.34958
  3/5,  2.370286
  4/5,  2.383818
  5/5,  2.334433
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  5.449214
  2/5,  5.383816
  3/5,  5.38387
  4/5,  5.381169
  5/5,  5.393184
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.432609
  2/5,  5.430954
  3/5,  5.428392
  4/5,  5.42119
  5/5,  5.428072
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.230379
  2/5,  5.243101
  3/5,  5.238565
  4/5,  5.25714
  5/5,  5.241559
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.284088
  2/5,  0.284672
  3/5,  0.285904
  4/5,  0.284181
  5/5,  0.285394
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.274833
  2/5,  0.272074
  3/5,  0.271236
  4/5,  0.271769
  5/5,  0.283427
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.259149
  2/5,  0.258427
  3/5,  0.257851
  4/5,  0.25713
  5/5,  0.259314
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.304703
  2/5,  0.30402
  3/5,  0.304347
  4/5,  0.304578
  5/5,  0.308563
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.288151
  2/5,  0.28974
  3/5,  0.288558
  4/5,  0.287751
  5/5,  0.288
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.259293
  2/5,  0.259411
  3/5,  0.259218
  4/5,  0.26005
  5/5,  0.258711
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  2.488281
  2/5,  2.48498
  3/5,  2.490287
  4/5,  2.487308
  5/5,  2.48966
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.563338
  2/5,  2.567862
  3/5,  2.585087
  4/5,  2.588383
  5/5,  2.576947
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  1.978385
  2/5,  1.986928
  3/5,  1.984598
  4/5,  1.977333
  5/5,  1.982134
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  5.876182
  2/5,  5.877326
  3/5,  5.871261
  4/5,  5.879529
  5/5,  5.871511
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.963737
  2/5,  3.989008
  3/5,  3.967607
  4/5,  3.969757
  5/5,  3.970861
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.105913
  2/5,  3.111347
  3/5,  3.130751
  4/5,  3.11175
  5/5,  3.108191
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  3.239973
  2/5,  3.244041
  3/5,  3.234609
  4/5,  3.241813
  5/5,  3.237664
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.995736
  2/5,  1.996906
  3/5,  1.998473
  4/5,  2.00596
  5/5,  2.010466
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.901587
  2/5,  1.901079
  3/5,  1.917561
  4/5,  1.914916
  5/5,  1.907834
}
