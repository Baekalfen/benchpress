Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers01/9633e6d168a33781e0d29e95962a7623e60cbf04/benchmark-itm5WR.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.002546
  2/5,  5.997748
  3/5,  6.000014
  4/5,  6.009157
  5/5,  6.008867
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.624372
  2/5,  5.604164
  3/5,  5.602803
  4/5,  5.61244
  5/5,  5.612454
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.636203
  2/5,  5.634001
  3/5,  5.715303
  4/5,  5.633285
  5/5,  5.713879
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.562428
  2/5,  16.564268
  3/5,  16.563246
  4/5,  16.60247
  5/5,  16.561132
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.480298
  2/5,  16.47314
  3/5,  16.473162
  4/5,  16.479014
  5/5,  16.473483
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.565773
  2/5,  16.555617
  3/5,  16.567416
  4/5,  16.571382
  5/5,  16.560806
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.61089
  2/5,  2.608282
  3/5,  2.610811
  4/5,  2.603803
  5/5,  2.608347
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.324966
  2/5,  3.326782
  3/5,  3.321575
  4/5,  3.322965
  5/5,  3.317206
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.098707
  2/5,  3.092417
  3/5,  3.09516
  4/5,  3.103348
  5/5,  3.088338
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.85508
  2/5,  6.846639
  3/5,  6.868559
  4/5,  6.851424
  5/5,  6.855406
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.056283
  2/5,  5.056723
  3/5,  5.057903
  4/5,  5.058472
  5/5,  5.05444
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.773712
  2/5,  4.764962
  3/5,  4.760833
  4/5,  4.753971
  5/5,  4.777135
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.742792
  2/5,  3.768325
  3/5,  3.744918
  4/5,  3.76778
  5/5,  3.75236
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.748615
  2/5,  1.750755
  3/5,  1.747023
  4/5,  1.750333
  5/5,  1.749531
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.733311
  2/5,  1.736235
  3/5,  1.734639
  4/5,  1.733914
  5/5,  1.732815
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.385919
  2/5,  5.381585
  3/5,  5.380456
  4/5,  5.383914
  5/5,  5.38731
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.571244
  2/5,  4.571554
  3/5,  4.562644
  4/5,  4.570134
  5/5,  4.573134
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.556395
  2/5,  4.565474
  3/5,  4.557001
  4/5,  4.559891
  5/5,  4.552882
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.019846
  2/5,  2.015582
  3/5,  2.020459
  4/5,  2.021396
  5/5,  2.019298
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.196837
  2/5,  2.189521
  3/5,  2.193653
  4/5,  2.190258
  5/5,  2.189536
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.158901
  2/5,  2.158619
  3/5,  2.154442
  4/5,  2.156737
  5/5,  2.154263
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.828587
  2/5,  4.827292
  3/5,  4.824071
  4/5,  4.825185
  5/5,  4.822625
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.288734
  2/5,  5.29705
  3/5,  5.306324
  4/5,  5.295645
  5/5,  5.307161
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.275594
  2/5,  5.278099
  3/5,  5.275191
  4/5,  5.273063
  5/5,  5.269863
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.245882
  2/5,  0.251149
  3/5,  0.250752
  4/5,  0.252278
  5/5,  0.252053
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.279461
  2/5,  0.28191
  3/5,  0.282631
  4/5,  0.283224
  5/5,  0.281532
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.282957
  2/5,  0.282559
  3/5,  0.283164
  4/5,  0.283297
  5/5,  0.282928
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.261129
  2/5,  0.260241
  3/5,  0.259541
  4/5,  0.25782
  5/5,  0.259719
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.289627
  2/5,  0.287665
  3/5,  0.287158
  4/5,  0.286845
  5/5,  0.287375
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.285347
  2/5,  0.285197
  3/5,  0.285425
  4/5,  0.286075
  5/5,  0.286866
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.908804
  2/5,  1.903731
  3/5,  1.906859
  4/5,  1.90439
  5/5,  1.908182
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.293381
  2/5,  2.297446
  3/5,  2.293381
  4/5,  2.294039
  5/5,  2.292351
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.19979
  2/5,  2.202326
  3/5,  2.200708
  4/5,  2.201781
  5/5,  2.198351
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.447797
  2/5,  4.447396
  3/5,  4.439419
  4/5,  4.455368
  5/5,  4.449456
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.188778
  2/5,  3.191231
  3/5,  3.188981
  4/5,  3.188206
  5/5,  3.192237
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.157651
  2/5,  3.157684
  3/5,  3.158717
  4/5,  3.154982
  5/5,  3.158653
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.225288
  2/5,  2.216723
  3/5,  2.215593
  4/5,  2.217952
  5/5,  2.216225
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.51282
  2/5,  1.511419
  3/5,  1.512279
  4/5,  1.510649
  5/5,  1.519157
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.598857
  2/5,  1.59099
  3/5,  1.592835
  4/5,  1.591049
  5/5,  1.592713
}
