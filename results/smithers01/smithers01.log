Running benchmark suite 'mcache'; results are written to: /home/safl/buildbot/benchpress/results/smithers01/9458afc548a682bda289f5ea704cdc4ef34e1527/benchmark-2oB1dy.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.072285
  2/5,  6.069682
  3/5,  6.316377
  4/5,  6.077825
  5/5,  6.078474
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.661833
  2/5,  5.630848
  3/5,  5.631716
  4/5,  5.630807
  5/5,  5.627285
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.660885
  2/5,  5.660213
  3/5,  5.659955
  4/5,  5.654721
  5/5,  5.665099
}
{ Black Scholes - score_mcache_1 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  6.511989
  2/5,  6.517821
  3/5,  6.51799
  4/5,  6.513691
  5/5,  6.511372
}
{ Black Scholes - score_mcache_2 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  6.224196
  2/5,  6.167927
  3/5,  6.173883
  4/5,  6.161574
  5/5,  6.168717
}
{ Black Scholes - score_mcache_3 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.950377
  2/5,  5.955997
  3/5,  5.951914
  4/5,  5.95768
  5/5,  5.952065
}
{ Black Scholes - score_mcache_4 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.811334
  2/5,  5.824398
  3/5,  5.816946
  4/5,  5.806349
  5/5,  5.815279
}
{ Black Scholes - score_mcache_5 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.779611
  2/5,  5.779738
  3/5,  5.789995
  4/5,  5.779891
  5/5,  5.787266
}
{ Black Scholes - score_mcache_6 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.739105
  2/5,  5.744022
  3/5,  5.759256
  4/5,  5.754605
  5/5,  5.744599
}
{ Black Scholes - score_mcache_7 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.730943
  2/5,  5.725647
  3/5,  5.72914
  4/5,  5.720761
  5/5,  5.725359
}
{ Black Scholes - score_mcache_8 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.690692
  2/5,  5.721571
  3/5,  5.686928
  4/5,  5.68644
  5/5,  5.693565
}
{ Black Scholes - score_mcache_9 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.678395
  2/5,  5.70447
  3/5,  5.677439
  4/5,  5.672879
  5/5,  5.682959
}
{ Black Scholes - score_mcache_10 ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.658733
  2/5,  5.652099
  3/5,  5.660351
  4/5,  5.65193
  5/5,  5.654954
}
{ Black Scholes - simple_mcache_1 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.992721
  2/5,  5.996444
  3/5,  5.992346
  4/5,  5.999994
  5/5,  5.996038
}
{ Black Scholes - simple_mcache_2 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.773555
  2/5,  5.767781
  3/5,  5.774591
  4/5,  5.764112
  5/5,  5.759074
}
{ Black Scholes - simple_mcache_3 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.749106
  2/5,  5.746679
  3/5,  5.752336
  4/5,  5.742555
  5/5,  5.751651
}
{ Black Scholes - simple_mcache_4 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.731175
  2/5,  5.725853
  3/5,  5.728835
  4/5,  5.726682
  5/5,  5.720791
}
{ Black Scholes - simple_mcache_5 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.696152
  2/5,  5.698772
  3/5,  5.702846
  4/5,  5.683527
  5/5,  5.701971
}
{ Black Scholes - simple_mcache_6 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.670952
  2/5,  5.665068
  3/5,  5.665978
  4/5,  5.667106
  5/5,  5.6653
}
{ Black Scholes - simple_mcache_7 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.660368
  2/5,  5.653846
  3/5,  5.651537
  4/5,  5.649457
  5/5,  5.649471
}
{ Black Scholes - simple_mcache_8 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.629936
  2/5,  5.643576
  3/5,  5.648933
  4/5,  5.640093
  5/5,  5.638717
}
{ Black Scholes - simple_mcache_9 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.619749
  2/5,  5.613419
  3/5,  5.622099
  4/5,  5.618934
  5/5,  5.612014
}
{ Black Scholes - simple_mcache_10 ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.633583
  2/5,  5.614826
  3/5,  5.658672
  4/5,  5.626508
  5/5,  5.626132
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.603058
  2/5,  16.60031
  3/5,  16.601548
  4/5,  16.597338
  5/5,  16.604255
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.496086
  2/5,  16.548873
  3/5,  16.495643
  4/5,  16.51791
  5/5,  16.500303
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.601493
  2/5,  16.586351
  3/5,  16.58944
  4/5,  16.596144
  5/5,  16.588365
}
{ Cache Synth - score_mcache_1 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.695777
  2/5,  16.688095
  3/5,  16.695813
  4/5,  16.693261
  5/5,  16.687671
}
{ Cache Synth - score_mcache_2 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.660803
  2/5,  16.655404
  3/5,  16.668322
  4/5,  16.658291
  5/5,  16.666151
}
{ Cache Synth - score_mcache_3 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.630262
  2/5,  16.635278
  3/5,  16.62774
  4/5,  16.63163
  5/5,  16.633838
}
{ Cache Synth - score_mcache_4 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.593752
  2/5,  16.60122
  3/5,  16.598028
  4/5,  16.602635
  5/5,  16.594416
}
{ Cache Synth - score_mcache_5 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.59113
  2/5,  16.597238
  3/5,  16.596485
  4/5,  16.593797
  5/5,  16.589266
}
{ Cache Synth - score_mcache_6 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.595513
  2/5,  16.586446
  3/5,  16.613672
  4/5,  16.59027
  5/5,  16.5895
}
{ Cache Synth - score_mcache_7 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.587692
  2/5,  16.586541
  3/5,  16.593376
  4/5,  16.593474
  5/5,  16.600249
}
{ Cache Synth - score_mcache_8 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.585693
  2/5,  16.593607
  3/5,  16.586147
  4/5,  16.584285
  5/5,  16.591259
}
{ Cache Synth - score_mcache_9 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.743354
  2/5,  16.590675
  3/5,  16.58866
  4/5,  16.627764
  5/5,  16.589208
}
{ Cache Synth - score_mcache_10 ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.590764
  2/5,  16.593319
  3/5,  16.58581
  4/5,  16.595949
  5/5,  16.59076
}
{ Cache Synth - simple_mcache_1 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.505868
  2/5,  16.499809
  3/5,  16.500439
  4/5,  16.505118
  5/5,  16.496335
}
{ Cache Synth - simple_mcache_2 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.508621
  2/5,  16.497606
  3/5,  16.501802
  4/5,  16.505805
  5/5,  16.501913
}
{ Cache Synth - simple_mcache_3 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.497214
  2/5,  16.499827
  3/5,  16.498196
  4/5,  16.49593
  5/5,  16.515266
}
{ Cache Synth - simple_mcache_4 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.533106
  2/5,  16.538277
  3/5,  16.49893
  4/5,  16.500833
  5/5,  16.496208
}
{ Cache Synth - simple_mcache_5 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.498918
  2/5,  16.510076
  3/5,  16.499008
  4/5,  16.650897
  5/5,  16.500453
}
{ Cache Synth - simple_mcache_6 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.503832
  2/5,  16.493505
  3/5,  16.502632
  4/5,  16.503905
  5/5,  16.49928
}
{ Cache Synth - simple_mcache_7 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.505478
  2/5,  16.497961
  3/5,  16.513107
  4/5,  16.496525
  5/5,  16.505462
}
{ Cache Synth - simple_mcache_8 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.504375
  2/5,  16.557639
  3/5,  16.51017
  4/5,  16.65285
  5/5,  16.50138
}
{ Cache Synth - simple_mcache_9 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.498697
  2/5,  16.514816
  3/5,  16.495944
  4/5,  16.504098
  5/5,  16.49565
}
{ Cache Synth - simple_mcache_10 ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.498317
  2/5,  16.50405
  3/5,  16.507708
  4/5,  16.502643
  5/5,  16.500681
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.647747
  2/5,  2.645018
  3/5,  2.651616
  4/5,  2.648712
  5/5,  2.651756
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.355163
  2/5,  3.359123
  3/5,  3.357742
  4/5,  3.363011
  5/5,  3.355764
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.117216
  2/5,  3.11429
  3/5,  3.116806
  4/5,  3.11159
  5/5,  3.118542
}
{ Jacobi Iterative - score_mcache_1 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.117784
  2/5,  3.110951
  3/5,  3.117359
  4/5,  3.115039
  5/5,  3.120238
}
{ Jacobi Iterative - score_mcache_2 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.118119
  2/5,  3.117886
  3/5,  3.125098
  4/5,  3.117595
  5/5,  3.111455
}
{ Jacobi Iterative - score_mcache_3 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.11561
  2/5,  3.118481
  3/5,  3.113213
  4/5,  3.118267
  5/5,  3.117623
}
{ Jacobi Iterative - score_mcache_4 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.127201
  2/5,  3.116976
  3/5,  3.113401
  4/5,  3.124759
  5/5,  3.126614
}
{ Jacobi Iterative - score_mcache_5 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.117921
  2/5,  3.115412
  3/5,  3.111981
  4/5,  3.114513
  5/5,  3.121659
}
{ Jacobi Iterative - score_mcache_6 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.119859
  2/5,  3.11931
  3/5,  3.11823
  4/5,  3.118681
  5/5,  3.113763
}
{ Jacobi Iterative - score_mcache_7 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.118029
  2/5,  3.11719
  3/5,  3.119577
  4/5,  3.117328
  5/5,  3.112086
}
{ Jacobi Iterative - score_mcache_8 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.11953
  2/5,  3.119263
  3/5,  3.116956
  4/5,  3.115299
  5/5,  3.116289
}
{ Jacobi Iterative - score_mcache_9 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.101677
  2/5,  3.11327
  3/5,  3.113433
  4/5,  3.123903
  5/5,  3.11799
}
{ Jacobi Iterative - score_mcache_10 ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.115974
  2/5,  3.114831
  3/5,  3.116677
  4/5,  3.116198
  5/5,  3.115632
}
{ Jacobi Iterative - simple_mcache_1 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.358149
  2/5,  3.374641
  3/5,  3.355476
  4/5,  3.358917
  5/5,  3.355331
}
{ Jacobi Iterative - simple_mcache_2 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.363234
  2/5,  3.35927
  3/5,  3.3603
  4/5,  3.362552
  5/5,  3.359914
}
{ Jacobi Iterative - simple_mcache_3 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.357537
  2/5,  3.359921
  3/5,  3.356553
  4/5,  3.358518
  5/5,  3.357443
}
{ Jacobi Iterative - simple_mcache_4 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.361888
  2/5,  3.354261
  3/5,  3.362968
  4/5,  3.362229
  5/5,  3.362968
}
{ Jacobi Iterative - simple_mcache_5 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.360988
  2/5,  3.36304
  3/5,  3.360738
  4/5,  3.363923
  5/5,  3.358704
}
{ Jacobi Iterative - simple_mcache_6 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.36136
  2/5,  3.359554
  3/5,  3.358034
  4/5,  3.35928
  5/5,  3.363545
}
{ Jacobi Iterative - simple_mcache_7 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.359062
  2/5,  3.359678
  3/5,  3.360446
  4/5,  3.365883
  5/5,  3.358972
}
{ Jacobi Iterative - simple_mcache_8 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.359449
  2/5,  3.356245
  3/5,  3.363116
  4/5,  3.357586
  5/5,  3.362555
}
{ Jacobi Iterative - simple_mcache_9 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.357012
  2/5,  3.362754
  3/5,  3.359928
  4/5,  3.37228
  5/5,  3.350471
}
{ Jacobi Iterative - simple_mcache_10 ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.361519
  2/5,  3.358894
  3/5,  3.363668
  4/5,  3.359949
  5/5,  3.360781
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.940597
  2/5,  6.967497
  3/5,  6.964224
  4/5,  6.976009
  5/5,  6.950129
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.120075
  2/5,  5.117346
  3/5,  5.116578
  4/5,  5.114252
  5/5,  5.12003
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.779398
  2/5,  4.793545
  3/5,  4.791068
  4/5,  4.788141
  5/5,  4.786968
}
{ Jacobi Iterative - Reduce - score_mcache_1 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.44474
  2/5,  5.450196
  3/5,  5.459143
  4/5,  5.435053
  5/5,  5.465182
}
{ Jacobi Iterative - Reduce - score_mcache_2 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.064988
  2/5,  5.081295
  3/5,  5.085638
  4/5,  5.085088
  5/5,  5.068606
}
{ Jacobi Iterative - Reduce - score_mcache_3 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.803123
  2/5,  4.79942
  3/5,  4.803095
  4/5,  4.777024
  5/5,  4.801135
}
{ Jacobi Iterative - Reduce - score_mcache_4 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.795083
  2/5,  4.798119
  3/5,  4.795542
  4/5,  4.780935
  5/5,  4.798189
}
{ Jacobi Iterative - Reduce - score_mcache_5 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.793615
  2/5,  4.779367
  3/5,  4.785151
  4/5,  4.805612
  5/5,  4.79246
}
{ Jacobi Iterative - Reduce - score_mcache_6 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.791787
  2/5,  4.797842
  3/5,  4.798546
  4/5,  4.800671
  5/5,  4.799545
}
{ Jacobi Iterative - Reduce - score_mcache_7 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.793506
  2/5,  4.758572
  3/5,  4.784275
  4/5,  4.79677
  5/5,  4.804688
}
{ Jacobi Iterative - Reduce - score_mcache_8 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.789221
  2/5,  4.78725
  3/5,  4.810428
  4/5,  4.793852
  5/5,  4.789959
}
{ Jacobi Iterative - Reduce - score_mcache_9 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.792226
  2/5,  4.787618
  3/5,  4.805658
  4/5,  4.802502
  5/5,  4.785375
}
{ Jacobi Iterative - Reduce - score_mcache_10 ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.79948
  2/5,  4.784397
  3/5,  4.792367
  4/5,  4.795704
  5/5,  4.805083
}
{ Jacobi Iterative - Reduce - simple_mcache_1 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.70343
  2/5,  5.697245
  3/5,  5.700143
  4/5,  5.690877
  5/5,  5.693281
}
{ Jacobi Iterative - Reduce - simple_mcache_2 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.348244
  2/5,  5.361528
  3/5,  5.354538
  4/5,  5.352503
  5/5,  5.353695
}
{ Jacobi Iterative - Reduce - simple_mcache_3 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.119509
  2/5,  5.118769
  3/5,  5.119069
  4/5,  5.120533
  5/5,  5.117586
}
{ Jacobi Iterative - Reduce - simple_mcache_4 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.117356
  2/5,  5.117016
  3/5,  5.115768
  4/5,  5.113104
  5/5,  5.121534
}
{ Jacobi Iterative - Reduce - simple_mcache_5 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.115041
  2/5,  5.11898
  3/5,  5.117696
  4/5,  5.114067
  5/5,  5.117325
}
{ Jacobi Iterative - Reduce - simple_mcache_6 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.115148
  2/5,  5.115075
  3/5,  5.116981
  4/5,  5.115123
  5/5,  5.115213
}
{ Jacobi Iterative - Reduce - simple_mcache_7 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.117818
  2/5,  5.116579
  3/5,  5.124887
  4/5,  5.123635
  5/5,  5.113531
}
{ Jacobi Iterative - Reduce - simple_mcache_8 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.114614
  2/5,  5.11886
  3/5,  5.117379
  4/5,  5.11562
  5/5,  5.116009
}
{ Jacobi Iterative - Reduce - simple_mcache_9 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.114786
  2/5,  5.114905
  3/5,  5.114896
  4/5,  5.118329
  5/5,  5.118579
}
{ Jacobi Iterative - Reduce - simple_mcache_10 ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.114743
  2/5,  5.117047
  3/5,  5.1238
  4/5,  5.114632
  5/5,  5.116591
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.786519
  2/5,  3.785031
  3/5,  3.791626
  4/5,  3.791826
  5/5,  3.791759
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.779595
  2/5,  1.773959
  3/5,  1.772131
  4/5,  1.775277
  5/5,  1.774847
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.762213
  2/5,  1.757514
  3/5,  1.760727
  4/5,  1.767358
  5/5,  1.759809
}
{ kNN - score_mcache_1 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.869637
  2/5,  1.866525
  3/5,  1.867521
  4/5,  1.869055
  5/5,  1.867307
}
{ kNN - score_mcache_2 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.867867
  2/5,  1.864591
  3/5,  1.866138
  4/5,  1.868379
  5/5,  1.869411
}
{ kNN - score_mcache_3 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.811689
  2/5,  1.812503
  3/5,  1.810843
  4/5,  1.814751
  5/5,  1.813768
}
{ kNN - score_mcache_4 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.761134
  2/5,  1.757776
  3/5,  1.763844
  4/5,  1.764146
  5/5,  1.761671
}
{ kNN - score_mcache_5 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.765241
  2/5,  1.761725
  3/5,  1.759037
  4/5,  1.762342
  5/5,  1.762946
}
{ kNN - score_mcache_6 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.765158
  2/5,  1.762109
  3/5,  1.76417
  4/5,  1.765692
  5/5,  1.766832
}
{ kNN - score_mcache_7 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.767398
  2/5,  1.764919
  3/5,  1.765887
  4/5,  1.763729
  5/5,  1.764455
}
{ kNN - score_mcache_8 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.763787
  2/5,  1.762343
  3/5,  1.762898
  4/5,  1.766962
  5/5,  1.767108
}
{ kNN - score_mcache_9 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.766861
  2/5,  1.760611
  3/5,  1.763215
  4/5,  1.763477
  5/5,  1.765055
}
{ kNN - score_mcache_10 ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.760276
  2/5,  1.762044
  3/5,  1.762025
  4/5,  1.760965
  5/5,  1.762706
}
{ kNN - simple_mcache_1 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.874433
  2/5,  1.874147
  3/5,  1.869935
  4/5,  1.869613
  5/5,  1.868213
}
{ kNN - simple_mcache_2 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.87222
  2/5,  1.874279
  3/5,  1.871581
  4/5,  1.872184
  5/5,  1.876646
}
{ kNN - simple_mcache_3 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.824689
  2/5,  1.82777
  3/5,  1.821861
  4/5,  1.822545
  5/5,  1.824462
}
{ kNN - simple_mcache_4 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.777822
  2/5,  1.775646
  3/5,  1.770985
  4/5,  1.77435
  5/5,  1.782959
}
{ kNN - simple_mcache_5 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.775627
  2/5,  1.775856
  3/5,  1.772522
  4/5,  1.77971
  5/5,  1.783879
}
{ kNN - simple_mcache_6 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.775713
  2/5,  1.776425
  3/5,  1.776486
  4/5,  1.777287
  5/5,  1.7761
}
{ kNN - simple_mcache_7 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.778413
  2/5,  1.776301
  3/5,  1.776333
  4/5,  1.787242
  5/5,  1.775212
}
{ kNN - simple_mcache_8 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.779896
  2/5,  1.794906
  3/5,  1.775471
  4/5,  1.776453
  5/5,  1.773868
}
{ kNN - simple_mcache_9 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.776682
  2/5,  1.780277
  3/5,  1.774242
  4/5,  1.776036
  5/5,  1.790111
}
{ kNN - simple_mcache_10 ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.776996
  2/5,  1.777221
  3/5,  1.779558
  4/5,  1.774775
  5/5,  1.777082
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.510212
  2/5,  5.512287
  3/5,  5.506904
  4/5,  5.514543
  5/5,  5.506349
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.60461
  2/5,  4.61183
  3/5,  4.602794
  4/5,  4.609146
  5/5,  4.621932
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.60051
  2/5,  4.604069
  3/5,  4.601126
  4/5,  4.592544
  5/5,  4.602648
}
{ Lattice Boltzmann 2D - score_mcache_1 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  6.234261
  2/5,  6.219994
  3/5,  6.247149
  4/5,  6.255296
  5/5,  6.224658
}
{ Lattice Boltzmann 2D - score_mcache_2 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.761599
  2/5,  5.765781
  3/5,  5.759525
  4/5,  5.769654
  5/5,  5.75988
}
{ Lattice Boltzmann 2D - score_mcache_3 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.230032
  2/5,  5.232685
  3/5,  5.233215
  4/5,  5.225319
  5/5,  5.224746
}
{ Lattice Boltzmann 2D - score_mcache_4 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.056867
  2/5,  5.054982
  3/5,  5.072227
  4/5,  5.061178
  5/5,  5.056946
}
{ Lattice Boltzmann 2D - score_mcache_5 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.005143
  2/5,  5.016368
  3/5,  5.002855
  4/5,  5.016696
  5/5,  5.003373
}
{ Lattice Boltzmann 2D - score_mcache_6 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.011059
  2/5,  5.016153
  3/5,  5.013148
  4/5,  5.01201
  5/5,  5.009951
}
{ Lattice Boltzmann 2D - score_mcache_7 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.874595
  2/5,  4.870194
  3/5,  4.870408
  4/5,  4.867787
  5/5,  4.867406
}
{ Lattice Boltzmann 2D - score_mcache_8 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.827032
  2/5,  4.826174
  3/5,  4.847186
  4/5,  4.827274
  5/5,  4.827814
}
{ Lattice Boltzmann 2D - score_mcache_9 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.733114
  2/5,  4.735893
  3/5,  4.739613
  4/5,  4.736777
  5/5,  4.737058
}
{ Lattice Boltzmann 2D - score_mcache_10 ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.596137
  2/5,  4.594995
  3/5,  4.601738
  4/5,  4.597885
  5/5,  4.594701
}
{ Lattice Boltzmann 2D - simple_mcache_1 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.520272
  2/5,  5.507769
  3/5,  5.510192
  4/5,  5.505987
  5/5,  5.508107
}
{ Lattice Boltzmann 2D - simple_mcache_2 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  5.029424
  2/5,  5.030142
  3/5,  5.033339
  4/5,  5.029191
  5/5,  5.034619
}
{ Lattice Boltzmann 2D - simple_mcache_3 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.913285
  2/5,  4.909457
  3/5,  4.919037
  4/5,  4.901999
  5/5,  4.897675
}
{ Lattice Boltzmann 2D - simple_mcache_4 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.781304
  2/5,  4.776414
  3/5,  4.775786
  4/5,  4.781363
  5/5,  4.776937
}
{ Lattice Boltzmann 2D - simple_mcache_5 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.736294
  2/5,  4.73695
  3/5,  4.733419
  4/5,  4.74
  5/5,  4.74571
}
{ Lattice Boltzmann 2D - simple_mcache_6 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.719448
  2/5,  4.719738
  3/5,  4.714534
  4/5,  4.719134
  5/5,  4.723535
}
{ Lattice Boltzmann 2D - simple_mcache_7 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.716267
  2/5,  4.704874
  3/5,  4.709967
  4/5,  4.705149
  5/5,  4.706927
}
{ Lattice Boltzmann 2D - simple_mcache_8 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.67516
  2/5,  4.681074
  3/5,  4.675757
  4/5,  4.67677
  5/5,  4.691926
}
{ Lattice Boltzmann 2D - simple_mcache_9 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.690393
  2/5,  4.672007
  3/5,  4.672743
  4/5,  4.673019
  5/5,  4.672651
}
{ Lattice Boltzmann 2D - simple_mcache_10 ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.59716
  2/5,  4.612255
  3/5,  4.607059
  4/5,  4.609403
  5/5,  4.60509
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.062647
  2/5,  2.062127
  3/5,  2.05957
  4/5,  2.061663
  5/5,  2.064374
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.206272
  2/5,  2.211042
  3/5,  2.212519
  4/5,  2.207068
  5/5,  2.212775
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.1758
  2/5,  2.177262
  3/5,  2.181894
  4/5,  2.178388
  5/5,  2.177861
}
{ Lattice Boltzmann 3D - score_mcache_1 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.672189
  2/5,  2.677561
  3/5,  2.67686
  4/5,  2.672033
  5/5,  2.673565
}
{ Lattice Boltzmann 3D - score_mcache_2 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.491737
  2/5,  2.487359
  3/5,  2.488717
  4/5,  2.48577
  5/5,  2.487299
}
{ Lattice Boltzmann 3D - score_mcache_3 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.376454
  2/5,  2.372045
  3/5,  2.376053
  4/5,  2.375918
  5/5,  2.372489
}
{ Lattice Boltzmann 3D - score_mcache_4 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.278494
  2/5,  2.27902
  3/5,  2.278988
  4/5,  2.284157
  5/5,  2.280427
}
{ Lattice Boltzmann 3D - score_mcache_5 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.212577
  2/5,  2.213141
  3/5,  2.21684
  4/5,  2.214277
  5/5,  2.21743
}
{ Lattice Boltzmann 3D - score_mcache_6 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.207957
  2/5,  2.20763
  3/5,  2.207451
  4/5,  2.206243
  5/5,  2.207127
}
{ Lattice Boltzmann 3D - score_mcache_7 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.190918
  2/5,  2.192618
  3/5,  2.190984
  4/5,  2.193701
  5/5,  2.18904
}
{ Lattice Boltzmann 3D - score_mcache_8 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.183409
  2/5,  2.182026
  3/5,  2.18466
  4/5,  2.189561
  5/5,  2.182545
}
{ Lattice Boltzmann 3D - score_mcache_9 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.181419
  2/5,  2.180588
  3/5,  2.182113
  4/5,  2.178106
  5/5,  2.181407
}
{ Lattice Boltzmann 3D - score_mcache_10 ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.177422
  2/5,  2.174816
  3/5,  2.173735
  4/5,  2.17406
  5/5,  2.174995
}
{ Lattice Boltzmann 3D - simple_mcache_1 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.376531
  2/5,  2.377328
  3/5,  2.380213
  4/5,  2.374543
  5/5,  2.381254
}
{ Lattice Boltzmann 3D - simple_mcache_2 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.301919
  2/5,  2.305949
  3/5,  2.303828
  4/5,  2.307439
  5/5,  2.307301
}
{ Lattice Boltzmann 3D - simple_mcache_3 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.287056
  2/5,  2.288467
  3/5,  2.282396
  4/5,  2.28188
  5/5,  2.28412
}
{ Lattice Boltzmann 3D - simple_mcache_4 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.249868
  2/5,  2.252789
  3/5,  2.250123
  4/5,  2.250705
  5/5,  2.249204
}
{ Lattice Boltzmann 3D - simple_mcache_5 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.223318
  2/5,  2.227276
  3/5,  2.226376
  4/5,  2.225303
  5/5,  2.227677
}
{ Lattice Boltzmann 3D - simple_mcache_6 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.215948
  2/5,  2.212452
  3/5,  2.212005
  4/5,  2.210713
  5/5,  2.210693
}
{ Lattice Boltzmann 3D - simple_mcache_7 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.207447
  2/5,  2.206792
  3/5,  2.210443
  4/5,  2.20776
  5/5,  2.211291
}
{ Lattice Boltzmann 3D - simple_mcache_8 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.204488
  2/5,  2.205826
  3/5,  2.210363
  4/5,  2.205363
  5/5,  2.207681
}
{ Lattice Boltzmann 3D - simple_mcache_9 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.209435
  2/5,  2.21149
  3/5,  2.20564
  4/5,  2.214303
  5/5,  2.209784
}
{ Lattice Boltzmann 3D - simple_mcache_10 ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.210034
  2/5,  2.206703
  3/5,  2.20487
  4/5,  2.207108
  5/5,  2.207616
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.854691
  2/5,  4.850486
  3/5,  4.855991
  4/5,  4.852398
  5/5,  4.84952
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.33425
  2/5,  5.328705
  3/5,  5.332785
  4/5,  5.346411
  5/5,  5.346894
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.301225
  2/5,  5.302782
  3/5,  5.300834
  4/5,  5.31279
  5/5,  5.308015
}
{ Monte Carlo PI - RIL - score_mcache_1 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.371046
  2/5,  5.363385
  3/5,  5.363574
  4/5,  5.361855
  5/5,  5.365884
}
{ Monte Carlo PI - RIL - score_mcache_2 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.372581
  2/5,  5.361804
  3/5,  5.363649
  4/5,  5.365502
  5/5,  5.366456
}
{ Monte Carlo PI - RIL - score_mcache_3 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.322896
  2/5,  5.32624
  3/5,  5.325437
  4/5,  5.322409
  5/5,  5.324881
}
{ Monte Carlo PI - RIL - score_mcache_4 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.325529
  2/5,  5.314972
  3/5,  5.316809
  4/5,  5.316171
  5/5,  5.312996
}
{ Monte Carlo PI - RIL - score_mcache_5 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.314372
  2/5,  5.309591
  3/5,  5.316248
  4/5,  5.314698
  5/5,  5.311025
}
{ Monte Carlo PI - RIL - score_mcache_6 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.319628
  2/5,  5.302497
  3/5,  5.324065
  4/5,  5.317313
  5/5,  5.318007
}
{ Monte Carlo PI - RIL - score_mcache_7 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.316329
  2/5,  5.315896
  3/5,  5.311745
  4/5,  5.313086
  5/5,  5.316457
}
{ Monte Carlo PI - RIL - score_mcache_8 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.31136
  2/5,  5.311203
  3/5,  5.312116
  4/5,  5.312566
  5/5,  5.310612
}
{ Monte Carlo PI - RIL - score_mcache_9 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.311132
  2/5,  5.307871
  3/5,  5.315133
  4/5,  5.309341
  5/5,  5.3061
}
{ Monte Carlo PI - RIL - score_mcache_10 ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.312527
  2/5,  5.303871
  3/5,  5.316471
  4/5,  5.300366
  5/5,  5.304083
}
{ Monte Carlo PI - RIL - simple_mcache_1 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.580651
  2/5,  5.582776
  3/5,  5.578557
  4/5,  5.580894
  5/5,  5.574844
}
{ Monte Carlo PI - RIL - simple_mcache_2 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.368018
  2/5,  5.380642
  3/5,  5.371547
  4/5,  5.378049
  5/5,  5.654201
}
{ Monte Carlo PI - RIL - simple_mcache_3 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.346049
  2/5,  5.343766
  3/5,  5.34236
  4/5,  5.34472
  5/5,  5.338403
}
{ Monte Carlo PI - RIL - simple_mcache_4 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.348473
  2/5,  5.338202
  3/5,  5.390681
  4/5,  5.340718
  5/5,  5.34248
}
{ Monte Carlo PI - RIL - simple_mcache_5 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.347292
  2/5,  5.337623
  3/5,  5.340434
  4/5,  5.340347
  5/5,  5.337623
}
{ Monte Carlo PI - RIL - simple_mcache_6 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.339433
  2/5,  5.340478
  3/5,  5.333115
  4/5,  5.342552
  5/5,  5.336924
}
{ Monte Carlo PI - RIL - simple_mcache_7 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.33663
  2/5,  5.34079
  3/5,  5.349768
  4/5,  5.335703
  5/5,  5.334379
}
{ Monte Carlo PI - RIL - simple_mcache_8 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.404513
  2/5,  5.336355
  3/5,  5.334859
  4/5,  5.333833
  5/5,  5.504486
}
{ Monte Carlo PI - RIL - simple_mcache_9 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.335571
  2/5,  5.330433
  3/5,  5.340318
  4/5,  5.330168
  5/5,  5.339523
}
{ Monte Carlo PI - RIL - simple_mcache_10 ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.32932
  2/5,  5.329715
  3/5,  5.334049
  4/5,  5.32707
  5/5,  5.330304
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.256702
  2/5,  0.255653
  3/5,  0.25295
  4/5,  0.255171
  5/5,  0.255762
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283785
  2/5,  0.281239
  3/5,  0.29594
  4/5,  0.282789
  5/5,  0.282995
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284433
  2/5,  0.283473
  3/5,  0.282035
  4/5,  0.283941
  5/5,  0.281928
}
{ Monte Carlo PI - 2xN - score_mcache_1 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.374509
  2/5,  0.375456
  3/5,  0.374137
  4/5,  0.372357
  5/5,  0.373399
}
{ Monte Carlo PI - 2xN - score_mcache_2 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.370291
  2/5,  0.369691
  3/5,  0.369499
  4/5,  0.369378
  5/5,  0.369327
}
{ Monte Carlo PI - 2xN - score_mcache_3 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.350019
  2/5,  0.347476
  3/5,  0.346135
  4/5,  0.348087
  5/5,  0.347322
}
{ Monte Carlo PI - 2xN - score_mcache_4 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.326434
  2/5,  0.327058
  3/5,  0.32553
  4/5,  0.32506
  5/5,  0.325417
}
{ Monte Carlo PI - 2xN - score_mcache_5 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.304253
  2/5,  0.302077
  3/5,  0.302442
  4/5,  0.302975
  5/5,  0.30309
}
{ Monte Carlo PI - 2xN - score_mcache_6 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.28439
  2/5,  0.28275
  3/5,  0.281831
  4/5,  0.281637
  5/5,  0.282414
}
{ Monte Carlo PI - 2xN - score_mcache_7 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.285255
  2/5,  0.283796
  3/5,  0.281676
  4/5,  0.28177
  5/5,  0.282096
}
{ Monte Carlo PI - 2xN - score_mcache_8 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284173
  2/5,  0.281464
  3/5,  0.281947
  4/5,  0.283253
  5/5,  0.283634
}
{ Monte Carlo PI - 2xN - score_mcache_9 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283866
  2/5,  0.283464
  3/5,  0.281875
  4/5,  0.283251
  5/5,  0.28217
}
{ Monte Carlo PI - 2xN - score_mcache_10 ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284189
  2/5,  0.283103
  3/5,  0.283637
  4/5,  0.2825
  5/5,  0.281926
}
{ Monte Carlo PI - 2xN - simple_mcache_1 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.347426
  2/5,  0.346073
  3/5,  0.348347
  4/5,  0.344917
  5/5,  0.344561
}
{ Monte Carlo PI - 2xN - simple_mcache_2 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.325972
  2/5,  0.324028
  3/5,  0.325264
  4/5,  0.324873
  5/5,  0.324785
}
{ Monte Carlo PI - 2xN - simple_mcache_3 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.308897
  2/5,  0.305261
  3/5,  0.305955
  4/5,  0.306542
  5/5,  0.309745
}
{ Monte Carlo PI - 2xN - simple_mcache_4 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.305048
  2/5,  0.304058
  3/5,  0.304573
  4/5,  0.303552
  5/5,  0.30223
}
{ Monte Carlo PI - 2xN - simple_mcache_5 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287143
  2/5,  0.284407
  3/5,  0.28491
  4/5,  0.284314
  5/5,  0.28412
}
{ Monte Carlo PI - 2xN - simple_mcache_6 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.282839
  2/5,  0.282918
  3/5,  0.282365
  4/5,  0.281907
  5/5,  0.281287
}
{ Monte Carlo PI - 2xN - simple_mcache_7 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.299218
  2/5,  0.281012
  3/5,  0.281147
  4/5,  0.282269
  5/5,  0.281523
}
{ Monte Carlo PI - 2xN - simple_mcache_8 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283235
  2/5,  0.281142
  3/5,  0.281751
  4/5,  0.281523
  5/5,  0.281308
}
{ Monte Carlo PI - 2xN - simple_mcache_9 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283709
  2/5,  0.280732
  3/5,  0.281185
  4/5,  0.281834
  5/5,  0.282633
}
{ Monte Carlo PI - 2xN - simple_mcache_10 ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284193
  2/5,  0.281325
  3/5,  0.281808
  4/5,  0.281169
  5/5,  0.281054
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.265183
  2/5,  0.263121
  3/5,  0.262272
  4/5,  0.263416
  5/5,  0.264953
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.288144
  2/5,  0.286959
  3/5,  0.286079
  4/5,  0.286129
  5/5,  0.28733
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.28797
  2/5,  0.286704
  3/5,  0.287012
  4/5,  0.285759
  5/5,  0.285952
}
{ Monte Carlo PI - Nx2 - score_mcache_1 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.376615
  2/5,  0.376064
  3/5,  0.376941
  4/5,  0.376995
  5/5,  0.37467
}
{ Monte Carlo PI - Nx2 - score_mcache_2 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.371852
  2/5,  0.371563
  3/5,  0.371356
  4/5,  0.371512
  5/5,  0.372408
}
{ Monte Carlo PI - Nx2 - score_mcache_3 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.352194
  2/5,  0.350943
  3/5,  0.350072
  4/5,  0.352223
  5/5,  0.350127
}
{ Monte Carlo PI - Nx2 - score_mcache_4 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.329936
  2/5,  0.32897
  3/5,  0.330839
  4/5,  0.328739
  5/5,  0.329766
}
{ Monte Carlo PI - Nx2 - score_mcache_5 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.307043
  2/5,  0.30645
  3/5,  0.305338
  4/5,  0.304822
  5/5,  0.304957
}
{ Monte Carlo PI - Nx2 - score_mcache_6 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.292536
  2/5,  0.287406
  3/5,  0.285164
  4/5,  0.286694
  5/5,  0.284734
}
{ Monte Carlo PI - Nx2 - score_mcache_7 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287672
  2/5,  0.285622
  3/5,  0.285403
  4/5,  0.286227
  5/5,  0.287471
}
{ Monte Carlo PI - Nx2 - score_mcache_8 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.288206
  2/5,  0.286366
  3/5,  0.287395
  4/5,  0.286038
  5/5,  0.285486
}
{ Monte Carlo PI - Nx2 - score_mcache_9 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287889
  2/5,  0.285108
  3/5,  0.285683
  4/5,  0.286803
  5/5,  0.284553
}
{ Monte Carlo PI - Nx2 - score_mcache_10 ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287741
  2/5,  0.285505
  3/5,  0.285129
  4/5,  0.288
  5/5,  0.285173
}
{ Monte Carlo PI - Nx2 - simple_mcache_1 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.350611
  2/5,  0.349452
  3/5,  0.348819
  4/5,  0.349943
  5/5,  0.348408
}
{ Monte Carlo PI - Nx2 - simple_mcache_2 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.329799
  2/5,  0.33251
  3/5,  0.326691
  4/5,  0.331036
  5/5,  0.328949
}
{ Monte Carlo PI - Nx2 - simple_mcache_3 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.312344
  2/5,  0.310699
  3/5,  0.313882
  4/5,  0.30986
  5/5,  0.309331
}
{ Monte Carlo PI - Nx2 - simple_mcache_4 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.30888
  2/5,  0.307536
  3/5,  0.320297
  4/5,  0.306985
  5/5,  0.308422
}
{ Monte Carlo PI - Nx2 - simple_mcache_5 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.290393
  2/5,  0.288795
  3/5,  0.289546
  4/5,  0.28955
  5/5,  0.291141
}
{ Monte Carlo PI - Nx2 - simple_mcache_6 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.288416
  2/5,  0.297564
  3/5,  0.286135
  4/5,  0.285896
  5/5,  0.286035
}
{ Monte Carlo PI - Nx2 - simple_mcache_7 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.301298
  2/5,  0.286794
  3/5,  0.28601
  4/5,  0.286403
  5/5,  0.286797
}
{ Monte Carlo PI - Nx2 - simple_mcache_8 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.288674
  2/5,  0.285858
  3/5,  0.286782
  4/5,  0.285439
  5/5,  0.287164
}
{ Monte Carlo PI - Nx2 - simple_mcache_9 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.288981
  2/5,  0.286805
  3/5,  0.288261
  4/5,  0.285571
  5/5,  0.287573
}
{ Monte Carlo PI - Nx2 - simple_mcache_10 ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.28736
  2/5,  0.286114
  3/5,  0.28535
  4/5,  0.287464
  5/5,  0.288199
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.935003
  2/5,  1.932157
  3/5,  1.937308
  4/5,  1.93193
  5/5,  1.935457
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.314773
  2/5,  2.316282
  3/5,  2.318184
  4/5,  2.320795
  5/5,  2.319023
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.216407
  2/5,  2.211651
  3/5,  2.217261
  4/5,  2.216418
  5/5,  2.216369
}
{ Stencil - 1D 4way - score_mcache_1 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.213945
  2/5,  2.215683
  3/5,  2.216728
  4/5,  2.216427
  5/5,  2.218927
}
{ Stencil - 1D 4way - score_mcache_2 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.216336
  2/5,  2.211645
  3/5,  2.211196
  4/5,  2.214265
  5/5,  2.220647
}
{ Stencil - 1D 4way - score_mcache_3 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.215637
  2/5,  2.213288
  3/5,  2.210815
  4/5,  2.222572
  5/5,  2.218563
}
{ Stencil - 1D 4way - score_mcache_4 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.216979
  2/5,  2.22183
  3/5,  2.21671
  4/5,  2.217233
  5/5,  2.217269
}
{ Stencil - 1D 4way - score_mcache_5 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.216062
  2/5,  2.216932
  3/5,  2.218186
  4/5,  2.217368
  5/5,  2.216856
}
{ Stencil - 1D 4way - score_mcache_6 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.213639
  2/5,  2.219484
  3/5,  2.213224
  4/5,  2.21572
  5/5,  2.213734
}
{ Stencil - 1D 4way - score_mcache_7 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.228628
  2/5,  2.212305
  3/5,  2.213889
  4/5,  2.216539
  5/5,  2.216768
}
{ Stencil - 1D 4way - score_mcache_8 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.218035
  2/5,  2.221947
  3/5,  2.214046
  4/5,  2.216665
  5/5,  2.215214
}
{ Stencil - 1D 4way - score_mcache_9 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.214339
  2/5,  2.21754
  3/5,  2.214684
  4/5,  2.218558
  5/5,  2.219928
}
{ Stencil - 1D 4way - score_mcache_10 ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.217671
  2/5,  2.216015
  3/5,  2.219842
  4/5,  2.214148
  5/5,  2.211872
}
{ Stencil - 1D 4way - simple_mcache_1 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.317224
  2/5,  2.315375
  3/5,  2.312874
  4/5,  2.317286
  5/5,  2.318315
}
{ Stencil - 1D 4way - simple_mcache_2 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.315743
  2/5,  2.318878
  3/5,  2.318604
  4/5,  2.320309
  5/5,  2.320816
}
{ Stencil - 1D 4way - simple_mcache_3 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.316081
  2/5,  2.319437
  3/5,  2.316056
  4/5,  2.31622
  5/5,  2.318104
}
{ Stencil - 1D 4way - simple_mcache_4 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.318261
  2/5,  2.322274
  3/5,  2.31812
  4/5,  2.315117
  5/5,  2.319321
}
{ Stencil - 1D 4way - simple_mcache_5 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.319655
  2/5,  2.317814
  3/5,  2.318531
  4/5,  2.320035
  5/5,  2.31916
}
{ Stencil - 1D 4way - simple_mcache_6 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.320799
  2/5,  2.319752
  3/5,  2.32445
  4/5,  2.315839
  5/5,  2.323502
}
{ Stencil - 1D 4way - simple_mcache_7 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.320005
  2/5,  2.316679
  3/5,  2.319155
  4/5,  2.319178
  5/5,  2.320412
}
{ Stencil - 1D 4way - simple_mcache_8 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.316341
  2/5,  2.318452
  3/5,  2.326242
  4/5,  2.319288
  5/5,  2.320266
}
{ Stencil - 1D 4way - simple_mcache_9 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.318256
  2/5,  2.319933
  3/5,  2.31662
  4/5,  2.315536
  5/5,  2.322505
}
{ Stencil - 1D 4way - simple_mcache_10 ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.317632
  2/5,  2.31678
  3/5,  2.316606
  4/5,  2.314677
  5/5,  2.317901
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.577553
  2/5,  4.581684
  3/5,  4.571713
  4/5,  4.57327
  5/5,  4.570507
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.209393
  2/5,  3.203206
  3/5,  3.205945
  4/5,  3.207309
  5/5,  3.207449
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.182603
  2/5,  3.177482
  3/5,  3.177237
  4/5,  3.179846
  5/5,  3.176486
}
{ Stencil - 2D - score_mcache_1 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.740596
  2/5,  4.725656
  3/5,  4.741456
  4/5,  4.729102
  5/5,  4.734994
}
{ Stencil - 2D - score_mcache_2 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  4.321068
  2/5,  4.324618
  3/5,  4.334522
  4/5,  4.322825
  5/5,  4.320976
}
{ Stencil - 2D - score_mcache_3 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.858324
  2/5,  3.860074
  3/5,  3.847174
  4/5,  3.853602
  5/5,  3.860573
}
{ Stencil - 2D - score_mcache_4 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.395865
  2/5,  3.396973
  3/5,  3.396618
  4/5,  3.392491
  5/5,  3.393187
}
{ Stencil - 2D - score_mcache_5 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.187552
  2/5,  3.189179
  3/5,  3.198644
  4/5,  3.184687
  5/5,  3.185673
}
{ Stencil - 2D - score_mcache_6 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.188658
  2/5,  3.187278
  3/5,  3.184273
  4/5,  3.188905
  5/5,  3.184467
}
{ Stencil - 2D - score_mcache_7 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.185094
  2/5,  3.184669
  3/5,  3.182663
  4/5,  3.181897
  5/5,  3.185009
}
{ Stencil - 2D - score_mcache_8 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.18512
  2/5,  3.180953
  3/5,  3.183187
  4/5,  3.180217
  5/5,  3.176769
}
{ Stencil - 2D - score_mcache_9 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.181863
  2/5,  3.179239
  3/5,  3.181572
  4/5,  3.181558
  5/5,  3.185338
}
{ Stencil - 2D - score_mcache_10 ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.178926
  2/5,  3.177392
  3/5,  3.179093
  4/5,  3.17628
  5/5,  3.177837
}
{ Stencil - 2D - simple_mcache_1 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.384456
  2/5,  3.388532
  3/5,  3.384061
  4/5,  3.385202
  5/5,  3.393666
}
{ Stencil - 2D - simple_mcache_2 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.208248
  2/5,  3.206615
  3/5,  3.205464
  4/5,  3.211162
  5/5,  3.209312
}
{ Stencil - 2D - simple_mcache_3 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.209494
  2/5,  3.212816
  3/5,  3.207327
  4/5,  3.207769
  5/5,  3.210037
}
{ Stencil - 2D - simple_mcache_4 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.207427
  2/5,  3.208114
  3/5,  3.208286
  4/5,  3.205614
  5/5,  3.204939
}
{ Stencil - 2D - simple_mcache_5 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.210409
  2/5,  3.207622
  3/5,  3.202759
  4/5,  3.208813
  5/5,  3.210194
}
{ Stencil - 2D - simple_mcache_6 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.207131
  2/5,  3.211163
  3/5,  3.226134
  4/5,  3.205923
  5/5,  3.217607
}
{ Stencil - 2D - simple_mcache_7 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.209965
  2/5,  3.208651
  3/5,  3.207967
  4/5,  3.207367
  5/5,  3.208834
}
{ Stencil - 2D - simple_mcache_8 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.210656
  2/5,  3.206923
  3/5,  3.205581
  4/5,  3.204645
  5/5,  3.206846
}
{ Stencil - 2D - simple_mcache_9 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.210499
  2/5,  3.208513
  3/5,  3.207068
  4/5,  3.209364
  5/5,  3.201872
}
{ Stencil - 2D - simple_mcache_10 ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.208227
  2/5,  3.207471
  3/5,  3.202058
  4/5,  3.20161
  5/5,  3.207231
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.273065
  2/5,  2.270024
  3/5,  2.272829
  4/5,  2.280207
  5/5,  2.298825
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.52645
  2/5,  1.526925
  3/5,  1.525539
  4/5,  1.52852
  5/5,  1.528293
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.606016
  2/5,  1.608003
  3/5,  1.606658
  4/5,  1.604083
  5/5,  1.60795
}
{ Shallow Water - score_mcache_1 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  2.283476
  2/5,  2.270745
  3/5,  2.270227
  4/5,  2.28168
  5/5,  2.266402
}
{ Shallow Water - score_mcache_2 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.97072
  2/5,  1.993472
  3/5,  1.994429
  4/5,  1.99169
  5/5,  1.992112
}
{ Shallow Water - score_mcache_3 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.776726
  2/5,  1.777678
  3/5,  1.776349
  4/5,  1.781889
  5/5,  1.776194
}
{ Shallow Water - score_mcache_4 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.6792
  2/5,  1.682248
  3/5,  1.682585
  4/5,  1.682862
  5/5,  1.682776
}
{ Shallow Water - score_mcache_5 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.652534
  2/5,  1.654485
  3/5,  1.655106
  4/5,  1.655004
  5/5,  1.658082
}
{ Shallow Water - score_mcache_6 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.61453
  2/5,  1.619402
  3/5,  1.6174
  4/5,  1.616657
  5/5,  1.617646
}
{ Shallow Water - score_mcache_7 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.609339
  2/5,  1.612928
  3/5,  1.613137
  4/5,  1.61277
  5/5,  1.608462
}
{ Shallow Water - score_mcache_8 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.607471
  2/5,  1.608338
  3/5,  1.610765
  4/5,  1.608284
  5/5,  1.611496
}
{ Shallow Water - score_mcache_9 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.594747
  2/5,  1.598427
  3/5,  1.59694
  4/5,  1.594067
  5/5,  1.596683
}
{ Shallow Water - score_mcache_10 ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.607944
  2/5,  1.603194
  3/5,  1.607018
  4/5,  1.604204
  5/5,  1.604875
}
{ Shallow Water - simple_mcache_1 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.806551
  2/5,  1.805497
  3/5,  1.805955
  4/5,  1.806356
  5/5,  1.80303
}
{ Shallow Water - simple_mcache_2 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.693324
  2/5,  1.689985
  3/5,  1.687968
  4/5,  1.690922
  5/5,  1.687327
}
{ Shallow Water - simple_mcache_3 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.606841
  2/5,  1.607642
  3/5,  1.611485
  4/5,  1.607919
  5/5,  1.608729
}
{ Shallow Water - simple_mcache_4 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.584969
  2/5,  1.589431
  3/5,  1.585251
  4/5,  1.588331
  5/5,  1.586446
}
{ Shallow Water - simple_mcache_5 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.576181
  2/5,  1.571536
  3/5,  1.570876
  4/5,  1.570909
  5/5,  1.571221
}
{ Shallow Water - simple_mcache_6 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.56671
  2/5,  1.56876
  3/5,  1.566141
  4/5,  1.567079
  5/5,  1.568007
}
{ Shallow Water - simple_mcache_7 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.552712
  2/5,  1.552003
  3/5,  1.554739
  4/5,  1.54924
  5/5,  1.551716
}
{ Shallow Water - simple_mcache_8 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.547997
  2/5,  1.545941
  3/5,  1.547661
  4/5,  1.545371
  5/5,  1.546136
}
{ Shallow Water - simple_mcache_9 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.536493
  2/5,  1.534688
  3/5,  1.536369
  4/5,  1.535418
  5/5,  1.534547
}
{ Shallow Water - simple_mcache_10 ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.521927
  2/5,  1.527189
  3/5,  1.525231
  4/5,  1.526729
  5/5,  1.523563
}
