Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers01/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-MVqC_B.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.006328
  2/5,  5.99976
  3/5,  6.005336
  4/5,  6.001772
  5/5,  6.009224
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.610188
  2/5,  5.613179
  3/5,  5.61641
  4/5,  5.607453
  5/5,  5.616292
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.63481
  2/5,  5.633862
  3/5,  5.636715
  4/5,  5.636426
  5/5,  5.685
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.618252
  2/5,  16.560683
  3/5,  16.579157
  4/5,  16.56162
  5/5,  16.609001
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.469998
  2/5,  16.477117
  3/5,  16.47629
  4/5,  16.481955
  5/5,  16.471551
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.559316
  2/5,  16.562695
  3/5,  16.595905
  4/5,  16.563481
  5/5,  16.559536
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.618354
  2/5,  2.621267
  3/5,  2.617497
  4/5,  2.622022
  5/5,  2.619208
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.332235
  2/5,  3.332098
  3/5,  3.335546
  4/5,  3.325848
  5/5,  3.331562
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.087777
  2/5,  3.093545
  3/5,  3.100717
  4/5,  3.102653
  5/5,  3.082472
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.887443
  2/5,  6.891371
  3/5,  6.871111
  4/5,  6.89218
  5/5,  6.876816
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.065238
  2/5,  5.068816
  3/5,  5.066323
  4/5,  5.065722
  5/5,  5.062626
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.775026
  2/5,  4.779605
  3/5,  4.761872
  4/5,  4.773751
  5/5,  4.778932
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.765788
  2/5,  3.770508
  3/5,  3.765494
  4/5,  3.762559
  5/5,  3.766077
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.747653
  2/5,  1.74676
  3/5,  1.747943
  4/5,  1.744916
  5/5,  1.74717
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.733405
  2/5,  1.739887
  3/5,  1.745123
  4/5,  1.732106
  5/5,  1.739051
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.392905
  2/5,  5.384263
  3/5,  5.38822
  4/5,  5.388514
  5/5,  5.381354
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.563601
  2/5,  4.570561
  3/5,  4.57114
  4/5,  4.569305
  5/5,  4.573625
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.564049
  2/5,  4.557695
  3/5,  4.558932
  4/5,  4.555758
  5/5,  4.558164
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.020951
  2/5,  2.02487
  3/5,  2.019122
  4/5,  2.025217
  5/5,  2.019857
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.187939
  2/5,  2.189409
  3/5,  2.19375
  4/5,  2.193635
  5/5,  2.194
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.156623
  2/5,  2.156086
  3/5,  2.160653
  4/5,  2.158581
  5/5,  2.155987
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.827645
  2/5,  4.826419
  3/5,  4.828378
  4/5,  4.822146
  5/5,  4.820848
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.298892
  2/5,  5.297982
  3/5,  5.298674
  4/5,  5.305082
  5/5,  5.299456
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.27556
  2/5,  5.278847
  3/5,  5.278441
  4/5,  5.275091
  5/5,  5.277668
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.25077
  2/5,  0.252296
  3/5,  0.250028
  4/5,  0.250829
  5/5,  0.250355
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.28285
  2/5,  0.282232
  3/5,  0.281443
  4/5,  0.281478
  5/5,  0.282321
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.28376
  2/5,  0.282692
  3/5,  0.283712
  4/5,  0.282
  5/5,  0.283221
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.259349
  2/5,  0.260486
  3/5,  0.260577
  4/5,  0.260623
  5/5,  0.259347
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287528
  2/5,  0.286625
  3/5,  0.285385
  4/5,  0.28787
  5/5,  0.287295
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.28472
  2/5,  0.285696
  3/5,  0.285943
  4/5,  0.285089
  5/5,  0.285366
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.908697
  2/5,  1.907904
  3/5,  1.910116
  4/5,  1.909359
  5/5,  1.909807
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.295068
  2/5,  2.291187
  3/5,  2.298695
  4/5,  2.297376
  5/5,  2.297326
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.198627
  2/5,  2.199542
  3/5,  2.19745
  4/5,  2.202612
  5/5,  2.198407
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.447494
  2/5,  4.445216
  3/5,  4.454829
  4/5,  4.450744
  5/5,  4.447729
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.191538
  2/5,  3.201408
  3/5,  3.214271
  4/5,  3.191997
  5/5,  3.190943
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.153909
  2/5,  3.158502
  3/5,  3.158612
  4/5,  3.154358
  5/5,  3.15517
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.214965
  2/5,  2.216267
  3/5,  2.223224
  4/5,  2.220366
  5/5,  2.215759
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.510911
  2/5,  1.510073
  3/5,  1.513867
  4/5,  1.511872
  5/5,  1.511933
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.589816
  2/5,  1.589667
  3/5,  1.588719
  4/5,  1.593161
  5/5,  1.589133
}
