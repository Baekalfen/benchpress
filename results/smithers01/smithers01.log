Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers01/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-aLB8jI.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.064814
  2/5,  6.073877
  3/5,  6.068878
  4/5,  6.074985
  5/5,  6.070212
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.626469
  2/5,  5.622082
  3/5,  5.630055
  4/5,  5.637365
  5/5,  5.616387
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.657698
  2/5,  5.653661
  3/5,  5.656459
  4/5,  5.657092
  5/5,  5.654406
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.622198
  2/5,  16.609745
  3/5,  16.600614
  4/5,  16.609883
  5/5,  16.621915
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.509415
  2/5,  16.504035
  3/5,  16.506917
  4/5,  16.548512
  5/5,  16.501649
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.591402
  2/5,  16.593552
  3/5,  16.591642
  4/5,  16.598065
  5/5,  16.591662
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.635367
  2/5,  2.638452
  3/5,  2.635888
  4/5,  2.634641
  5/5,  2.629584
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.349633
  2/5,  3.350218
  3/5,  3.347082
  4/5,  3.353655
  5/5,  3.349288
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.101719
  2/5,  3.1138
  3/5,  3.110454
  4/5,  3.106243
  5/5,  3.108646
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.931631
  2/5,  6.929004
  3/5,  6.925449
  4/5,  6.933697
  5/5,  6.969709
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.104623
  2/5,  5.104791
  3/5,  5.10845
  4/5,  5.101695
  5/5,  5.103805
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.785887
  2/5,  4.776461
  3/5,  4.782605
  4/5,  4.795513
  5/5,  4.782101
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.802429
  2/5,  3.793159
  3/5,  3.801275
  4/5,  3.792593
  5/5,  3.792236
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.77841
  2/5,  1.775064
  3/5,  1.776665
  4/5,  1.775533
  5/5,  1.777188
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.759741
  2/5,  1.762315
  3/5,  1.758608
  4/5,  1.762727
  5/5,  1.761127
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.488206
  2/5,  5.490087
  3/5,  5.486255
  4/5,  5.484975
  5/5,  5.487845
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.604715
  2/5,  4.602127
  3/5,  4.609209
  4/5,  4.608539
  5/5,  4.609438
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.601597
  2/5,  4.594763
  3/5,  4.594726
  4/5,  4.597067
  5/5,  4.59684
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.06766
  2/5,  2.06284
  3/5,  2.063481
  4/5,  2.060038
  5/5,  2.062887
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.21199
  2/5,  2.213341
  3/5,  2.211034
  4/5,  2.214461
  5/5,  2.20712
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.177583
  2/5,  2.176182
  3/5,  2.173157
  4/5,  2.174295
  5/5,  2.175754
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.851537
  2/5,  4.850951
  3/5,  4.849339
  4/5,  4.857287
  5/5,  4.844165
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.330568
  2/5,  5.333454
  3/5,  5.335616
  4/5,  5.737949
  5/5,  5.326581
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.302859
  2/5,  5.30431
  3/5,  5.305516
  4/5,  5.30261
  5/5,  5.302511
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.256035
  2/5,  0.256209
  3/5,  0.256275
  4/5,  0.254118
  5/5,  0.254238
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283606
  2/5,  0.282108
  3/5,  0.282984
  4/5,  0.281891
  5/5,  0.282773
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284241
  2/5,  0.282131
  3/5,  0.282559
  4/5,  0.28225
  5/5,  0.281596
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.262924
  2/5,  0.264824
  3/5,  0.264244
  4/5,  0.263425
  5/5,  0.262059
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287463
  2/5,  0.285912
  3/5,  0.28678
  4/5,  0.285753
  5/5,  0.286144
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287568
  2/5,  0.286179
  3/5,  0.285309
  4/5,  0.286336
  5/5,  0.284674
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.922708
  2/5,  1.919385
  3/5,  1.92076
  4/5,  1.919562
  5/5,  1.920227
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.314127
  2/5,  2.310298
  3/5,  2.313306
  4/5,  2.313602
  5/5,  2.313257
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.214955
  2/5,  2.21657
  3/5,  2.218601
  4/5,  2.216689
  5/5,  2.212127
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.555418
  2/5,  4.544012
  3/5,  4.560181
  4/5,  4.544077
  5/5,  4.54274
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.209021
  2/5,  3.208334
  3/5,  3.208834
  4/5,  3.221231
  5/5,  3.209971
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.181089
  2/5,  3.176284
  3/5,  3.17728
  4/5,  3.178443
  5/5,  3.173159
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.273934
  2/5,  2.274908
  3/5,  2.278779
  4/5,  2.272058
  5/5,  2.270353
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.52316
  2/5,  1.523733
  3/5,  1.523129
  4/5,  1.52449
  5/5,  1.520556
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.605613
  2/5,  1.606831
  3/5,  1.606727
  4/5,  1.604749
  5/5,  1.606445
}
