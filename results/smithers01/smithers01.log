Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers01/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-abYKH8.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.06292
  2/5,  6.069259
  3/5,  6.101738
  4/5,  6.109841
  5/5,  6.148012
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.620123
  2/5,  5.642742
  3/5,  5.637403
  4/5,  5.642966
  5/5,  5.646134
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.656096
  2/5,  5.660224
  3/5,  5.668687
  4/5,  5.671396
  5/5,  5.672438
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.605921
  2/5,  16.610847
  3/5,  16.619969
  4/5,  16.627354
  5/5,  16.644517
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.500328
  2/5,  16.510109
  3/5,  16.511505
  4/5,  16.522083
  5/5,  16.525261
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.603962
  2/5,  16.604258
  3/5,  16.606378
  4/5,  16.612944
  5/5,  16.626505
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.65903
  2/5,  2.643285
  3/5,  2.660188
  4/5,  2.645136
  5/5,  2.652996
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.352593
  2/5,  3.361238
  3/5,  3.363611
  4/5,  3.370392
  5/5,  3.375744
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.1094
  2/5,  3.117146
  3/5,  3.12209
  4/5,  3.123005
  5/5,  3.132887
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.936755
  2/5,  6.961921
  3/5,  6.977034
  4/5,  6.991836
  5/5,  7.000767
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.113328
  2/5,  5.121892
  3/5,  5.125956
  4/5,  5.130533
  5/5,  5.158917
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.79809
  2/5,  4.810599
  3/5,  4.803696
  4/5,  4.832084
  5/5,  4.825918
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.790744
  2/5,  3.802272
  3/5,  3.803733
  4/5,  3.819035
  5/5,  3.845789
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.77347
  2/5,  1.778381
  3/5,  1.789372
  4/5,  1.79178
  5/5,  1.817335
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.762434
  2/5,  1.774255
  3/5,  1.778735
  4/5,  1.791168
  5/5,  1.801719
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.482164
  2/5,  5.507236
  3/5,  5.529052
  4/5,  5.540251
  5/5,  5.609593
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.600454
  2/5,  4.601079
  3/5,  4.616629
  4/5,  4.635871
  5/5,  4.647704
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.596396
  2/5,  4.610104
  3/5,  4.615923
  4/5,  4.630021
  5/5,  4.648049
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.059912
  2/5,  2.069284
  3/5,  2.088691
  4/5,  2.095404
  5/5,  2.124521
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.205708
  2/5,  2.217001
  3/5,  2.216092
  4/5,  2.22831
  5/5,  2.231914
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.175215
  2/5,  2.180382
  3/5,  2.186224
  4/5,  2.192253
  5/5,  2.197078
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.851646
  2/5,  4.854267
  3/5,  4.868597
  4/5,  4.876782
  5/5,  4.888795
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.327188
  2/5,  5.332562
  3/5,  5.392385
  4/5,  5.354434
  5/5,  5.368092
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.303843
  2/5,  5.307773
  3/5,  5.318773
  4/5,  5.326259
  5/5,  5.337431
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.253375
  2/5,  0.256146
  3/5,  0.256266
  4/5,  0.258053
  5/5,  0.259035
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.281651
  2/5,  0.282931
  3/5,  0.282171
  4/5,  0.283819
  5/5,  0.283483
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283197
  2/5,  0.284456
  3/5,  0.285771
  4/5,  0.284225
  5/5,  0.286948
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.26293
  2/5,  0.264628
  3/5,  0.262535
  4/5,  0.265878
  5/5,  0.267726
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.286039
  2/5,  0.287744
  3/5,  0.286441
  4/5,  0.287831
  5/5,  0.288244
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.285645
  2/5,  0.285813
  3/5,  0.28569
  4/5,  0.286959
  5/5,  0.288355
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.920547
  2/5,  1.932776
  3/5,  1.927014
  4/5,  1.947109
  5/5,  1.94772
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.316447
  2/5,  2.317448
  3/5,  2.323461
  4/5,  2.326769
  5/5,  2.332404
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.214541
  2/5,  2.218789
  3/5,  2.224325
  4/5,  2.223787
  5/5,  2.228685
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.56291
  2/5,  4.589348
  3/5,  4.613896
  4/5,  4.641668
  5/5,  4.691579
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.199037
  2/5,  3.208487
  3/5,  3.213133
  4/5,  3.21613
  5/5,  3.225957
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.175077
  2/5,  3.184478
  3/5,  3.188032
  4/5,  3.195426
  5/5,  3.205039
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.270704
  2/5,  2.283693
  3/5,  2.320609
  4/5,  2.309581
  5/5,  2.350444
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.525719
  2/5,  1.523373
  3/5,  1.529979
  4/5,  1.532616
  5/5,  1.533061
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.604979
  2/5,  1.615504
  3/5,  1.614334
  4/5,  1.619359
  5/5,  1.626589
}
