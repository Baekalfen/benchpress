Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers01/08d082bea753a6cf66097622b448da203d868aea/benchmark-XUjfry.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.0749
  2/5,  6.070369
  3/5,  6.082527
  4/5,  6.073116
  5/5,  6.067073
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.632178
  2/5,  5.628077
  3/5,  5.663877
  4/5,  5.630384
  5/5,  5.626529
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.664628
  2/5,  5.665304
  3/5,  5.650622
  4/5,  5.663535
  5/5,  5.657125
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.617578
  2/5,  16.617363
  3/5,  16.615045
  4/5,  16.614002
  5/5,  16.61641
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.50916
  2/5,  16.516343
  3/5,  16.509412
  4/5,  16.508324
  5/5,  16.516659
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.601823
  2/5,  16.604486
  3/5,  16.606417
  4/5,  16.60043
  5/5,  16.60165
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.648467
  2/5,  2.655639
  3/5,  2.664774
  4/5,  2.657299
  5/5,  2.65099
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.363643
  2/5,  3.362157
  3/5,  3.365575
  4/5,  3.359337
  5/5,  3.376671
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.120562
  2/5,  3.11987
  3/5,  3.120756
  4/5,  3.119849
  5/5,  3.123665
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.957969
  2/5,  6.946886
  3/5,  6.963183
  4/5,  6.936958
  5/5,  6.947672
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.11651
  2/5,  5.13219
  3/5,  5.107386
  4/5,  5.115138
  5/5,  5.115626
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.792926
  2/5,  4.805081
  3/5,  4.791209
  4/5,  4.798945
  5/5,  4.791317
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.806957
  2/5,  3.807842
  3/5,  3.800325
  4/5,  3.795612
  5/5,  3.806896
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.776807
  2/5,  1.774267
  3/5,  1.776845
  4/5,  1.774838
  5/5,  1.774003
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.759201
  2/5,  1.76186
  3/5,  1.762845
  4/5,  1.758776
  5/5,  1.757155
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.480114
  2/5,  5.488593
  3/5,  5.4821
  4/5,  5.485892
  5/5,  5.482139
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.60322
  2/5,  4.602706
  3/5,  4.605074
  4/5,  4.608248
  5/5,  4.605591
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.600498
  2/5,  4.602721
  3/5,  4.595229
  4/5,  4.604702
  5/5,  4.597787
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.06575
  2/5,  2.056681
  3/5,  2.070599
  4/5,  2.062255
  5/5,  2.064348
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.213029
  2/5,  2.209517
  3/5,  2.210595
  4/5,  2.20851
  5/5,  2.206628
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.175853
  2/5,  2.17629
  3/5,  2.172968
  4/5,  2.175119
  5/5,  2.173297
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.849403
  2/5,  4.88377
  3/5,  4.849562
  4/5,  4.854774
  5/5,  4.849779
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.3319
  2/5,  5.334124
  3/5,  5.335527
  4/5,  5.330977
  5/5,  5.329072
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.309331
  2/5,  5.307096
  3/5,  5.306829
  4/5,  5.305965
  5/5,  5.305134
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.25357
  2/5,  0.255751
  3/5,  0.255417
  4/5,  0.255635
  5/5,  0.254087
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283326
  2/5,  0.284041
  3/5,  0.281994
  4/5,  0.281447
  5/5,  0.282396
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283925
  2/5,  0.2819
  3/5,  0.28271
  4/5,  0.283014
  5/5,  0.282876
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.26357
  2/5,  0.266042
  3/5,  0.262632
  4/5,  0.266455
  5/5,  0.262569
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.2883
  2/5,  0.287113
  3/5,  0.286397
  4/5,  0.286703
  5/5,  0.28668
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287694
  2/5,  0.285438
  3/5,  0.284655
  4/5,  0.286462
  5/5,  0.285602
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.92404
  2/5,  1.927732
  3/5,  1.924761
  4/5,  1.930781
  5/5,  1.924593
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.326877
  2/5,  2.314342
  3/5,  2.316567
  4/5,  2.319902
  5/5,  2.31489
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.214343
  2/5,  2.215986
  3/5,  2.216046
  4/5,  2.217516
  5/5,  2.213578
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.56744
  2/5,  4.558417
  3/5,  4.549825
  4/5,  4.551368
  5/5,  4.551211
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.209403
  2/5,  3.207652
  3/5,  3.206423
  4/5,  3.201557
  5/5,  3.207825
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.178866
  2/5,  3.179448
  3/5,  3.17804
  4/5,  3.17915
  5/5,  3.179709
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.275154
  2/5,  2.272411
  3/5,  2.271609
  4/5,  2.278749
  5/5,  2.27403
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.526908
  2/5,  1.52525
  3/5,  1.52628
  4/5,  1.525073
  5/5,  1.523426
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.605218
  2/5,  1.606478
  3/5,  1.607159
  4/5,  1.608119
  5/5,  1.607193
}
