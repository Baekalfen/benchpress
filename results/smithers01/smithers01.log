Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers01/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-gfRfBv.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.070595
  2/5,  6.073117
  3/5,  6.089854
  4/5,  6.112975
  5/5,  6.145738
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.627347
  2/5,  5.626686
  3/5,  5.637281
  4/5,  5.634932
  5/5,  5.643309
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.655149
  2/5,  5.654567
  3/5,  5.668302
  4/5,  5.672396
  5/5,  5.679559
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.604626
  2/5,  16.647852
  3/5,  16.617142
  4/5,  16.621615
  5/5,  16.63497
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.505257
  2/5,  16.503868
  3/5,  16.51313
  4/5,  16.517237
  5/5,  16.525416
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.5945
  2/5,  16.598214
  3/5,  16.608048
  4/5,  16.609763
  5/5,  16.628673
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.639653
  2/5,  2.65917
  3/5,  2.659654
  4/5,  2.646908
  5/5,  2.648315
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.347022
  2/5,  3.352754
  3/5,  3.365695
  4/5,  3.364088
  5/5,  3.377809
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.108492
  2/5,  3.110303
  3/5,  3.115779
  4/5,  3.117256
  5/5,  3.118472
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.956964
  2/5,  6.947511
  3/5,  6.955074
  4/5,  6.985967
  5/5,  7.035183
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.104467
  2/5,  5.115944
  3/5,  5.129451
  4/5,  5.143745
  5/5,  5.154178
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.786618
  2/5,  4.799898
  3/5,  4.816562
  4/5,  4.820584
  5/5,  4.841904
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.782635
  2/5,  3.797797
  3/5,  3.80742
  4/5,  3.808127
  5/5,  3.833136
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.772635
  2/5,  1.784751
  3/5,  1.787723
  4/5,  1.79671
  5/5,  1.806176
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.767592
  2/5,  1.771047
  3/5,  1.787951
  4/5,  1.787589
  5/5,  1.798748
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.484754
  2/5,  5.503217
  3/5,  5.538417
  4/5,  5.547133
  5/5,  5.622221
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.60061
  2/5,  4.604909
  3/5,  4.623999
  4/5,  4.642655
  5/5,  4.646628
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.595062
  2/5,  4.607041
  3/5,  4.622593
  4/5,  4.630673
  5/5,  4.654208
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.060515
  2/5,  2.076891
  3/5,  2.08258
  4/5,  2.087257
  5/5,  2.119757
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.209036
  2/5,  2.210369
  3/5,  2.22133
  4/5,  2.226502
  5/5,  2.234981
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.175897
  2/5,  2.178634
  3/5,  2.184355
  4/5,  2.187924
  5/5,  2.201846
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.849819
  2/5,  4.857682
  3/5,  4.862078
  4/5,  4.866159
  5/5,  4.885399
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.332424
  2/5,  5.329237
  3/5,  5.34246
  4/5,  5.353676
  5/5,  5.367878
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.305595
  2/5,  5.31074
  3/5,  5.315119
  4/5,  5.325844
  5/5,  5.340015
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.253917
  2/5,  0.253955
  3/5,  0.255193
  4/5,  0.254357
  5/5,  0.259904
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.28118
  2/5,  0.281508
  3/5,  0.282664
  4/5,  0.283557
  5/5,  0.284476
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.28166
  2/5,  0.284428
  3/5,  0.284928
  4/5,  0.287303
  5/5,  0.284882
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.263465
  2/5,  0.262652
  3/5,  0.266035
  4/5,  0.26832
  5/5,  0.267864
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.286741
  2/5,  0.286566
  3/5,  0.287431
  4/5,  0.288382
  5/5,  0.287973
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287358
  2/5,  0.287663
  3/5,  0.287595
  4/5,  0.287179
  5/5,  0.290849
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.921007
  2/5,  1.927882
  3/5,  1.932961
  4/5,  1.935509
  5/5,  1.946331
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.303302
  2/5,  2.315428
  3/5,  2.331345
  4/5,  2.329855
  5/5,  2.332507
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.214652
  2/5,  2.220706
  3/5,  2.221583
  4/5,  2.222773
  5/5,  2.228158
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.563032
  2/5,  4.581542
  3/5,  4.616369
  4/5,  4.625619
  5/5,  4.675738
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.197688
  2/5,  3.210209
  3/5,  3.21197
  4/5,  3.216915
  5/5,  3.220728
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.173544
  2/5,  3.178473
  3/5,  3.190071
  4/5,  3.194985
  5/5,  3.20089
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.266418
  2/5,  2.282054
  3/5,  2.297111
  4/5,  2.311023
  5/5,  2.341241
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.523691
  2/5,  1.5259
  3/5,  1.528022
  4/5,  1.531393
  5/5,  1.53709
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.606974
  2/5,  1.609591
  3/5,  1.616797
  4/5,  1.62202
  5/5,  1.630152
}
