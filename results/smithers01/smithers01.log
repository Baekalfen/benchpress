Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers01/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-n0xMWh.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.063465
  2/5,  6.087449
  3/5,  6.06877
  4/5,  6.063354
  5/5,  6.074442
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.626056
  2/5,  5.627312
  3/5,  5.629589
  4/5,  5.628089
  5/5,  5.619155
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.685331
  2/5,  5.656944
  3/5,  5.651944
  4/5,  5.660749
  5/5,  5.660539
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.601279
  2/5,  16.614149
  3/5,  16.60148
  4/5,  16.606128
  5/5,  16.606628
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.503151
  2/5,  16.555797
  3/5,  16.563952
  4/5,  16.516332
  5/5,  16.510485
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.605098
  2/5,  16.609116
  3/5,  16.59424
  4/5,  16.591976
  5/5,  16.594633
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.644329
  2/5,  2.656443
  3/5,  2.64912
  4/5,  2.655029
  5/5,  2.633218
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.363365
  2/5,  3.357133
  3/5,  3.359081
  4/5,  3.353651
  5/5,  3.358124
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.10589
  2/5,  3.112319
  3/5,  3.114034
  4/5,  3.10953
  5/5,  3.106853
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.967647
  2/5,  6.958401
  3/5,  6.940642
  4/5,  6.956616
  5/5,  6.957669
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.103253
  2/5,  5.108099
  3/5,  5.106207
  4/5,  5.103903
  5/5,  5.111504
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.790376
  2/5,  4.795107
  3/5,  4.803842
  4/5,  4.793635
  5/5,  4.798928
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.78218
  2/5,  3.798528
  3/5,  3.780719
  4/5,  3.787206
  5/5,  3.786742
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.776083
  2/5,  1.784048
  3/5,  1.778232
  4/5,  1.774274
  5/5,  1.774743
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.769933
  2/5,  1.771837
  3/5,  1.768549
  4/5,  1.768827
  5/5,  1.762169
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.483373
  2/5,  5.484712
  3/5,  5.481053
  4/5,  5.486314
  5/5,  5.485135
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.60592
  2/5,  4.603846
  3/5,  4.605239
  4/5,  4.606838
  5/5,  4.603256
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.595687
  2/5,  4.596049
  3/5,  4.597983
  4/5,  4.598858
  5/5,  4.610659
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.060839
  2/5,  2.063402
  3/5,  2.06144
  4/5,  2.060322
  5/5,  2.062967
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.209926
  2/5,  2.212698
  3/5,  2.20674
  4/5,  2.207231
  5/5,  2.214365
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.177265
  2/5,  2.184287
  3/5,  2.183895
  4/5,  2.182369
  5/5,  2.177826
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.868705
  2/5,  4.867722
  3/5,  4.863037
  4/5,  4.860867
  5/5,  4.861861
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.33111
  2/5,  5.33214
  3/5,  5.330011
  4/5,  5.332838
  5/5,  5.328377
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.305662
  2/5,  5.301035
  3/5,  5.301561
  4/5,  5.306455
  5/5,  5.303813
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.257193
  2/5,  0.25594
  3/5,  0.253161
  4/5,  0.254231
  5/5,  0.254124
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283024
  2/5,  0.282356
  3/5,  0.280657
  4/5,  0.281795
  5/5,  0.288065
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.284274
  2/5,  0.281861
  3/5,  0.282224
  4/5,  0.283077
  5/5,  0.283703
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.261753
  2/5,  0.262695
  3/5,  0.263618
  4/5,  0.265234
  5/5,  0.263129
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.291591
  2/5,  0.285523
  3/5,  0.287381
  4/5,  0.286665
  5/5,  0.286372
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287583
  2/5,  0.28567
  3/5,  0.284454
  4/5,  0.287049
  5/5,  0.285229
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.922541
  2/5,  1.928652
  3/5,  1.922108
  4/5,  1.931979
  5/5,  1.924806
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.319141
  2/5,  2.314928
  3/5,  2.314245
  4/5,  2.314792
  5/5,  2.317424
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.213126
  2/5,  2.21342
  3/5,  2.211421
  4/5,  2.214193
  5/5,  2.211987
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.555921
  2/5,  4.558161
  3/5,  4.551106
  4/5,  4.565848
  5/5,  4.556244
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.212247
  2/5,  3.207935
  3/5,  3.203157
  4/5,  3.204714
  5/5,  3.205772
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.180857
  2/5,  3.173136
  3/5,  3.183562
  4/5,  3.175658
  5/5,  3.175357
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.26939
  2/5,  2.271503
  3/5,  2.268752
  4/5,  2.268135
  5/5,  2.268488
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.523897
  2/5,  1.528081
  3/5,  1.525273
  4/5,  1.523471
  5/5,  1.525768
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.607379
  2/5,  1.607614
  3/5,  1.604462
  4/5,  1.603845
  5/5,  1.607301
}
