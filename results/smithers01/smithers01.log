Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/smithers01/3191cc618ba3a9f1455652a38267f355c0dfb0fb/benchmark-iVOlKd.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  6.005599
  2/5,  6.006491
  3/5,  6.00774
  4/5,  6.009919
  5/5,  6.002028
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.610635
  2/5,  5.605544
  3/5,  5.613457
  4/5,  5.617859
  5/5,  5.607844
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  5.645003
  2/5,  5.639984
  3/5,  5.635757
  4/5,  5.641528
  5/5,  5.637776
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  16.603386
  2/5,  16.643472
  3/5,  16.594661
  4/5,  16.568489
  5/5,  16.57
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.481632
  2/5,  16.484677
  3/5,  16.502593
  4/5,  16.477081
  5/5,  17.082338
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  16.555673
  2/5,  16.558712
  3/5,  16.570052
  4/5,  16.557269
  5/5,  16.555019
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  2.634825
  2/5,  2.632559
  3/5,  2.638679
  4/5,  2.636032
  5/5,  2.636222
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.337424
  2/5,  3.342182
  3/5,  3.335997
  4/5,  3.343445
  5/5,  3.333806
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  3.1002
  2/5,  3.106358
  3/5,  3.107858
  4/5,  3.103544
  5/5,  3.096602
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  6.888054
  2/5,  6.90062
  3/5,  6.880616
  4/5,  6.903713
  5/5,  6.905947
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  5.069191
  2/5,  5.068416
  3/5,  5.081111
  4/5,  5.07308
  5/5,  5.073125
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  4.773751
  2/5,  4.774636
  3/5,  4.779872
  4/5,  4.772868
  5/5,  4.780653
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  3.768538
  2/5,  3.783157
  3/5,  3.759322
  4/5,  3.765247
  5/5,  3.766401
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.745714
  2/5,  1.714354
  3/5,  1.749534
  4/5,  1.74864
  5/5,  1.751882
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  1.736947
  2/5,  1.73564
  3/5,  1.743179
  4/5,  1.740788
  5/5,  1.736161
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  5.380257
  2/5,  5.38529
  3/5,  5.381439
  4/5,  5.387894
  5/5,  5.383889
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.562431
  2/5,  4.564898
  3/5,  4.564134
  4/5,  4.573977
  5/5,  4.566804
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  4.562666
  2/5,  4.556575
  3/5,  4.559141
  4/5,  4.555488
  5/5,  4.557893
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  2.023914
  2/5,  2.017173
  3/5,  2.017999
  4/5,  2.01641
  5/5,  2.019983
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.194766
  2/5,  2.191552
  3/5,  2.193948
  4/5,  2.190894
  5/5,  2.190439
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  2.154735
  2/5,  2.16147
  3/5,  2.157493
  4/5,  2.156516
  5/5,  2.154809
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  4.827189
  2/5,  4.83002
  3/5,  4.830516
  4/5,  4.839265
  5/5,  4.825584
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.307002
  2/5,  5.311667
  3/5,  5.29689
  4/5,  5.300103
  5/5,  5.29792
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  5.2684
  2/5,  5.27506
  3/5,  5.279265
  4/5,  5.291413
  5/5,  5.276288
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  0.252303
  2/5,  0.2512
  3/5,  0.252833
  4/5,  0.253107
  5/5,  0.251381
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.289029
  2/5,  0.282325
  3/5,  0.283852
  4/5,  0.281854
  5/5,  0.282201
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  0.283149
  2/5,  0.282728
  3/5,  0.282988
  4/5,  0.283378
  5/5,  0.282254
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  0.260707
  2/5,  0.260802
  3/5,  0.260268
  4/5,  0.26071
  5/5,  0.260689
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.287114
  2/5,  0.289889
  3/5,  0.286708
  4/5,  0.288265
  5/5,  0.28623
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  0.285862
  2/5,  0.285649
  3/5,  0.285497
  4/5,  0.285954
  5/5,  0.285386
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  1.921479
  2/5,  1.919912
  3/5,  1.921223
  4/5,  1.919052
  5/5,  1.920422
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.3002
  2/5,  2.298422
  3/5,  2.29555
  4/5,  2.296008
  5/5,  2.302052
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  2.203331
  2/5,  2.206718
  3/5,  2.201609
  4/5,  2.199492
  5/5,  2.199721
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  4.447649
  2/5,  4.433479
  3/5,  4.447301
  4/5,  4.457842
  5/5,  4.470379
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.195596
  2/5,  3.193871
  3/5,  3.191751
  4/5,  3.193523
  5/5,  3.192073
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  3.159952
  2/5,  3.15104
  3/5,  3.156808
  4/5,  3.162239
  5/5,  3.159325
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  2.220283
  2/5,  2.215836
  3/5,  2.217934
  4/5,  2.21975
  5/5,  2.217489
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.515629
  2/5,  1.515411
  3/5,  1.51178
  4/5,  1.511907
  5/5,  1.514948
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  1.591196
  2/5,  1.592633
  3/5,  1.591829
  4/5,  1.593258
  5/5,  1.592104
}
