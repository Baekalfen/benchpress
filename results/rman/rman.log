Running benchmark suite 'score_test'; results are written to: /home/safl/buildbot/benchpress/results/rman/08d082bea753a6cf66097622b448da203d868aea/benchmark-sXj9gr.json.
{ Black Scholes - numpy ( None ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=False
  1/5,  35.329032
  2/5,  35.130514
  3/5,  35.347967
  4/5,  35.571905
  5/5,  35.342307
}
{ Black Scholes - simple ( simple ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  32.455242
  2/5,  32.460883
  3/5,  32.44906
  4/5,  32.484911
  5/5,  32.45124
}
{ Black Scholes - score ( score ),
  taskset -c 1 python bscholes.py --size=2000000*4 --cphvb=True
  1/5,  33.982004
  2/5,  33.852598
  3/5,  33.855621
  4/5,  33.985761
  5/5,  33.876299
}
{ Cache Synth - numpy ( None ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=False
  1/5,  85.890831
  2/5,  85.903633
  3/5,  86.015591
  4/5,  85.982304
  5/5,  85.958274
}
{ Cache Synth - simple ( simple ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  84.484266
  2/5,  84.467074
  3/5,  84.468584
  4/5,  84.453848
  5/5,  84.472908
}
{ Cache Synth - score ( score ),
  taskset -c 1 python cache.py --size=10500000*10*1 --cphvb=True
  1/5,  85.351066
  2/5,  85.277293
  3/5,  85.294486
  4/5,  85.286742
  5/5,  85.307253
}
{ Jacobi Iterative - numpy ( None ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=False
  1/5,  14.919573
  2/5,  14.887803
  3/5,  14.917928
  4/5,  15.715006
  5/5,  15.784763
}
{ Jacobi Iterative - simple ( simple ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  14.881328
  2/5,  14.902705
  3/5,  14.901559
  4/5,  14.872431
  5/5,  14.886441
}
{ Jacobi Iterative - score ( score ),
  taskset -c 1 python jacobi.iterative.py --size=7000*7000*4 --cphvb=True
  1/5,  13.391737
  2/5,  13.373167
  3/5,  13.393908
  4/5,  13.365442
  5/5,  13.412231
}
{ Jacobi Iterative - Reduce - numpy ( None ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=False
  1/5,  64.248014
  2/5,  63.8608
  3/5,  64.176608
  4/5,  63.435465
  5/5,  62.991169
}
{ Jacobi Iterative - Reduce - simple ( simple ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  24.035204
  2/5,  23.968871
  3/5,  24.037737
  4/5,  23.999092
  5/5,  24.016132
}
{ Jacobi Iterative - Reduce - score ( score ),
  taskset -c 1 python jacobi.iterative.reduc.py --size=7000*7000*4 --cphvb=True
  1/5,  22.273991
  2/5,  22.431711
  3/5,  22.227192
  4/5,  22.320032
  5/5,  22.081227
}
{ kNN - numpy ( None ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=False
  1/5,  48.000563
  2/5,  48.125577
  3/5,  46.985792
  4/5,  46.986306
  5/5,  45.688211
}
{ kNN - simple ( simple ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  13.8154
  2/5,  13.66084
  3/5,  13.35863
  4/5,  13.545874
  5/5,  13.584085
}
{ kNN - score ( score ),
  taskset -c 1 python knn.py --size=10000*120 --cphvb=True
  1/5,  45.71606
  2/5,  47.701255
  3/5,  44.325016
  4/5,  45.34142
  5/5,  47.274284
}
{ Lattice Boltzmann 2D - numpy ( None ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=False
  1/5,  30.177773
  2/5,  30.501032
  3/5,  29.683641
  4/5,  29.939873
  5/5,  30.074704
}
{ Lattice Boltzmann 2D - simple ( simple ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  22.387568
  2/5,  22.546191
  3/5,  22.509354
  4/5,  22.476938
  5/5,  22.531588
}
{ Lattice Boltzmann 2D - score ( score ),
  taskset -c 1 python lbm.2d.py --size=15*200000*2 --cphvb=True
  1/5,  22.595068
  2/5,  22.532359
  3/5,  22.529653
  4/5,  22.557505
  5/5,  22.674741
}
{ Lattice Boltzmann 3D - numpy ( None ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=False
  1/5,  12.008699
  2/5,  11.919788
  3/5,  11.929382
  4/5,  11.94714
  5/5,  12.193207
}
{ Lattice Boltzmann 3D - simple ( simple ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  10.643596
  2/5,  10.593168
  3/5,  10.666369
  4/5,  10.620366
  5/5,  10.595659
}
{ Lattice Boltzmann 3D - score ( score ),
  taskset -c 1 python lbm.3d.py --size=100*100*100*2 --cphvb=True
  1/5,  10.502226
  2/5,  10.505569
  3/5,  10.576411
  4/5,  10.515502
  5/5,  10.511232
}
{ Monte Carlo PI - RIL - numpy ( None ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=False
  1/5,  28.069459
  2/5,  28.258606
  3/5,  27.975724
  4/5,  27.871519
  5/5,  27.770919
}
{ Monte Carlo PI - RIL - simple ( simple ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  24.696131
  2/5,  24.629769
  3/5,  24.635672
  4/5,  24.59059
  5/5,  24.632893
}
{ Monte Carlo PI - RIL - score ( score ),
  taskset -c 1 python mc.py --size=10*1000000*10 --cphvb=True
  1/5,  24.512088
  2/5,  24.546704
  3/5,  24.565754
  4/5,  24.591964
  5/5,  24.476282
}
{ Monte Carlo PI - 2xN - numpy ( None ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=False
  1/5,  1.491428
  2/5,  1.486404
  3/5,  1.483466
  4/5,  1.487285
  5/5,  1.483092
}
{ Monte Carlo PI - 2xN - simple ( simple ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  1.273819
  2/5,  1.269497
  3/5,  1.272653
  4/5,  1.270691
  5/5,  1.270742
}
{ Monte Carlo PI - 2xN - score ( score ),
  taskset -c 1 python mc.2byN.py --size=10*1000000*10 --cphvb=True
  1/5,  1.295705
  2/5,  1.293161
  3/5,  1.295752
  4/5,  1.295549
  5/5,  1.293404
}
{ Monte Carlo PI - Nx2 - numpy ( None ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=False
  1/5,  1.511802
  2/5,  1.510301
  3/5,  1.5082
  4/5,  1.508508
  5/5,  1.523525
}
{ Monte Carlo PI - Nx2 - simple ( simple ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  1.318746
  2/5,  1.317394
  3/5,  1.317387
  4/5,  1.317968
  5/5,  1.327088
}
{ Monte Carlo PI - Nx2 - score ( score ),
  taskset -c 1 python mc.Nby2.py --size=10*1000000*10 --cphvb=True
  1/5,  1.322347
  2/5,  1.320601
  3/5,  1.322603
  4/5,  1.323358
  5/5,  1.331699
}
{ Stencil - 1D 4way - numpy ( None ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=False
  1/5,  11.041803
  2/5,  11.043791
  3/5,  11.038248
  4/5,  11.046946
  5/5,  11.072476
}
{ Stencil - 1D 4way - simple ( simple ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  11.857218
  2/5,  11.826126
  3/5,  11.810918
  4/5,  11.831096
  5/5,  11.813956
}
{ Stencil - 1D 4way - score ( score ),
  taskset -c 1 python stencil.simplest.py --size=100000000*1 --cphvb=True
  1/5,  10.866373
  2/5,  10.854681
  3/5,  10.863754
  4/5,  10.870384
  5/5,  10.839514
}
{ Stencil - 2D - numpy ( None ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=False
  1/5,  26.82328
  2/5,  26.649469
  3/5,  26.864429
  4/5,  26.678175
  5/5,  26.669691
}
{ Stencil - 2D - simple ( simple ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  16.779809
  2/5,  16.811803
  3/5,  16.769764
  4/5,  16.847127
  5/5,  16.74484
}
{ Stencil - 2D - score ( score ),
  taskset -c 1 python stencil.2d.py --size=10000*1000*10 --cphvb=True
  1/5,  16.05534
  2/5,  16.027117
  3/5,  16.082325
  4/5,  16.024499
  5/5,  16.020568
}
{ Shallow Water - numpy ( None ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=False
  1/5,  13.372308
  2/5,  13.419558
  3/5,  13.409545
  4/5,  13.485796
  5/5,  13.427175
}
{ Shallow Water - simple ( simple ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  8.313372
  2/5,  8.361562
  3/5,  8.343782
  4/5,  8.336356
  5/5,  8.344869
}
{ Shallow Water - score ( score ),
  taskset -c 1 python swater.py --size=2200*1 --cphvb=True
  1/5,  8.824773
  2/5,  8.843457
  3/5,  8.853509
  4/5,  8.829179
  5/5,  8.837064
}
