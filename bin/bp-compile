#!/usr/bin/env python
import subprocess
import argparse
import pprint
import os
from benchpress.version import get_paths, implementations

class bgcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_header(text):
    print(bgcolors.UNDERLINE + bgcolors.HEADER + text + bgcolors.ENDC)

def print_good(text):
    print(bgcolors.OKGREEN + text + bgcolors.ENDC)

def print_warning(text):
    print(bgcolors.WARNING + text + bgcolors.ENDC)

def print_fail(text):
    print(bgcolors.FAIL + text + bgcolors.ENDC)

def print_info(text):
    print(bgcolors.OKBLUE + text + bgcolors.ENDC)

def compile(search_path=None, languages=['c','cpp', 'cs'], verbose=False, make_target='all'):
    """Compile benchmarks of the given languages."""

    paths = get_paths()
    if not search_path:
        search_path = paths["benchmarks"]

    benchmarks = implementations(search_path, verbose=verbose)
    summary = []
    for lang in languages:
        print_header("# Compiling %s benchmarks" % lang)
        impls = benchmarks["impls"]

        for bench_lbl in impls:
            bench = impls[bench_lbl]
            if lang not in bench:
                continue
            for tool in bench[lang]:
                target = os.sep.join([bench_lbl, tool])
                path = os.sep.join([search_path, bench_lbl, tool])

                if bench[lang][tool]["issues"]:
                    print_warning("!! Skipping %s, it has known issues" % target)
                    summary.append((target, "Known issues."))
                    continue

                print_info("## Compiling %s" % target)
                process = subprocess.Popen(
                    ["make", make_target],
                    cwd=path,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
                out, err = process.communicate()
                if out:
                    print_good(out)
                if err:
                    print_fail(err)
                    summary.append((target, err))
                else:
                    summary.append((target, None))
   
    print_header("Summary")
    for target, msg in summary:
        if msg:
            print_fail(target)
        else:
            print_good(target)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Compile benchmarks that require it")

    parser.add_argument('--all', action='store_true', help="Compile all")
    parser.add_argument('--lang', choices=['c', 'cpp', 'cs'], help="Compile all of the provided language")
    parser.add_argument('--verbose', action='store_true', help="Output verbose debug info when finding benchmarks")
    parser.add_argument('--target', choices=['all', 'clean'], help="Choose which command to give to the make script", default='all')

    args = parser.parse_args()  # Parse arguments

    if args.all:
        compile(verbose=args.verbose, make_target=args.target)
    elif args.lang:
        compile(languages=[args.lang], verbose=args.verbose, make_target=args.target)
    else:
        parser.print_usage()
